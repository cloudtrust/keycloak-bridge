// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-bridge/pkg/configuration (interfaces: Component,ContextKeyManager)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/configuration.go -package=mock -mock_names=Component=Component,ContextKeyManager=ContextKeyManager github.com/cloudtrust/keycloak-bridge/pkg/configuration Component,ContextKeyManager
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	keycloakb "github.com/cloudtrust/keycloak-bridge/internal/keycloakb"
	gomock "go.uber.org/mock/gomock"
)

// Component is a mock of Component interface.
type Component struct {
	ctrl     *gomock.Controller
	recorder *ComponentMockRecorder
	isgomock struct{}
}

// ComponentMockRecorder is the mock recorder for Component.
type ComponentMockRecorder struct {
	mock *Component
}

// NewComponent creates a new mock instance.
func NewComponent(ctrl *gomock.Controller) *Component {
	mock := &Component{ctrl: ctrl}
	mock.recorder = &ComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Component) EXPECT() *ComponentMockRecorder {
	return m.recorder
}

// GetIdentificationURI mocks base method.
func (m *Component) GetIdentificationURI(ctx context.Context, realm, contextKey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentificationURI", ctx, realm, contextKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentificationURI indicates an expected call of GetIdentificationURI.
func (mr *ComponentMockRecorder) GetIdentificationURI(ctx, realm, contextKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentificationURI", reflect.TypeOf((*Component)(nil).GetIdentificationURI), ctx, realm, contextKey)
}

// ContextKeyManager is a mock of ContextKeyManager interface.
type ContextKeyManager struct {
	ctrl     *gomock.Controller
	recorder *ContextKeyManagerMockRecorder
	isgomock struct{}
}

// ContextKeyManagerMockRecorder is the mock recorder for ContextKeyManager.
type ContextKeyManagerMockRecorder struct {
	mock *ContextKeyManager
}

// NewContextKeyManager creates a new mock instance.
func NewContextKeyManager(ctrl *gomock.Controller) *ContextKeyManager {
	mock := &ContextKeyManager{ctrl: ctrl}
	mock.recorder = &ContextKeyManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ContextKeyManager) EXPECT() *ContextKeyManagerMockRecorder {
	return m.recorder
}

// GetOverride mocks base method.
func (m *ContextKeyManager) GetOverride(realm, contextKey string) (keycloakb.ContextKeyParameters, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOverride", realm, contextKey)
	ret0, _ := ret[0].(keycloakb.ContextKeyParameters)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetOverride indicates an expected call of GetOverride.
func (mr *ContextKeyManagerMockRecorder) GetOverride(realm, contextKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOverride", reflect.TypeOf((*ContextKeyManager)(nil).GetOverride), realm, contextKey)
}
