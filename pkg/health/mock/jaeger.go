// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-bridge/pkg/health (interfaces: JaegerModule,Jaeger)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	health "github.com/cloudtrust/keycloak-bridge/pkg/health"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// JaegerModule is a mock of JaegerModule interface
type JaegerModule struct {
	ctrl     *gomock.Controller
	recorder *JaegerModuleMockRecorder
}

// JaegerModuleMockRecorder is the mock recorder for JaegerModule
type JaegerModuleMockRecorder struct {
	mock *JaegerModule
}

// NewJaegerModule creates a new mock instance
func NewJaegerModule(ctrl *gomock.Controller) *JaegerModule {
	mock := &JaegerModule{ctrl: ctrl}
	mock.recorder = &JaegerModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *JaegerModule) EXPECT() *JaegerModuleMockRecorder {
	return m.recorder
}

// HealthChecks mocks base method
func (m *JaegerModule) HealthChecks(arg0 context.Context) []health.JaegerHealthReport {
	ret := m.ctrl.Call(m, "HealthChecks", arg0)
	ret0, _ := ret[0].([]health.JaegerHealthReport)
	return ret0
}

// HealthChecks indicates an expected call of HealthChecks
func (mr *JaegerModuleMockRecorder) HealthChecks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthChecks", reflect.TypeOf((*JaegerModule)(nil).HealthChecks), arg0)
}

// Jaeger is a mock of Jaeger interface
type Jaeger struct {
	ctrl     *gomock.Controller
	recorder *JaegerMockRecorder
}

// JaegerMockRecorder is the mock recorder for Jaeger
type JaegerMockRecorder struct {
	mock *Jaeger
}

// NewJaeger creates a new mock instance
func NewJaeger(ctrl *gomock.Controller) *Jaeger {
	mock := &Jaeger{ctrl: ctrl}
	mock.recorder = &JaegerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Jaeger) EXPECT() *JaegerMockRecorder {
	return m.recorder
}
