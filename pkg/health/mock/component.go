// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-bridge/pkg/health (interfaces: Component)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	health "github.com/cloudtrust/keycloak-bridge/pkg/health"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Component is a mock of Component interface
type Component struct {
	ctrl     *gomock.Controller
	recorder *ComponentMockRecorder
}

// ComponentMockRecorder is the mock recorder for Component
type ComponentMockRecorder struct {
	mock *Component
}

// NewComponent creates a new mock instance
func NewComponent(ctrl *gomock.Controller) *Component {
	mock := &Component{ctrl: ctrl}
	mock.recorder = &ComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Component) EXPECT() *ComponentMockRecorder {
	return m.recorder
}

// AllHealthChecks mocks base method
func (m *Component) AllHealthChecks(arg0 context.Context) map[string]string {
	ret := m.ctrl.Call(m, "AllHealthChecks", arg0)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// AllHealthChecks indicates an expected call of AllHealthChecks
func (mr *ComponentMockRecorder) AllHealthChecks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllHealthChecks", reflect.TypeOf((*Component)(nil).AllHealthChecks), arg0)
}

// InfluxHealthChecks mocks base method
func (m *Component) InfluxHealthChecks(arg0 context.Context) health.Reports {
	ret := m.ctrl.Call(m, "InfluxHealthChecks", arg0)
	ret0, _ := ret[0].(health.Reports)
	return ret0
}

// InfluxHealthChecks indicates an expected call of InfluxHealthChecks
func (mr *ComponentMockRecorder) InfluxHealthChecks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfluxHealthChecks", reflect.TypeOf((*Component)(nil).InfluxHealthChecks), arg0)
}

// JaegerHealthChecks mocks base method
func (m *Component) JaegerHealthChecks(arg0 context.Context) health.Reports {
	ret := m.ctrl.Call(m, "JaegerHealthChecks", arg0)
	ret0, _ := ret[0].(health.Reports)
	return ret0
}

// JaegerHealthChecks indicates an expected call of JaegerHealthChecks
func (mr *ComponentMockRecorder) JaegerHealthChecks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JaegerHealthChecks", reflect.TypeOf((*Component)(nil).JaegerHealthChecks), arg0)
}

// KeycloakHealthChecks mocks base method
func (m *Component) KeycloakHealthChecks(arg0 context.Context) health.Reports {
	ret := m.ctrl.Call(m, "KeycloakHealthChecks", arg0)
	ret0, _ := ret[0].(health.Reports)
	return ret0
}

// KeycloakHealthChecks indicates an expected call of KeycloakHealthChecks
func (mr *ComponentMockRecorder) KeycloakHealthChecks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeycloakHealthChecks", reflect.TypeOf((*Component)(nil).KeycloakHealthChecks), arg0)
}

// RedisHealthChecks mocks base method
func (m *Component) RedisHealthChecks(arg0 context.Context) health.Reports {
	ret := m.ctrl.Call(m, "RedisHealthChecks", arg0)
	ret0, _ := ret[0].(health.Reports)
	return ret0
}

// RedisHealthChecks indicates an expected call of RedisHealthChecks
func (mr *ComponentMockRecorder) RedisHealthChecks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedisHealthChecks", reflect.TypeOf((*Component)(nil).RedisHealthChecks), arg0)
}

// SentryHealthChecks mocks base method
func (m *Component) SentryHealthChecks(arg0 context.Context) health.Reports {
	ret := m.ctrl.Call(m, "SentryHealthChecks", arg0)
	ret0, _ := ret[0].(health.Reports)
	return ret0
}

// SentryHealthChecks indicates an expected call of SentryHealthChecks
func (mr *ComponentMockRecorder) SentryHealthChecks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SentryHealthChecks", reflect.TypeOf((*Component)(nil).SentryHealthChecks), arg0)
}
