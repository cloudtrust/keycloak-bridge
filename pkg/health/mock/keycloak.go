// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-bridge/pkg/health (interfaces: Keycloak,KeycloakModule)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	health "github.com/cloudtrust/keycloak-bridge/pkg/health"
	keycloak_client "github.com/cloudtrust/keycloak-client"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Keycloak is a mock of Keycloak interface
type Keycloak struct {
	ctrl     *gomock.Controller
	recorder *KeycloakMockRecorder
}

// KeycloakMockRecorder is the mock recorder for Keycloak
type KeycloakMockRecorder struct {
	mock *Keycloak
}

// NewKeycloak creates a new mock instance
func NewKeycloak(ctrl *gomock.Controller) *Keycloak {
	mock := &Keycloak{ctrl: ctrl}
	mock.recorder = &KeycloakMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Keycloak) EXPECT() *KeycloakMockRecorder {
	return m.recorder
}

// CountUsers mocks base method
func (m *Keycloak) CountUsers(arg0 string) (int, error) {
	ret := m.ctrl.Call(m, "CountUsers", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsers indicates an expected call of CountUsers
func (mr *KeycloakMockRecorder) CountUsers(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsers", reflect.TypeOf((*Keycloak)(nil).CountUsers), arg0)
}

// CreateRealm mocks base method
func (m *Keycloak) CreateRealm(arg0 keycloak_client.RealmRepresentation) error {
	ret := m.ctrl.Call(m, "CreateRealm", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRealm indicates an expected call of CreateRealm
func (mr *KeycloakMockRecorder) CreateRealm(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRealm", reflect.TypeOf((*Keycloak)(nil).CreateRealm), arg0)
}

// CreateUser mocks base method
func (m *Keycloak) CreateUser(arg0 string, arg1 keycloak_client.UserRepresentation) error {
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser
func (mr *KeycloakMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*Keycloak)(nil).CreateUser), arg0, arg1)
}

// DeleteRealm mocks base method
func (m *Keycloak) DeleteRealm(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteRealm", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRealm indicates an expected call of DeleteRealm
func (mr *KeycloakMockRecorder) DeleteRealm(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRealm", reflect.TypeOf((*Keycloak)(nil).DeleteRealm), arg0)
}

// DeleteUser mocks base method
func (m *Keycloak) DeleteUser(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *KeycloakMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*Keycloak)(nil).DeleteUser), arg0, arg1)
}

// GetRealm mocks base method
func (m *Keycloak) GetRealm(arg0 string) (keycloak_client.RealmRepresentation, error) {
	ret := m.ctrl.Call(m, "GetRealm", arg0)
	ret0, _ := ret[0].(keycloak_client.RealmRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealm indicates an expected call of GetRealm
func (mr *KeycloakMockRecorder) GetRealm(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealm", reflect.TypeOf((*Keycloak)(nil).GetRealm), arg0)
}

// GetRealms mocks base method
func (m *Keycloak) GetRealms() ([]keycloak_client.RealmRepresentation, error) {
	ret := m.ctrl.Call(m, "GetRealms")
	ret0, _ := ret[0].([]keycloak_client.RealmRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealms indicates an expected call of GetRealms
func (mr *KeycloakMockRecorder) GetRealms() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealms", reflect.TypeOf((*Keycloak)(nil).GetRealms))
}

// GetUser mocks base method
func (m *Keycloak) GetUser(arg0, arg1 string) (keycloak_client.UserRepresentation, error) {
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(keycloak_client.UserRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *KeycloakMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*Keycloak)(nil).GetUser), arg0, arg1)
}

// GetUsers mocks base method
func (m *Keycloak) GetUsers(arg0 string, arg1 ...string) ([]keycloak_client.UserRepresentation, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsers", varargs...)
	ret0, _ := ret[0].([]keycloak_client.UserRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *KeycloakMockRecorder) GetUsers(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*Keycloak)(nil).GetUsers), varargs...)
}

// UpdateRealm mocks base method
func (m *Keycloak) UpdateRealm(arg0 string, arg1 keycloak_client.RealmRepresentation) error {
	ret := m.ctrl.Call(m, "UpdateRealm", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRealm indicates an expected call of UpdateRealm
func (mr *KeycloakMockRecorder) UpdateRealm(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRealm", reflect.TypeOf((*Keycloak)(nil).UpdateRealm), arg0, arg1)
}

// UpdateUser mocks base method
func (m *Keycloak) UpdateUser(arg0, arg1 string, arg2 keycloak_client.UserRepresentation) error {
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *KeycloakMockRecorder) UpdateUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*Keycloak)(nil).UpdateUser), arg0, arg1, arg2)
}

// KeycloakModule is a mock of KeycloakModule interface
type KeycloakModule struct {
	ctrl     *gomock.Controller
	recorder *KeycloakModuleMockRecorder
}

// KeycloakModuleMockRecorder is the mock recorder for KeycloakModule
type KeycloakModuleMockRecorder struct {
	mock *KeycloakModule
}

// NewKeycloakModule creates a new mock instance
func NewKeycloakModule(ctrl *gomock.Controller) *KeycloakModule {
	mock := &KeycloakModule{ctrl: ctrl}
	mock.recorder = &KeycloakModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *KeycloakModule) EXPECT() *KeycloakModuleMockRecorder {
	return m.recorder
}

// HealthChecks mocks base method
func (m *KeycloakModule) HealthChecks(arg0 context.Context) []health.KeycloakReport {
	ret := m.ctrl.Call(m, "HealthChecks", arg0)
	ret0, _ := ret[0].([]health.KeycloakReport)
	return ret0
}

// HealthChecks indicates an expected call of HealthChecks
func (mr *KeycloakModuleMockRecorder) HealthChecks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthChecks", reflect.TypeOf((*KeycloakModule)(nil).HealthChecks), arg0)
}
