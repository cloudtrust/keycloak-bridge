// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-bridge/pkg/event (interfaces: MuxComponent,Component,AdminComponent)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	fb "github.com/cloudtrust/keycloak-bridge/api/event/fb"
	gomock "github.com/golang/mock/gomock"
)

// MuxComponent is a mock of MuxComponent interface
type MuxComponent struct {
	ctrl     *gomock.Controller
	recorder *MuxComponentMockRecorder
}

// MuxComponentMockRecorder is the mock recorder for MuxComponent
type MuxComponentMockRecorder struct {
	mock *MuxComponent
}

// NewMuxComponent creates a new mock instance
func NewMuxComponent(ctrl *gomock.Controller) *MuxComponent {
	mock := &MuxComponent{ctrl: ctrl}
	mock.recorder = &MuxComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MuxComponent) EXPECT() *MuxComponentMockRecorder {
	return m.recorder
}

// Event mocks base method
func (m *MuxComponent) Event(arg0 context.Context, arg1 string, arg2 []byte) error {

	ret := m.ctrl.Call(m, "Event", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Event indicates an expected call of Event
func (mr *MuxComponentMockRecorder) Event(arg0, arg1, arg2 interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Event", reflect.TypeOf((*MuxComponent)(nil).Event), arg0, arg1, arg2)
}

// Component is a mock of Component interface
type Component struct {
	ctrl     *gomock.Controller
	recorder *ComponentMockRecorder
}

// ComponentMockRecorder is the mock recorder for Component
type ComponentMockRecorder struct {
	mock *Component
}

// NewComponent creates a new mock instance
func NewComponent(ctrl *gomock.Controller) *Component {
	mock := &Component{ctrl: ctrl}
	mock.recorder = &ComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Component) EXPECT() *ComponentMockRecorder {
	return m.recorder
}

// Event mocks base method
func (m *Component) Event(arg0 context.Context, arg1 *fb.Event) error {

	ret := m.ctrl.Call(m, "Event", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Event indicates an expected call of Event
func (mr *ComponentMockRecorder) Event(arg0, arg1 interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Event", reflect.TypeOf((*Component)(nil).Event), arg0, arg1)
}

// AdminComponent is a mock of AdminComponent interface
type AdminComponent struct {
	ctrl     *gomock.Controller
	recorder *AdminComponentMockRecorder
}

// AdminComponentMockRecorder is the mock recorder for AdminComponent
type AdminComponentMockRecorder struct {
	mock *AdminComponent
}

// NewAdminComponent creates a new mock instance
func NewAdminComponent(ctrl *gomock.Controller) *AdminComponent {
	mock := &AdminComponent{ctrl: ctrl}
	mock.recorder = &AdminComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *AdminComponent) EXPECT() *AdminComponentMockRecorder {
	return m.recorder
}

// AdminEvent mocks base method
func (m *AdminComponent) AdminEvent(arg0 context.Context, arg1 *fb.AdminEvent) error {

	ret := m.ctrl.Call(m, "AdminEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminEvent indicates an expected call of AdminEvent
func (mr *AdminComponentMockRecorder) AdminEvent(arg0, arg1 interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminEvent", reflect.TypeOf((*AdminComponent)(nil).AdminEvent), arg0, arg1)
}
