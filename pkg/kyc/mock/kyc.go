// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-bridge/pkg/kyc (interfaces: Component,KeycloakClient,ArchiveDBModule,ConfigDBModule,UserProfileCache)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/kyc.go -package=mock -mock_names=Component=Component,KeycloakClient=KeycloakClient,ArchiveDBModule=ArchiveDBModule,ConfigDBModule=ConfigDBModule,UserProfileCache=UserProfileCache github.com/cloudtrust/keycloak-bridge/pkg/kyc Component,KeycloakClient,ArchiveDBModule,ConfigDBModule,UserProfileCache
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	configuration "github.com/cloudtrust/common-service/v2/configuration"
	apicommon "github.com/cloudtrust/keycloak-bridge/api/common"
	apikyc "github.com/cloudtrust/keycloak-bridge/api/kyc"
	dto "github.com/cloudtrust/keycloak-bridge/internal/dto"
	keycloak "github.com/cloudtrust/keycloak-client/v2"
	gomock "go.uber.org/mock/gomock"
)

// Component is a mock of Component interface.
type Component struct {
	ctrl     *gomock.Controller
	recorder *ComponentMockRecorder
	isgomock struct{}
}

// ComponentMockRecorder is the mock recorder for Component.
type ComponentMockRecorder struct {
	mock *Component
}

// NewComponent creates a new mock instance.
func NewComponent(ctrl *gomock.Controller) *Component {
	mock := &Component{ctrl: ctrl}
	mock.recorder = &ComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Component) EXPECT() *ComponentMockRecorder {
	return m.recorder
}

// GetActions mocks base method.
func (m *Component) GetActions(ctx context.Context) ([]apikyc.ActionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActions", ctx)
	ret0, _ := ret[0].([]apikyc.ActionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActions indicates an expected call of GetActions.
func (mr *ComponentMockRecorder) GetActions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActions", reflect.TypeOf((*Component)(nil).GetActions), ctx)
}

// GetUser mocks base method.
func (m *Component) GetUser(ctx context.Context, realmName, userID string, consentCode *string) (apikyc.UserRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, realmName, userID, consentCode)
	ret0, _ := ret[0].(apikyc.UserRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *ComponentMockRecorder) GetUser(ctx, realmName, userID, consentCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*Component)(nil).GetUser), ctx, realmName, userID, consentCode)
}

// GetUserByUsername mocks base method.
func (m *Component) GetUserByUsername(ctx context.Context, realmName, username string) (apikyc.UserRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, realmName, username)
	ret0, _ := ret[0].(apikyc.UserRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *ComponentMockRecorder) GetUserByUsername(ctx, realmName, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*Component)(nil).GetUserByUsername), ctx, realmName, username)
}

// GetUserByUsernameInSocialRealm mocks base method.
func (m *Component) GetUserByUsernameInSocialRealm(ctx context.Context, username string) (apikyc.UserRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsernameInSocialRealm", ctx, username)
	ret0, _ := ret[0].(apikyc.UserRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsernameInSocialRealm indicates an expected call of GetUserByUsernameInSocialRealm.
func (mr *ComponentMockRecorder) GetUserByUsernameInSocialRealm(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsernameInSocialRealm", reflect.TypeOf((*Component)(nil).GetUserByUsernameInSocialRealm), ctx, username)
}

// GetUserInSocialRealm mocks base method.
func (m *Component) GetUserInSocialRealm(ctx context.Context, userID string, consentCode *string) (apikyc.UserRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInSocialRealm", ctx, userID, consentCode)
	ret0, _ := ret[0].(apikyc.UserRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInSocialRealm indicates an expected call of GetUserInSocialRealm.
func (mr *ComponentMockRecorder) GetUserInSocialRealm(ctx, userID, consentCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInSocialRealm", reflect.TypeOf((*Component)(nil).GetUserInSocialRealm), ctx, userID, consentCode)
}

// GetUserProfile mocks base method.
func (m *Component) GetUserProfile(ctx context.Context, realmName string) (apicommon.ProfileRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", ctx, realmName)
	ret0, _ := ret[0].(apicommon.ProfileRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *ComponentMockRecorder) GetUserProfile(ctx, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*Component)(nil).GetUserProfile), ctx, realmName)
}

// GetUserProfileInSocialRealm mocks base method.
func (m *Component) GetUserProfileInSocialRealm(ctx context.Context) (apicommon.ProfileRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfileInSocialRealm", ctx)
	ret0, _ := ret[0].(apicommon.ProfileRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfileInSocialRealm indicates an expected call of GetUserProfileInSocialRealm.
func (mr *ComponentMockRecorder) GetUserProfileInSocialRealm(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfileInSocialRealm", reflect.TypeOf((*Component)(nil).GetUserProfileInSocialRealm), ctx)
}

// SendSmsCode mocks base method.
func (m *Component) SendSmsCode(ctx context.Context, realmName, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSmsCode", ctx, realmName, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendSmsCode indicates an expected call of SendSmsCode.
func (mr *ComponentMockRecorder) SendSmsCode(ctx, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSmsCode", reflect.TypeOf((*Component)(nil).SendSmsCode), ctx, realmName, userID)
}

// SendSmsCodeInSocialRealm mocks base method.
func (m *Component) SendSmsCodeInSocialRealm(ctx context.Context, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSmsCodeInSocialRealm", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendSmsCodeInSocialRealm indicates an expected call of SendSmsCodeInSocialRealm.
func (mr *ComponentMockRecorder) SendSmsCodeInSocialRealm(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSmsCodeInSocialRealm", reflect.TypeOf((*Component)(nil).SendSmsCodeInSocialRealm), ctx, userID)
}

// SendSmsConsentCode mocks base method.
func (m *Component) SendSmsConsentCode(ctx context.Context, realmName, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSmsConsentCode", ctx, realmName, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSmsConsentCode indicates an expected call of SendSmsConsentCode.
func (mr *ComponentMockRecorder) SendSmsConsentCode(ctx, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSmsConsentCode", reflect.TypeOf((*Component)(nil).SendSmsConsentCode), ctx, realmName, userID)
}

// SendSmsConsentCodeInSocialRealm mocks base method.
func (m *Component) SendSmsConsentCodeInSocialRealm(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSmsConsentCodeInSocialRealm", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSmsConsentCodeInSocialRealm indicates an expected call of SendSmsConsentCodeInSocialRealm.
func (mr *ComponentMockRecorder) SendSmsConsentCodeInSocialRealm(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSmsConsentCodeInSocialRealm", reflect.TypeOf((*Component)(nil).SendSmsConsentCodeInSocialRealm), ctx, userID)
}

// ValidateUser mocks base method.
func (m *Component) ValidateUser(ctx context.Context, realm, userID string, user apikyc.UserRepresentation, consentCode *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUser", ctx, realm, userID, user, consentCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateUser indicates an expected call of ValidateUser.
func (mr *ComponentMockRecorder) ValidateUser(ctx, realm, userID, user, consentCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUser", reflect.TypeOf((*Component)(nil).ValidateUser), ctx, realm, userID, user, consentCode)
}

// ValidateUserBasicID mocks base method.
func (m *Component) ValidateUserBasicID(ctx context.Context, userID string, user apikyc.UserRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUserBasicID", ctx, userID, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateUserBasicID indicates an expected call of ValidateUserBasicID.
func (mr *ComponentMockRecorder) ValidateUserBasicID(ctx, userID, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUserBasicID", reflect.TypeOf((*Component)(nil).ValidateUserBasicID), ctx, userID, user)
}

// ValidateUserInSocialRealm mocks base method.
func (m *Component) ValidateUserInSocialRealm(ctx context.Context, userID string, user apikyc.UserRepresentation, consentCode *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUserInSocialRealm", ctx, userID, user, consentCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateUserInSocialRealm indicates an expected call of ValidateUserInSocialRealm.
func (mr *ComponentMockRecorder) ValidateUserInSocialRealm(ctx, userID, user, consentCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUserInSocialRealm", reflect.TypeOf((*Component)(nil).ValidateUserInSocialRealm), ctx, userID, user, consentCode)
}

// KeycloakClient is a mock of KeycloakClient interface.
type KeycloakClient struct {
	ctrl     *gomock.Controller
	recorder *KeycloakClientMockRecorder
	isgomock struct{}
}

// KeycloakClientMockRecorder is the mock recorder for KeycloakClient.
type KeycloakClientMockRecorder struct {
	mock *KeycloakClient
}

// NewKeycloakClient creates a new mock instance.
func NewKeycloakClient(ctrl *gomock.Controller) *KeycloakClient {
	mock := &KeycloakClient{ctrl: ctrl}
	mock.recorder = &KeycloakClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *KeycloakClient) EXPECT() *KeycloakClientMockRecorder {
	return m.recorder
}

// CheckConsentCodeSMS mocks base method.
func (m *KeycloakClient) CheckConsentCodeSMS(accessToken, realmName, userID, consentCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckConsentCodeSMS", accessToken, realmName, userID, consentCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckConsentCodeSMS indicates an expected call of CheckConsentCodeSMS.
func (mr *KeycloakClientMockRecorder) CheckConsentCodeSMS(accessToken, realmName, userID, consentCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConsentCodeSMS", reflect.TypeOf((*KeycloakClient)(nil).CheckConsentCodeSMS), accessToken, realmName, userID, consentCode)
}

// GetGroups mocks base method.
func (m *KeycloakClient) GetGroups(accessToken, realmName string) ([]keycloak.GroupRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", accessToken, realmName)
	ret0, _ := ret[0].([]keycloak.GroupRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *KeycloakClientMockRecorder) GetGroups(accessToken, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*KeycloakClient)(nil).GetGroups), accessToken, realmName)
}

// GetGroupsOfUser mocks base method.
func (m *KeycloakClient) GetGroupsOfUser(accessToken, realmName, userID string) ([]keycloak.GroupRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsOfUser", accessToken, realmName, userID)
	ret0, _ := ret[0].([]keycloak.GroupRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupsOfUser indicates an expected call of GetGroupsOfUser.
func (mr *KeycloakClientMockRecorder) GetGroupsOfUser(accessToken, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsOfUser", reflect.TypeOf((*KeycloakClient)(nil).GetGroupsOfUser), accessToken, realmName, userID)
}

// GetUser mocks base method.
func (m *KeycloakClient) GetUser(accessToken, realmName, userID string) (keycloak.UserRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", accessToken, realmName, userID)
	ret0, _ := ret[0].(keycloak.UserRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *KeycloakClientMockRecorder) GetUser(accessToken, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*KeycloakClient)(nil).GetUser), accessToken, realmName, userID)
}

// GetUsers mocks base method.
func (m *KeycloakClient) GetUsers(accessToken, reqRealmName, targetRealmName string, paramKV ...string) (keycloak.UsersPageRepresentation, error) {
	m.ctrl.T.Helper()
	varargs := []any{accessToken, reqRealmName, targetRealmName}
	for _, a := range paramKV {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsers", varargs...)
	ret0, _ := ret[0].(keycloak.UsersPageRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *KeycloakClientMockRecorder) GetUsers(accessToken, reqRealmName, targetRealmName any, paramKV ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{accessToken, reqRealmName, targetRealmName}, paramKV...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*KeycloakClient)(nil).GetUsers), varargs...)
}

// SendConsentCodeSMS mocks base method.
func (m *KeycloakClient) SendConsentCodeSMS(accessToken, realmName, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendConsentCodeSMS", accessToken, realmName, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendConsentCodeSMS indicates an expected call of SendConsentCodeSMS.
func (mr *KeycloakClientMockRecorder) SendConsentCodeSMS(accessToken, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendConsentCodeSMS", reflect.TypeOf((*KeycloakClient)(nil).SendConsentCodeSMS), accessToken, realmName, userID)
}

// SendSmsCode mocks base method.
func (m *KeycloakClient) SendSmsCode(accessToken, realmName, userID string) (keycloak.SmsCodeRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSmsCode", accessToken, realmName, userID)
	ret0, _ := ret[0].(keycloak.SmsCodeRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendSmsCode indicates an expected call of SendSmsCode.
func (mr *KeycloakClientMockRecorder) SendSmsCode(accessToken, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSmsCode", reflect.TypeOf((*KeycloakClient)(nil).SendSmsCode), accessToken, realmName, userID)
}

// UpdateUser mocks base method.
func (m *KeycloakClient) UpdateUser(accessToken, realmName, userID string, user keycloak.UserRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", accessToken, realmName, userID, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *KeycloakClientMockRecorder) UpdateUser(accessToken, realmName, userID, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*KeycloakClient)(nil).UpdateUser), accessToken, realmName, userID, user)
}

// ArchiveDBModule is a mock of ArchiveDBModule interface.
type ArchiveDBModule struct {
	ctrl     *gomock.Controller
	recorder *ArchiveDBModuleMockRecorder
	isgomock struct{}
}

// ArchiveDBModuleMockRecorder is the mock recorder for ArchiveDBModule.
type ArchiveDBModuleMockRecorder struct {
	mock *ArchiveDBModule
}

// NewArchiveDBModule creates a new mock instance.
func NewArchiveDBModule(ctrl *gomock.Controller) *ArchiveDBModule {
	mock := &ArchiveDBModule{ctrl: ctrl}
	mock.recorder = &ArchiveDBModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ArchiveDBModule) EXPECT() *ArchiveDBModuleMockRecorder {
	return m.recorder
}

// StoreUserDetails mocks base method.
func (m *ArchiveDBModule) StoreUserDetails(ctx context.Context, realm string, user dto.ArchiveUserRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreUserDetails", ctx, realm, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreUserDetails indicates an expected call of StoreUserDetails.
func (mr *ArchiveDBModuleMockRecorder) StoreUserDetails(ctx, realm, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreUserDetails", reflect.TypeOf((*ArchiveDBModule)(nil).StoreUserDetails), ctx, realm, user)
}

// ConfigDBModule is a mock of ConfigDBModule interface.
type ConfigDBModule struct {
	ctrl     *gomock.Controller
	recorder *ConfigDBModuleMockRecorder
	isgomock struct{}
}

// ConfigDBModuleMockRecorder is the mock recorder for ConfigDBModule.
type ConfigDBModuleMockRecorder struct {
	mock *ConfigDBModule
}

// NewConfigDBModule creates a new mock instance.
func NewConfigDBModule(ctrl *gomock.Controller) *ConfigDBModule {
	mock := &ConfigDBModule{ctrl: ctrl}
	mock.recorder = &ConfigDBModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ConfigDBModule) EXPECT() *ConfigDBModuleMockRecorder {
	return m.recorder
}

// GetAdminConfiguration mocks base method.
func (m *ConfigDBModule) GetAdminConfiguration(ctx context.Context, realmID string) (configuration.RealmAdminConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminConfiguration", ctx, realmID)
	ret0, _ := ret[0].(configuration.RealmAdminConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminConfiguration indicates an expected call of GetAdminConfiguration.
func (mr *ConfigDBModuleMockRecorder) GetAdminConfiguration(ctx, realmID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminConfiguration", reflect.TypeOf((*ConfigDBModule)(nil).GetAdminConfiguration), ctx, realmID)
}

// UserProfileCache is a mock of UserProfileCache interface.
type UserProfileCache struct {
	ctrl     *gomock.Controller
	recorder *UserProfileCacheMockRecorder
	isgomock struct{}
}

// UserProfileCacheMockRecorder is the mock recorder for UserProfileCache.
type UserProfileCacheMockRecorder struct {
	mock *UserProfileCache
}

// NewUserProfileCache creates a new mock instance.
func NewUserProfileCache(ctrl *gomock.Controller) *UserProfileCache {
	mock := &UserProfileCache{ctrl: ctrl}
	mock.recorder = &UserProfileCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *UserProfileCache) EXPECT() *UserProfileCacheMockRecorder {
	return m.recorder
}

// GetRealmUserProfile mocks base method.
func (m *UserProfileCache) GetRealmUserProfile(ctx context.Context, realmName string) (keycloak.UserProfileRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealmUserProfile", ctx, realmName)
	ret0, _ := ret[0].(keycloak.UserProfileRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealmUserProfile indicates an expected call of GetRealmUserProfile.
func (mr *UserProfileCacheMockRecorder) GetRealmUserProfile(ctx, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealmUserProfile", reflect.TypeOf((*UserProfileCache)(nil).GetRealmUserProfile), ctx, realmName)
}
