// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/common-service/v2/security (interfaces: AuthorizationManager)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/security.go -package=mock -mock_names=AuthorizationManager=AuthorizationManager github.com/cloudtrust/common-service/v2/security AuthorizationManager
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// AuthorizationManager is a mock of AuthorizationManager interface.
type AuthorizationManager struct {
	ctrl     *gomock.Controller
	recorder *AuthorizationManagerMockRecorder
	isgomock struct{}
}

// AuthorizationManagerMockRecorder is the mock recorder for AuthorizationManager.
type AuthorizationManagerMockRecorder struct {
	mock *AuthorizationManager
}

// NewAuthorizationManager creates a new mock instance.
func NewAuthorizationManager(ctrl *gomock.Controller) *AuthorizationManager {
	mock := &AuthorizationManager{ctrl: ctrl}
	mock.recorder = &AuthorizationManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *AuthorizationManager) EXPECT() *AuthorizationManagerMockRecorder {
	return m.recorder
}

// CheckAuthorizationForGroupsOnTargetGroup mocks base method.
func (m *AuthorizationManager) CheckAuthorizationForGroupsOnTargetGroup(realm string, groups []string, action, targetRealm, targetGroup string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuthorizationForGroupsOnTargetGroup", realm, groups, action, targetRealm, targetGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAuthorizationForGroupsOnTargetGroup indicates an expected call of CheckAuthorizationForGroupsOnTargetGroup.
func (mr *AuthorizationManagerMockRecorder) CheckAuthorizationForGroupsOnTargetGroup(realm, groups, action, targetRealm, targetGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuthorizationForGroupsOnTargetGroup", reflect.TypeOf((*AuthorizationManager)(nil).CheckAuthorizationForGroupsOnTargetGroup), realm, groups, action, targetRealm, targetGroup)
}

// CheckAuthorizationForGroupsOnTargetRealm mocks base method.
func (m *AuthorizationManager) CheckAuthorizationForGroupsOnTargetRealm(realm string, groups []string, action, targetRealm string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuthorizationForGroupsOnTargetRealm", realm, groups, action, targetRealm)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAuthorizationForGroupsOnTargetRealm indicates an expected call of CheckAuthorizationForGroupsOnTargetRealm.
func (mr *AuthorizationManagerMockRecorder) CheckAuthorizationForGroupsOnTargetRealm(realm, groups, action, targetRealm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuthorizationForGroupsOnTargetRealm", reflect.TypeOf((*AuthorizationManager)(nil).CheckAuthorizationForGroupsOnTargetRealm), realm, groups, action, targetRealm)
}

// CheckAuthorizationOnSelfUser mocks base method.
func (m *AuthorizationManager) CheckAuthorizationOnSelfUser(ctx context.Context, action string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuthorizationOnSelfUser", ctx, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAuthorizationOnSelfUser indicates an expected call of CheckAuthorizationOnSelfUser.
func (mr *AuthorizationManagerMockRecorder) CheckAuthorizationOnSelfUser(ctx, action any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuthorizationOnSelfUser", reflect.TypeOf((*AuthorizationManager)(nil).CheckAuthorizationOnSelfUser), ctx, action)
}

// CheckAuthorizationOnTargetGroup mocks base method.
func (m *AuthorizationManager) CheckAuthorizationOnTargetGroup(ctx context.Context, action, targetRealm, targetGroup string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuthorizationOnTargetGroup", ctx, action, targetRealm, targetGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAuthorizationOnTargetGroup indicates an expected call of CheckAuthorizationOnTargetGroup.
func (mr *AuthorizationManagerMockRecorder) CheckAuthorizationOnTargetGroup(ctx, action, targetRealm, targetGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuthorizationOnTargetGroup", reflect.TypeOf((*AuthorizationManager)(nil).CheckAuthorizationOnTargetGroup), ctx, action, targetRealm, targetGroup)
}

// CheckAuthorizationOnTargetGroupID mocks base method.
func (m *AuthorizationManager) CheckAuthorizationOnTargetGroupID(ctx context.Context, action, targetRealm, targetGroupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuthorizationOnTargetGroupID", ctx, action, targetRealm, targetGroupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAuthorizationOnTargetGroupID indicates an expected call of CheckAuthorizationOnTargetGroupID.
func (mr *AuthorizationManagerMockRecorder) CheckAuthorizationOnTargetGroupID(ctx, action, targetRealm, targetGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuthorizationOnTargetGroupID", reflect.TypeOf((*AuthorizationManager)(nil).CheckAuthorizationOnTargetGroupID), ctx, action, targetRealm, targetGroupID)
}

// CheckAuthorizationOnTargetRealm mocks base method.
func (m *AuthorizationManager) CheckAuthorizationOnTargetRealm(ctx context.Context, action, targetRealm string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuthorizationOnTargetRealm", ctx, action, targetRealm)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAuthorizationOnTargetRealm indicates an expected call of CheckAuthorizationOnTargetRealm.
func (mr *AuthorizationManagerMockRecorder) CheckAuthorizationOnTargetRealm(ctx, action, targetRealm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuthorizationOnTargetRealm", reflect.TypeOf((*AuthorizationManager)(nil).CheckAuthorizationOnTargetRealm), ctx, action, targetRealm)
}

// CheckAuthorizationOnTargetUser mocks base method.
func (m *AuthorizationManager) CheckAuthorizationOnTargetUser(ctx context.Context, action, targetRealm, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuthorizationOnTargetUser", ctx, action, targetRealm, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAuthorizationOnTargetUser indicates an expected call of CheckAuthorizationOnTargetUser.
func (mr *AuthorizationManagerMockRecorder) CheckAuthorizationOnTargetUser(ctx, action, targetRealm, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuthorizationOnTargetUser", reflect.TypeOf((*AuthorizationManager)(nil).CheckAuthorizationOnTargetUser), ctx, action, targetRealm, userID)
}

// GetRightsOfCurrentUser mocks base method.
func (m *AuthorizationManager) GetRightsOfCurrentUser(ctx context.Context) map[string]map[string]map[string]map[string]struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRightsOfCurrentUser", ctx)
	ret0, _ := ret[0].(map[string]map[string]map[string]map[string]struct{})
	return ret0
}

// GetRightsOfCurrentUser indicates an expected call of GetRightsOfCurrentUser.
func (mr *AuthorizationManagerMockRecorder) GetRightsOfCurrentUser(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRightsOfCurrentUser", reflect.TypeOf((*AuthorizationManager)(nil).GetRightsOfCurrentUser), ctx)
}

// ReloadAuthorizations mocks base method.
func (m *AuthorizationManager) ReloadAuthorizations(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAuthorizations", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAuthorizations indicates an expected call of ReloadAuthorizations.
func (mr *AuthorizationManagerMockRecorder) ReloadAuthorizations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAuthorizations", reflect.TypeOf((*AuthorizationManager)(nil).ReloadAuthorizations), ctx)
}
