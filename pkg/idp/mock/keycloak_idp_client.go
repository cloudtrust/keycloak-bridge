// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-bridge/pkg/idp (interfaces: KeycloakIdpClient,Component)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/keycloak_idp_client.go -package=mock -mock_names=KeycloakIdpClient=KeycloakIdpClient,Component=Component github.com/cloudtrust/keycloak-bridge/pkg/idp KeycloakIdpClient,Component
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	apiidp "github.com/cloudtrust/keycloak-bridge/api/idp"
	keycloak "github.com/cloudtrust/keycloak-client/v2"
	gomock "go.uber.org/mock/gomock"
)

// KeycloakIdpClient is a mock of KeycloakIdpClient interface.
type KeycloakIdpClient struct {
	ctrl     *gomock.Controller
	recorder *KeycloakIdpClientMockRecorder
	isgomock struct{}
}

// KeycloakIdpClientMockRecorder is the mock recorder for KeycloakIdpClient.
type KeycloakIdpClientMockRecorder struct {
	mock *KeycloakIdpClient
}

// NewKeycloakIdpClient creates a new mock instance.
func NewKeycloakIdpClient(ctrl *gomock.Controller) *KeycloakIdpClient {
	mock := &KeycloakIdpClient{ctrl: ctrl}
	mock.recorder = &KeycloakIdpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *KeycloakIdpClient) EXPECT() *KeycloakIdpClientMockRecorder {
	return m.recorder
}

// CreateIdp mocks base method.
func (m *KeycloakIdpClient) CreateIdp(accessToken, realmName string, idpRep keycloak.IdentityProviderRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdp", accessToken, realmName, idpRep)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIdp indicates an expected call of CreateIdp.
func (mr *KeycloakIdpClientMockRecorder) CreateIdp(accessToken, realmName, idpRep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdp", reflect.TypeOf((*KeycloakIdpClient)(nil).CreateIdp), accessToken, realmName, idpRep)
}

// DeleteIdp mocks base method.
func (m *KeycloakIdpClient) DeleteIdp(accessToken, realmName, idpAlias string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIdp", accessToken, realmName, idpAlias)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIdp indicates an expected call of DeleteIdp.
func (mr *KeycloakIdpClientMockRecorder) DeleteIdp(accessToken, realmName, idpAlias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdp", reflect.TypeOf((*KeycloakIdpClient)(nil).DeleteIdp), accessToken, realmName, idpAlias)
}

// GetIdp mocks base method.
func (m *KeycloakIdpClient) GetIdp(accessToken, realmName, idpAlias string) (keycloak.IdentityProviderRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdp", accessToken, realmName, idpAlias)
	ret0, _ := ret[0].(keycloak.IdentityProviderRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdp indicates an expected call of GetIdp.
func (mr *KeycloakIdpClientMockRecorder) GetIdp(accessToken, realmName, idpAlias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdp", reflect.TypeOf((*KeycloakIdpClient)(nil).GetIdp), accessToken, realmName, idpAlias)
}

// UpdateIdp mocks base method.
func (m *KeycloakIdpClient) UpdateIdp(accessToken, realmName, idpAlias string, idpRep keycloak.IdentityProviderRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdp", accessToken, realmName, idpAlias, idpRep)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIdp indicates an expected call of UpdateIdp.
func (mr *KeycloakIdpClientMockRecorder) UpdateIdp(accessToken, realmName, idpAlias, idpRep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdp", reflect.TypeOf((*KeycloakIdpClient)(nil).UpdateIdp), accessToken, realmName, idpAlias, idpRep)
}

// Component is a mock of Component interface.
type Component struct {
	ctrl     *gomock.Controller
	recorder *ComponentMockRecorder
	isgomock struct{}
}

// ComponentMockRecorder is the mock recorder for Component.
type ComponentMockRecorder struct {
	mock *Component
}

// NewComponent creates a new mock instance.
func NewComponent(ctrl *gomock.Controller) *Component {
	mock := &Component{ctrl: ctrl}
	mock.recorder = &ComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Component) EXPECT() *ComponentMockRecorder {
	return m.recorder
}

// CreateIdentityProvider mocks base method.
func (m *Component) CreateIdentityProvider(ctx context.Context, realmName string, provider apiidp.IdentityProviderRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdentityProvider", ctx, realmName, provider)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIdentityProvider indicates an expected call of CreateIdentityProvider.
func (mr *ComponentMockRecorder) CreateIdentityProvider(ctx, realmName, provider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentityProvider", reflect.TypeOf((*Component)(nil).CreateIdentityProvider), ctx, realmName, provider)
}

// DeleteIdentityProvider mocks base method.
func (m *Component) DeleteIdentityProvider(ctx context.Context, realmName, providerAlias string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIdentityProvider", ctx, realmName, providerAlias)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIdentityProvider indicates an expected call of DeleteIdentityProvider.
func (mr *ComponentMockRecorder) DeleteIdentityProvider(ctx, realmName, providerAlias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdentityProvider", reflect.TypeOf((*Component)(nil).DeleteIdentityProvider), ctx, realmName, providerAlias)
}

// GetIdentityProvider mocks base method.
func (m *Component) GetIdentityProvider(ctx context.Context, realmName, providerAlias string) (apiidp.IdentityProviderRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityProvider", ctx, realmName, providerAlias)
	ret0, _ := ret[0].(apiidp.IdentityProviderRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityProvider indicates an expected call of GetIdentityProvider.
func (mr *ComponentMockRecorder) GetIdentityProvider(ctx, realmName, providerAlias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityProvider", reflect.TypeOf((*Component)(nil).GetIdentityProvider), ctx, realmName, providerAlias)
}

// UpdateIdentityProvider mocks base method.
func (m *Component) UpdateIdentityProvider(ctx context.Context, realmName, providerAlias string, provider apiidp.IdentityProviderRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdentityProvider", ctx, realmName, providerAlias, provider)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIdentityProvider indicates an expected call of UpdateIdentityProvider.
func (mr *ComponentMockRecorder) UpdateIdentityProvider(ctx, realmName, providerAlias, provider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentityProvider", reflect.TypeOf((*Component)(nil).UpdateIdentityProvider), ctx, realmName, providerAlias, provider)
}
