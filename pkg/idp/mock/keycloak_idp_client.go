// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-bridge/pkg/idp (interfaces: KeycloakIdpClient,Component)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/keycloak_idp_client.go -package=mock -mock_names=KeycloakIdpClient=KeycloakIdpClient,Component=Component github.com/cloudtrust/keycloak-bridge/pkg/idp KeycloakIdpClient,Component
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	apiidp "github.com/cloudtrust/keycloak-bridge/api/idp"
	keycloak "github.com/cloudtrust/keycloak-client/v2"
	gomock "go.uber.org/mock/gomock"
)

// KeycloakIdpClient is a mock of KeycloakIdpClient interface.
type KeycloakIdpClient struct {
	ctrl     *gomock.Controller
	recorder *KeycloakIdpClientMockRecorder
	isgomock struct{}
}

// KeycloakIdpClientMockRecorder is the mock recorder for KeycloakIdpClient.
type KeycloakIdpClientMockRecorder struct {
	mock *KeycloakIdpClient
}

// NewKeycloakIdpClient creates a new mock instance.
func NewKeycloakIdpClient(ctrl *gomock.Controller) *KeycloakIdpClient {
	mock := &KeycloakIdpClient{ctrl: ctrl}
	mock.recorder = &KeycloakIdpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *KeycloakIdpClient) EXPECT() *KeycloakIdpClientMockRecorder {
	return m.recorder
}

// CreateComponent mocks base method.
func (m *KeycloakIdpClient) CreateComponent(accessToken, realmName string, comp keycloak.ComponentRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComponent", accessToken, realmName, comp)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComponent indicates an expected call of CreateComponent.
func (mr *KeycloakIdpClientMockRecorder) CreateComponent(accessToken, realmName, comp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComponent", reflect.TypeOf((*KeycloakIdpClient)(nil).CreateComponent), accessToken, realmName, comp)
}

// CreateIdp mocks base method.
func (m *KeycloakIdpClient) CreateIdp(accessToken, realmName string, idpRep keycloak.IdentityProviderRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdp", accessToken, realmName, idpRep)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIdp indicates an expected call of CreateIdp.
func (mr *KeycloakIdpClientMockRecorder) CreateIdp(accessToken, realmName, idpRep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdp", reflect.TypeOf((*KeycloakIdpClient)(nil).CreateIdp), accessToken, realmName, idpRep)
}

// CreateIdpMapper mocks base method.
func (m *KeycloakIdpClient) CreateIdpMapper(accessToken, realmName, idpAlias string, mapperRep keycloak.IdentityProviderMapperRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdpMapper", accessToken, realmName, idpAlias, mapperRep)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIdpMapper indicates an expected call of CreateIdpMapper.
func (mr *KeycloakIdpClientMockRecorder) CreateIdpMapper(accessToken, realmName, idpAlias, mapperRep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdpMapper", reflect.TypeOf((*KeycloakIdpClient)(nil).CreateIdpMapper), accessToken, realmName, idpAlias, mapperRep)
}

// DeleteIdp mocks base method.
func (m *KeycloakIdpClient) DeleteIdp(accessToken, realmName, idpAlias string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIdp", accessToken, realmName, idpAlias)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIdp indicates an expected call of DeleteIdp.
func (mr *KeycloakIdpClientMockRecorder) DeleteIdp(accessToken, realmName, idpAlias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdp", reflect.TypeOf((*KeycloakIdpClient)(nil).DeleteIdp), accessToken, realmName, idpAlias)
}

// DeleteIdpMapper mocks base method.
func (m *KeycloakIdpClient) DeleteIdpMapper(accessToken, realmName, idpAlias, mapperID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIdpMapper", accessToken, realmName, idpAlias, mapperID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIdpMapper indicates an expected call of DeleteIdpMapper.
func (mr *KeycloakIdpClientMockRecorder) DeleteIdpMapper(accessToken, realmName, idpAlias, mapperID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdpMapper", reflect.TypeOf((*KeycloakIdpClient)(nil).DeleteIdpMapper), accessToken, realmName, idpAlias, mapperID)
}

// GetComponents mocks base method.
func (m *KeycloakIdpClient) GetComponents(accessToken, realmName string, paramKV ...string) ([]keycloak.ComponentRepresentation, error) {
	m.ctrl.T.Helper()
	varargs := []any{accessToken, realmName}
	for _, a := range paramKV {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetComponents", varargs...)
	ret0, _ := ret[0].([]keycloak.ComponentRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponents indicates an expected call of GetComponents.
func (mr *KeycloakIdpClientMockRecorder) GetComponents(accessToken, realmName any, paramKV ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{accessToken, realmName}, paramKV...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponents", reflect.TypeOf((*KeycloakIdpClient)(nil).GetComponents), varargs...)
}

// GetIdp mocks base method.
func (m *KeycloakIdpClient) GetIdp(accessToken, realmName, idpAlias string) (keycloak.IdentityProviderRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdp", accessToken, realmName, idpAlias)
	ret0, _ := ret[0].(keycloak.IdentityProviderRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdp indicates an expected call of GetIdp.
func (mr *KeycloakIdpClientMockRecorder) GetIdp(accessToken, realmName, idpAlias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdp", reflect.TypeOf((*KeycloakIdpClient)(nil).GetIdp), accessToken, realmName, idpAlias)
}

// GetIdpMappers mocks base method.
func (m *KeycloakIdpClient) GetIdpMappers(accessToken, realmName, idpAlias string) ([]keycloak.IdentityProviderMapperRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdpMappers", accessToken, realmName, idpAlias)
	ret0, _ := ret[0].([]keycloak.IdentityProviderMapperRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdpMappers indicates an expected call of GetIdpMappers.
func (mr *KeycloakIdpClientMockRecorder) GetIdpMappers(accessToken, realmName, idpAlias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdpMappers", reflect.TypeOf((*KeycloakIdpClient)(nil).GetIdpMappers), accessToken, realmName, idpAlias)
}

// UpdateComponent mocks base method.
func (m *KeycloakIdpClient) UpdateComponent(accessToken, realmName, compID string, comp keycloak.ComponentRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComponent", accessToken, realmName, compID, comp)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComponent indicates an expected call of UpdateComponent.
func (mr *KeycloakIdpClientMockRecorder) UpdateComponent(accessToken, realmName, compID, comp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComponent", reflect.TypeOf((*KeycloakIdpClient)(nil).UpdateComponent), accessToken, realmName, compID, comp)
}

// UpdateIdp mocks base method.
func (m *KeycloakIdpClient) UpdateIdp(accessToken, realmName, idpAlias string, idpRep keycloak.IdentityProviderRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdp", accessToken, realmName, idpAlias, idpRep)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIdp indicates an expected call of UpdateIdp.
func (mr *KeycloakIdpClientMockRecorder) UpdateIdp(accessToken, realmName, idpAlias, idpRep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdp", reflect.TypeOf((*KeycloakIdpClient)(nil).UpdateIdp), accessToken, realmName, idpAlias, idpRep)
}

// UpdateIdpMapper mocks base method.
func (m *KeycloakIdpClient) UpdateIdpMapper(accessToken, realmName, idpAlias, mapperID string, mapperRep keycloak.IdentityProviderMapperRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdpMapper", accessToken, realmName, idpAlias, mapperID, mapperRep)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIdpMapper indicates an expected call of UpdateIdpMapper.
func (mr *KeycloakIdpClientMockRecorder) UpdateIdpMapper(accessToken, realmName, idpAlias, mapperID, mapperRep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdpMapper", reflect.TypeOf((*KeycloakIdpClient)(nil).UpdateIdpMapper), accessToken, realmName, idpAlias, mapperID, mapperRep)
}

// Component is a mock of Component interface.
type Component struct {
	ctrl     *gomock.Controller
	recorder *ComponentMockRecorder
	isgomock struct{}
}

// ComponentMockRecorder is the mock recorder for Component.
type ComponentMockRecorder struct {
	mock *Component
}

// NewComponent creates a new mock instance.
func NewComponent(ctrl *gomock.Controller) *Component {
	mock := &Component{ctrl: ctrl}
	mock.recorder = &ComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Component) EXPECT() *ComponentMockRecorder {
	return m.recorder
}

// CreateIdentityProvider mocks base method.
func (m *Component) CreateIdentityProvider(ctx context.Context, realmName string, provider apiidp.IdentityProviderRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdentityProvider", ctx, realmName, provider)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIdentityProvider indicates an expected call of CreateIdentityProvider.
func (mr *ComponentMockRecorder) CreateIdentityProvider(ctx, realmName, provider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentityProvider", reflect.TypeOf((*Component)(nil).CreateIdentityProvider), ctx, realmName, provider)
}

// CreateIdentityProviderMapper mocks base method.
func (m *Component) CreateIdentityProviderMapper(ctx context.Context, realmName, idpAlias string, mapperRep apiidp.IdentityProviderMapperRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdentityProviderMapper", ctx, realmName, idpAlias, mapperRep)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIdentityProviderMapper indicates an expected call of CreateIdentityProviderMapper.
func (mr *ComponentMockRecorder) CreateIdentityProviderMapper(ctx, realmName, idpAlias, mapperRep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentityProviderMapper", reflect.TypeOf((*Component)(nil).CreateIdentityProviderMapper), ctx, realmName, idpAlias, mapperRep)
}

// DeleteIdentityProvider mocks base method.
func (m *Component) DeleteIdentityProvider(ctx context.Context, realmName, providerAlias string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIdentityProvider", ctx, realmName, providerAlias)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIdentityProvider indicates an expected call of DeleteIdentityProvider.
func (mr *ComponentMockRecorder) DeleteIdentityProvider(ctx, realmName, providerAlias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdentityProvider", reflect.TypeOf((*Component)(nil).DeleteIdentityProvider), ctx, realmName, providerAlias)
}

// DeleteIdentityProviderMapper mocks base method.
func (m *Component) DeleteIdentityProviderMapper(ctx context.Context, realmName, idpAlias, mapperID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIdentityProviderMapper", ctx, realmName, idpAlias, mapperID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIdentityProviderMapper indicates an expected call of DeleteIdentityProviderMapper.
func (mr *ComponentMockRecorder) DeleteIdentityProviderMapper(ctx, realmName, idpAlias, mapperID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdentityProviderMapper", reflect.TypeOf((*Component)(nil).DeleteIdentityProviderMapper), ctx, realmName, idpAlias, mapperID)
}

// GetIdentityProvider mocks base method.
func (m *Component) GetIdentityProvider(ctx context.Context, realmName, providerAlias string) (apiidp.IdentityProviderRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityProvider", ctx, realmName, providerAlias)
	ret0, _ := ret[0].(apiidp.IdentityProviderRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityProvider indicates an expected call of GetIdentityProvider.
func (mr *ComponentMockRecorder) GetIdentityProvider(ctx, realmName, providerAlias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityProvider", reflect.TypeOf((*Component)(nil).GetIdentityProvider), ctx, realmName, providerAlias)
}

// GetIdentityProviderMappers mocks base method.
func (m *Component) GetIdentityProviderMappers(ctx context.Context, realmName, idpAlias string) ([]apiidp.IdentityProviderMapperRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityProviderMappers", ctx, realmName, idpAlias)
	ret0, _ := ret[0].([]apiidp.IdentityProviderMapperRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityProviderMappers indicates an expected call of GetIdentityProviderMappers.
func (mr *ComponentMockRecorder) GetIdentityProviderMappers(ctx, realmName, idpAlias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityProviderMappers", reflect.TypeOf((*Component)(nil).GetIdentityProviderMappers), ctx, realmName, idpAlias)
}

// UpdateIdentityProvider mocks base method.
func (m *Component) UpdateIdentityProvider(ctx context.Context, realmName, providerAlias string, provider apiidp.IdentityProviderRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdentityProvider", ctx, realmName, providerAlias, provider)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIdentityProvider indicates an expected call of UpdateIdentityProvider.
func (mr *ComponentMockRecorder) UpdateIdentityProvider(ctx, realmName, providerAlias, provider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentityProvider", reflect.TypeOf((*Component)(nil).UpdateIdentityProvider), ctx, realmName, providerAlias, provider)
}

// UpdateIdentityProviderMapper mocks base method.
func (m *Component) UpdateIdentityProviderMapper(ctx context.Context, realmName, idpAlias, mapperID string, mapperRep apiidp.IdentityProviderMapperRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdentityProviderMapper", ctx, realmName, idpAlias, mapperID, mapperRep)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIdentityProviderMapper indicates an expected call of UpdateIdentityProviderMapper.
func (mr *ComponentMockRecorder) UpdateIdentityProviderMapper(ctx, realmName, idpAlias, mapperID, mapperRep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentityProviderMapper", reflect.TypeOf((*Component)(nil).UpdateIdentityProviderMapper), ctx, realmName, idpAlias, mapperID, mapperRep)
}
