// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-bridge/pkg/account (interfaces: KeycloakAccountClient,KeycloakTechnicalClient)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/account_keycloak_client.go -package=mock -mock_names=KeycloakAccountClient=KeycloakAccountClient,KeycloakTechnicalClient=KeycloakTechnicalClient github.com/cloudtrust/keycloak-bridge/pkg/account KeycloakAccountClient,KeycloakTechnicalClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	keycloak "github.com/cloudtrust/keycloak-client/v2"
	gomock "go.uber.org/mock/gomock"
)

// KeycloakAccountClient is a mock of KeycloakAccountClient interface.
type KeycloakAccountClient struct {
	ctrl     *gomock.Controller
	recorder *KeycloakAccountClientMockRecorder
	isgomock struct{}
}

// KeycloakAccountClientMockRecorder is the mock recorder for KeycloakAccountClient.
type KeycloakAccountClientMockRecorder struct {
	mock *KeycloakAccountClient
}

// NewKeycloakAccountClient creates a new mock instance.
func NewKeycloakAccountClient(ctrl *gomock.Controller) *KeycloakAccountClient {
	mock := &KeycloakAccountClient{ctrl: ctrl}
	mock.recorder = &KeycloakAccountClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *KeycloakAccountClient) EXPECT() *KeycloakAccountClientMockRecorder {
	return m.recorder
}

// DeleteAccount mocks base method.
func (m *KeycloakAccountClient) DeleteAccount(accessToken, realm string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", accessToken, realm)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *KeycloakAccountClientMockRecorder) DeleteAccount(accessToken, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*KeycloakAccountClient)(nil).DeleteAccount), accessToken, realm)
}

// DeleteCredential mocks base method.
func (m *KeycloakAccountClient) DeleteCredential(accessToken, realmName, credentialID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCredential", accessToken, realmName, credentialID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCredential indicates an expected call of DeleteCredential.
func (mr *KeycloakAccountClientMockRecorder) DeleteCredential(accessToken, realmName, credentialID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredential", reflect.TypeOf((*KeycloakAccountClient)(nil).DeleteCredential), accessToken, realmName, credentialID)
}

// DeleteLinkedAccount mocks base method.
func (m *KeycloakAccountClient) DeleteLinkedAccount(accessToken, realmName, providerAlias string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLinkedAccount", accessToken, realmName, providerAlias)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLinkedAccount indicates an expected call of DeleteLinkedAccount.
func (mr *KeycloakAccountClientMockRecorder) DeleteLinkedAccount(accessToken, realmName, providerAlias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLinkedAccount", reflect.TypeOf((*KeycloakAccountClient)(nil).DeleteLinkedAccount), accessToken, realmName, providerAlias)
}

// ExecuteActionsEmail mocks base method.
func (m *KeycloakAccountClient) ExecuteActionsEmail(accessToken, realmName string, actions []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteActionsEmail", accessToken, realmName, actions)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteActionsEmail indicates an expected call of ExecuteActionsEmail.
func (mr *KeycloakAccountClientMockRecorder) ExecuteActionsEmail(accessToken, realmName, actions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteActionsEmail", reflect.TypeOf((*KeycloakAccountClient)(nil).ExecuteActionsEmail), accessToken, realmName, actions)
}

// GetAccount mocks base method.
func (m *KeycloakAccountClient) GetAccount(accessToken, realm string) (keycloak.UserRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", accessToken, realm)
	ret0, _ := ret[0].(keycloak.UserRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *KeycloakAccountClientMockRecorder) GetAccount(accessToken, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*KeycloakAccountClient)(nil).GetAccount), accessToken, realm)
}

// GetCredentialRegistrators mocks base method.
func (m *KeycloakAccountClient) GetCredentialRegistrators(accessToken, realmName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialRegistrators", accessToken, realmName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialRegistrators indicates an expected call of GetCredentialRegistrators.
func (mr *KeycloakAccountClientMockRecorder) GetCredentialRegistrators(accessToken, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialRegistrators", reflect.TypeOf((*KeycloakAccountClient)(nil).GetCredentialRegistrators), accessToken, realmName)
}

// GetCredentials mocks base method.
func (m *KeycloakAccountClient) GetCredentials(accessToken, realmName string) ([]keycloak.CredentialRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentials", accessToken, realmName)
	ret0, _ := ret[0].([]keycloak.CredentialRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *KeycloakAccountClientMockRecorder) GetCredentials(accessToken, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*KeycloakAccountClient)(nil).GetCredentials), accessToken, realmName)
}

// GetLinkedAccounts mocks base method.
func (m *KeycloakAccountClient) GetLinkedAccounts(accessToken, realmName string) ([]keycloak.LinkedAccountRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkedAccounts", accessToken, realmName)
	ret0, _ := ret[0].([]keycloak.LinkedAccountRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkedAccounts indicates an expected call of GetLinkedAccounts.
func (mr *KeycloakAccountClientMockRecorder) GetLinkedAccounts(accessToken, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkedAccounts", reflect.TypeOf((*KeycloakAccountClient)(nil).GetLinkedAccounts), accessToken, realmName)
}

// MoveAfter mocks base method.
func (m *KeycloakAccountClient) MoveAfter(accessToken, realmName, credentialID, previousCredentialID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveAfter", accessToken, realmName, credentialID, previousCredentialID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveAfter indicates an expected call of MoveAfter.
func (mr *KeycloakAccountClientMockRecorder) MoveAfter(accessToken, realmName, credentialID, previousCredentialID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveAfter", reflect.TypeOf((*KeycloakAccountClient)(nil).MoveAfter), accessToken, realmName, credentialID, previousCredentialID)
}

// MoveToFirst mocks base method.
func (m *KeycloakAccountClient) MoveToFirst(accessToken, realmName, credentialID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveToFirst", accessToken, realmName, credentialID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveToFirst indicates an expected call of MoveToFirst.
func (mr *KeycloakAccountClientMockRecorder) MoveToFirst(accessToken, realmName, credentialID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveToFirst", reflect.TypeOf((*KeycloakAccountClient)(nil).MoveToFirst), accessToken, realmName, credentialID)
}

// SendEmail mocks base method.
func (m *KeycloakAccountClient) SendEmail(accessToken, realmName, template, subject string, recipient *string, attributes map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", accessToken, realmName, template, subject, recipient, attributes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *KeycloakAccountClientMockRecorder) SendEmail(accessToken, realmName, template, subject, recipient, attributes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*KeycloakAccountClient)(nil).SendEmail), accessToken, realmName, template, subject, recipient, attributes)
}

// UpdateAccount mocks base method.
func (m *KeycloakAccountClient) UpdateAccount(accessToken, realm string, user keycloak.UserRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", accessToken, realm, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *KeycloakAccountClientMockRecorder) UpdateAccount(accessToken, realm, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*KeycloakAccountClient)(nil).UpdateAccount), accessToken, realm, user)
}

// UpdateLabelCredential mocks base method.
func (m *KeycloakAccountClient) UpdateLabelCredential(accessToken, realmName, credentialID, label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLabelCredential", accessToken, realmName, credentialID, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLabelCredential indicates an expected call of UpdateLabelCredential.
func (mr *KeycloakAccountClientMockRecorder) UpdateLabelCredential(accessToken, realmName, credentialID, label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLabelCredential", reflect.TypeOf((*KeycloakAccountClient)(nil).UpdateLabelCredential), accessToken, realmName, credentialID, label)
}

// UpdatePassword mocks base method.
func (m *KeycloakAccountClient) UpdatePassword(accessToken, realm, currentPassword, newPassword, confirmPassword string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", accessToken, realm, currentPassword, newPassword, confirmPassword)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *KeycloakAccountClientMockRecorder) UpdatePassword(accessToken, realm, currentPassword, newPassword, confirmPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*KeycloakAccountClient)(nil).UpdatePassword), accessToken, realm, currentPassword, newPassword, confirmPassword)
}

// KeycloakTechnicalClient is a mock of KeycloakTechnicalClient interface.
type KeycloakTechnicalClient struct {
	ctrl     *gomock.Controller
	recorder *KeycloakTechnicalClientMockRecorder
	isgomock struct{}
}

// KeycloakTechnicalClientMockRecorder is the mock recorder for KeycloakTechnicalClient.
type KeycloakTechnicalClientMockRecorder struct {
	mock *KeycloakTechnicalClient
}

// NewKeycloakTechnicalClient creates a new mock instance.
func NewKeycloakTechnicalClient(ctrl *gomock.Controller) *KeycloakTechnicalClient {
	mock := &KeycloakTechnicalClient{ctrl: ctrl}
	mock.recorder = &KeycloakTechnicalClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *KeycloakTechnicalClient) EXPECT() *KeycloakTechnicalClientMockRecorder {
	return m.recorder
}

// GetRealm mocks base method.
func (m *KeycloakTechnicalClient) GetRealm(ctx context.Context, realmName string) (keycloak.RealmRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealm", ctx, realmName)
	ret0, _ := ret[0].(keycloak.RealmRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealm indicates an expected call of GetRealm.
func (mr *KeycloakTechnicalClientMockRecorder) GetRealm(ctx, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealm", reflect.TypeOf((*KeycloakTechnicalClient)(nil).GetRealm), ctx, realmName)
}

// GetUsers mocks base method.
func (m *KeycloakTechnicalClient) GetUsers(ctx context.Context, targetRealmName string, paramKV ...string) (keycloak.UsersPageRepresentation, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, targetRealmName}
	for _, a := range paramKV {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsers", varargs...)
	ret0, _ := ret[0].(keycloak.UsersPageRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *KeycloakTechnicalClientMockRecorder) GetUsers(ctx, targetRealmName any, paramKV ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, targetRealmName}, paramKV...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*KeycloakTechnicalClient)(nil).GetUsers), varargs...)
}

// LogoutAllSessions mocks base method.
func (m *KeycloakTechnicalClient) LogoutAllSessions(ctx context.Context, realmName, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutAllSessions", ctx, realmName, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutAllSessions indicates an expected call of LogoutAllSessions.
func (mr *KeycloakTechnicalClientMockRecorder) LogoutAllSessions(ctx, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutAllSessions", reflect.TypeOf((*KeycloakTechnicalClient)(nil).LogoutAllSessions), ctx, realmName, userID)
}
