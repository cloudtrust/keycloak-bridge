// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-bridge/internal/keycloakb/accreditationsclient (interfaces: AccreditationsServiceClient)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/accreditation.go -package=mock -mock_names=AccreditationsServiceClient=AccreditationsServiceClient github.com/cloudtrust/keycloak-bridge/internal/keycloakb/accreditationsclient AccreditationsServiceClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	accreditationsclient "github.com/cloudtrust/keycloak-bridge/internal/keycloakb/accreditationsclient"
	gomock "go.uber.org/mock/gomock"
)

// AccreditationsServiceClient is a mock of AccreditationsServiceClient interface.
type AccreditationsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *AccreditationsServiceClientMockRecorder
	isgomock struct{}
}

// AccreditationsServiceClientMockRecorder is the mock recorder for AccreditationsServiceClient.
type AccreditationsServiceClientMockRecorder struct {
	mock *AccreditationsServiceClient
}

// NewAccreditationsServiceClient creates a new mock instance.
func NewAccreditationsServiceClient(ctrl *gomock.Controller) *AccreditationsServiceClient {
	mock := &AccreditationsServiceClient{ctrl: ctrl}
	mock.recorder = &AccreditationsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *AccreditationsServiceClient) EXPECT() *AccreditationsServiceClientMockRecorder {
	return m.recorder
}

// GetChecks mocks base method.
func (m *AccreditationsServiceClient) GetChecks(ctx context.Context, realm, userID string) ([]accreditationsclient.CheckRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChecks", ctx, realm, userID)
	ret0, _ := ret[0].([]accreditationsclient.CheckRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChecks indicates an expected call of GetChecks.
func (mr *AccreditationsServiceClientMockRecorder) GetChecks(ctx, realm, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChecks", reflect.TypeOf((*AccreditationsServiceClient)(nil).GetChecks), ctx, realm, userID)
}

// GetIdentityChecksByNature mocks base method.
func (m *AccreditationsServiceClient) GetIdentityChecksByNature(ctx context.Context, realm string) ([]accreditationsclient.NatureCheckCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityChecksByNature", ctx, realm)
	ret0, _ := ret[0].([]accreditationsclient.NatureCheckCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityChecksByNature indicates an expected call of GetIdentityChecksByNature.
func (mr *AccreditationsServiceClientMockRecorder) GetIdentityChecksByNature(ctx, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityChecksByNature", reflect.TypeOf((*AccreditationsServiceClient)(nil).GetIdentityChecksByNature), ctx, realm)
}

// GetPendingChecks mocks base method.
func (m *AccreditationsServiceClient) GetPendingChecks(ctx context.Context, realm, userID string) ([]accreditationsclient.CheckRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingChecks", ctx, realm, userID)
	ret0, _ := ret[0].([]accreditationsclient.CheckRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingChecks indicates an expected call of GetPendingChecks.
func (mr *AccreditationsServiceClientMockRecorder) GetPendingChecks(ctx, realm, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingChecks", reflect.TypeOf((*AccreditationsServiceClient)(nil).GetPendingChecks), ctx, realm, userID)
}

// NotifyCheck mocks base method.
func (m *AccreditationsServiceClient) NotifyCheck(ctx context.Context, check accreditationsclient.CheckRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyCheck", ctx, check)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyCheck indicates an expected call of NotifyCheck.
func (mr *AccreditationsServiceClientMockRecorder) NotifyCheck(ctx, check any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyCheck", reflect.TypeOf((*AccreditationsServiceClient)(nil).NotifyCheck), ctx, check)
}

// NotifyUpdate mocks base method.
func (m *AccreditationsServiceClient) NotifyUpdate(ctx context.Context, updateNotifyRequest accreditationsclient.UpdateNotificationRepresentation) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyUpdate", ctx, updateNotifyRequest)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyUpdate indicates an expected call of NotifyUpdate.
func (mr *AccreditationsServiceClientMockRecorder) NotifyUpdate(ctx, updateNotifyRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyUpdate", reflect.TypeOf((*AccreditationsServiceClient)(nil).NotifyUpdate), ctx, updateNotifyRequest)
}
