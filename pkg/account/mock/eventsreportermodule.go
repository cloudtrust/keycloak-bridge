// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/common-service/v2/events (interfaces: AuditEventsReporterModule)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/eventsreportermodule.go -package=mock -mock_names=AuditEventsReporterModule=AuditEventsReporterModule github.com/cloudtrust/common-service/v2/events AuditEventsReporterModule
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	events "github.com/cloudtrust/common-service/v2/events"
	gomock "go.uber.org/mock/gomock"
)

// AuditEventsReporterModule is a mock of AuditEventsReporterModule interface.
type AuditEventsReporterModule struct {
	ctrl     *gomock.Controller
	recorder *AuditEventsReporterModuleMockRecorder
	isgomock struct{}
}

// AuditEventsReporterModuleMockRecorder is the mock recorder for AuditEventsReporterModule.
type AuditEventsReporterModuleMockRecorder struct {
	mock *AuditEventsReporterModule
}

// NewAuditEventsReporterModule creates a new mock instance.
func NewAuditEventsReporterModule(ctrl *gomock.Controller) *AuditEventsReporterModule {
	mock := &AuditEventsReporterModule{ctrl: ctrl}
	mock.recorder = &AuditEventsReporterModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *AuditEventsReporterModule) EXPECT() *AuditEventsReporterModuleMockRecorder {
	return m.recorder
}

// ReportEvent mocks base method.
func (m *AuditEventsReporterModule) ReportEvent(ctx context.Context, event events.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportEvent", ctx, event)
}

// ReportEvent indicates an expected call of ReportEvent.
func (mr *AuditEventsReporterModuleMockRecorder) ReportEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportEvent", reflect.TypeOf((*AuditEventsReporterModule)(nil).ReportEvent), ctx, event)
}
