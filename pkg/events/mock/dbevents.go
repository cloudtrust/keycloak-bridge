// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-bridge/pkg/events (interfaces: DBEvents)

// Package mock is a generated GoMock package.
package mock

import (
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// DBEvents is a mock of DBEvents interface
type DBEvents struct {
	ctrl     *gomock.Controller
	recorder *DBEventsMockRecorder
}

// DBEventsMockRecorder is the mock recorder for DBEvents
type DBEventsMockRecorder struct {
	mock *DBEvents
}

// NewDBEvents creates a new mock instance
func NewDBEvents(ctrl *gomock.Controller) *DBEvents {
	mock := &DBEvents{ctrl: ctrl}
	mock.recorder = &DBEventsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *DBEvents) EXPECT() *DBEventsMockRecorder {
	return m.recorder
}

// Query mocks base method
func (m *DBEvents) Query(arg0 string, arg1 ...interface{}) (*sql.Rows, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *DBEventsMockRecorder) Query(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*DBEvents)(nil).Query), varargs...)
}

// QueryRow mocks base method
func (m *DBEvents) QueryRow(arg0 string, arg1 ...interface{}) *sql.Row {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow
func (mr *DBEventsMockRecorder) QueryRow(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*DBEvents)(nil).QueryRow), varargs...)
}
