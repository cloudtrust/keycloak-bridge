// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-bridge/pkg/support (interfaces: Component,KeycloakClient)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/component.go -package=mock -mock_names=Component=Component,KeycloakClient=KeycloakClient github.com/cloudtrust/keycloak-bridge/pkg/support Component,KeycloakClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	apisupport "github.com/cloudtrust/keycloak-bridge/api/support"
	keycloak "github.com/cloudtrust/keycloak-client/v2"
	gomock "go.uber.org/mock/gomock"
)

// Component is a mock of Component interface.
type Component struct {
	ctrl     *gomock.Controller
	recorder *ComponentMockRecorder
	isgomock struct{}
}

// ComponentMockRecorder is the mock recorder for Component.
type ComponentMockRecorder struct {
	mock *Component
}

// NewComponent creates a new mock instance.
func NewComponent(ctrl *gomock.Controller) *Component {
	mock := &Component{ctrl: ctrl}
	mock.recorder = &ComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Component) EXPECT() *ComponentMockRecorder {
	return m.recorder
}

// GetSupportInformation mocks base method.
func (m *Component) GetSupportInformation(ctx context.Context, email string) ([]apisupport.EmailInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportInformation", ctx, email)
	ret0, _ := ret[0].([]apisupport.EmailInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportInformation indicates an expected call of GetSupportInformation.
func (mr *ComponentMockRecorder) GetSupportInformation(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportInformation", reflect.TypeOf((*Component)(nil).GetSupportInformation), ctx, email)
}

// KeycloakClient is a mock of KeycloakClient interface.
type KeycloakClient struct {
	ctrl     *gomock.Controller
	recorder *KeycloakClientMockRecorder
	isgomock struct{}
}

// KeycloakClientMockRecorder is the mock recorder for KeycloakClient.
type KeycloakClientMockRecorder struct {
	mock *KeycloakClient
}

// NewKeycloakClient creates a new mock instance.
func NewKeycloakClient(ctrl *gomock.Controller) *KeycloakClient {
	mock := &KeycloakClient{ctrl: ctrl}
	mock.recorder = &KeycloakClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *KeycloakClient) EXPECT() *KeycloakClientMockRecorder {
	return m.recorder
}

// GetSupportInfo mocks base method.
func (m *KeycloakClient) GetSupportInfo(accessToken, email string) ([]keycloak.EmailInfoRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportInfo", accessToken, email)
	ret0, _ := ret[0].([]keycloak.EmailInfoRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportInfo indicates an expected call of GetSupportInfo.
func (mr *KeycloakClientMockRecorder) GetSupportInfo(accessToken, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportInfo", reflect.TypeOf((*KeycloakClient)(nil).GetSupportInfo), accessToken, email)
}
