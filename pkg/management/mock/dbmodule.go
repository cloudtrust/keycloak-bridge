// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-bridge/internal/keycloakb (interfaces: ConfigurationDBModule)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/dbmodule.go -package=mock -mock_names=ConfigurationDBModule=ConfigurationDBModule github.com/cloudtrust/keycloak-bridge/internal/keycloakb ConfigurationDBModule
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	configuration "github.com/cloudtrust/common-service/v2/configuration"
	sqltypes "github.com/cloudtrust/common-service/v2/database/sqltypes"
	dto "github.com/cloudtrust/keycloak-bridge/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// ConfigurationDBModule is a mock of ConfigurationDBModule interface.
type ConfigurationDBModule struct {
	ctrl     *gomock.Controller
	recorder *ConfigurationDBModuleMockRecorder
	isgomock struct{}
}

// ConfigurationDBModuleMockRecorder is the mock recorder for ConfigurationDBModule.
type ConfigurationDBModuleMockRecorder struct {
	mock *ConfigurationDBModule
}

// NewConfigurationDBModule creates a new mock instance.
func NewConfigurationDBModule(ctrl *gomock.Controller) *ConfigurationDBModule {
	mock := &ConfigurationDBModule{ctrl: ctrl}
	mock.recorder = &ConfigurationDBModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ConfigurationDBModule) EXPECT() *ConfigurationDBModuleMockRecorder {
	return m.recorder
}

// AuthorizationExists mocks base method.
func (m *ConfigurationDBModule) AuthorizationExists(context context.Context, realmID, groupName, targetRealm string, targetGroupName *string, actionReq string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizationExists", context, realmID, groupName, targetRealm, targetGroupName, actionReq)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorizationExists indicates an expected call of AuthorizationExists.
func (mr *ConfigurationDBModuleMockRecorder) AuthorizationExists(context, realmID, groupName, targetRealm, targetGroupName, actionReq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizationExists", reflect.TypeOf((*ConfigurationDBModule)(nil).AuthorizationExists), context, realmID, groupName, targetRealm, targetGroupName, actionReq)
}

// CleanAuthorizationsActionForEveryRealms mocks base method.
func (m *ConfigurationDBModule) CleanAuthorizationsActionForEveryRealms(context context.Context, realmID, groupName, actionReq string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanAuthorizationsActionForEveryRealms", context, realmID, groupName, actionReq)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanAuthorizationsActionForEveryRealms indicates an expected call of CleanAuthorizationsActionForEveryRealms.
func (mr *ConfigurationDBModuleMockRecorder) CleanAuthorizationsActionForEveryRealms(context, realmID, groupName, actionReq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanAuthorizationsActionForEveryRealms", reflect.TypeOf((*ConfigurationDBModule)(nil).CleanAuthorizationsActionForEveryRealms), context, realmID, groupName, actionReq)
}

// CleanAuthorizationsActionForRealm mocks base method.
func (m *ConfigurationDBModule) CleanAuthorizationsActionForRealm(context context.Context, realmID, groupName, targetRealm, actionReq string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanAuthorizationsActionForRealm", context, realmID, groupName, targetRealm, actionReq)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanAuthorizationsActionForRealm indicates an expected call of CleanAuthorizationsActionForRealm.
func (mr *ConfigurationDBModuleMockRecorder) CleanAuthorizationsActionForRealm(context, realmID, groupName, targetRealm, actionReq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanAuthorizationsActionForRealm", reflect.TypeOf((*ConfigurationDBModule)(nil).CleanAuthorizationsActionForRealm), context, realmID, groupName, targetRealm, actionReq)
}

// CreateAuthorization mocks base method.
func (m *ConfigurationDBModule) CreateAuthorization(context context.Context, authz configuration.Authorization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthorization", context, authz)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAuthorization indicates an expected call of CreateAuthorization.
func (mr *ConfigurationDBModuleMockRecorder) CreateAuthorization(context, authz any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthorization", reflect.TypeOf((*ConfigurationDBModule)(nil).CreateAuthorization), context, authz)
}

// DeleteAllAuthorizationsWithGroup mocks base method.
func (m *ConfigurationDBModule) DeleteAllAuthorizationsWithGroup(context context.Context, realmName, groupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllAuthorizationsWithGroup", context, realmName, groupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllAuthorizationsWithGroup indicates an expected call of DeleteAllAuthorizationsWithGroup.
func (mr *ConfigurationDBModuleMockRecorder) DeleteAllAuthorizationsWithGroup(context, realmName, groupName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllAuthorizationsWithGroup", reflect.TypeOf((*ConfigurationDBModule)(nil).DeleteAllAuthorizationsWithGroup), context, realmName, groupName)
}

// DeleteAuthorization mocks base method.
func (m *ConfigurationDBModule) DeleteAuthorization(context context.Context, realmID, groupName, targetRealm string, targetGroupName *string, actionReq string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthorization", context, realmID, groupName, targetRealm, targetGroupName, actionReq)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthorization indicates an expected call of DeleteAuthorization.
func (mr *ConfigurationDBModuleMockRecorder) DeleteAuthorization(context, realmID, groupName, targetRealm, targetGroupName, actionReq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthorization", reflect.TypeOf((*ConfigurationDBModule)(nil).DeleteAuthorization), context, realmID, groupName, targetRealm, targetGroupName, actionReq)
}

// DeleteBackOfficeConfiguration mocks base method.
func (m *ConfigurationDBModule) DeleteBackOfficeConfiguration(arg0 context.Context, arg1, arg2, arg3 string, arg4, arg5 *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackOfficeConfiguration", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBackOfficeConfiguration indicates an expected call of DeleteBackOfficeConfiguration.
func (mr *ConfigurationDBModuleMockRecorder) DeleteBackOfficeConfiguration(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackOfficeConfiguration", reflect.TypeOf((*ConfigurationDBModule)(nil).DeleteBackOfficeConfiguration), arg0, arg1, arg2, arg3, arg4, arg5)
}

// DeleteContextKeyConfiguration mocks base method.
func (m *ConfigurationDBModule) DeleteContextKeyConfiguration(ctx context.Context, tx sqltypes.Transaction, customerRealm, ID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContextKeyConfiguration", ctx, tx, customerRealm, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContextKeyConfiguration indicates an expected call of DeleteContextKeyConfiguration.
func (mr *ConfigurationDBModuleMockRecorder) DeleteContextKeyConfiguration(ctx, tx, customerRealm, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContextKeyConfiguration", reflect.TypeOf((*ConfigurationDBModule)(nil).DeleteContextKeyConfiguration), ctx, tx, customerRealm, ID)
}

// GetAdminConfiguration mocks base method.
func (m *ConfigurationDBModule) GetAdminConfiguration(arg0 context.Context, arg1 string) (configuration.RealmAdminConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminConfiguration", arg0, arg1)
	ret0, _ := ret[0].(configuration.RealmAdminConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminConfiguration indicates an expected call of GetAdminConfiguration.
func (mr *ConfigurationDBModuleMockRecorder) GetAdminConfiguration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminConfiguration", reflect.TypeOf((*ConfigurationDBModule)(nil).GetAdminConfiguration), arg0, arg1)
}

// GetAllContextKeyID mocks base method.
func (m *ConfigurationDBModule) GetAllContextKeyID(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllContextKeyID", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllContextKeyID indicates an expected call of GetAllContextKeyID.
func (mr *ConfigurationDBModuleMockRecorder) GetAllContextKeyID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllContextKeyID", reflect.TypeOf((*ConfigurationDBModule)(nil).GetAllContextKeyID), ctx)
}

// GetAuthorizations mocks base method.
func (m *ConfigurationDBModule) GetAuthorizations(context context.Context, realmID, groupName string) ([]configuration.Authorization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizations", context, realmID, groupName)
	ret0, _ := ret[0].([]configuration.Authorization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizations indicates an expected call of GetAuthorizations.
func (mr *ConfigurationDBModuleMockRecorder) GetAuthorizations(context, realmID, groupName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizations", reflect.TypeOf((*ConfigurationDBModule)(nil).GetAuthorizations), context, realmID, groupName)
}

// GetBackOfficeConfiguration mocks base method.
func (m *ConfigurationDBModule) GetBackOfficeConfiguration(arg0 context.Context, arg1 string, arg2 []string) (dto.BackOfficeConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackOfficeConfiguration", arg0, arg1, arg2)
	ret0, _ := ret[0].(dto.BackOfficeConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackOfficeConfiguration indicates an expected call of GetBackOfficeConfiguration.
func (mr *ConfigurationDBModuleMockRecorder) GetBackOfficeConfiguration(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackOfficeConfiguration", reflect.TypeOf((*ConfigurationDBModule)(nil).GetBackOfficeConfiguration), arg0, arg1, arg2)
}

// GetConfiguration mocks base method.
func (m *ConfigurationDBModule) GetConfiguration(arg0 context.Context, arg1 string) (configuration.RealmConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguration", arg0, arg1)
	ret0, _ := ret[0].(configuration.RealmConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguration indicates an expected call of GetConfiguration.
func (mr *ConfigurationDBModuleMockRecorder) GetConfiguration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguration", reflect.TypeOf((*ConfigurationDBModule)(nil).GetConfiguration), arg0, arg1)
}

// GetConfigurations mocks base method.
func (m *ConfigurationDBModule) GetConfigurations(arg0 context.Context, arg1 string) (configuration.RealmConfiguration, configuration.RealmAdminConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigurations", arg0, arg1)
	ret0, _ := ret[0].(configuration.RealmConfiguration)
	ret1, _ := ret[1].(configuration.RealmAdminConfiguration)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetConfigurations indicates an expected call of GetConfigurations.
func (mr *ConfigurationDBModuleMockRecorder) GetConfigurations(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurations", reflect.TypeOf((*ConfigurationDBModule)(nil).GetConfigurations), arg0, arg1)
}

// GetContextKeysForCustomerRealm mocks base method.
func (m *ConfigurationDBModule) GetContextKeysForCustomerRealm(ctx context.Context, customerRealm string) ([]configuration.RealmContextKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContextKeysForCustomerRealm", ctx, customerRealm)
	ret0, _ := ret[0].([]configuration.RealmContextKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContextKeysForCustomerRealm indicates an expected call of GetContextKeysForCustomerRealm.
func (mr *ConfigurationDBModuleMockRecorder) GetContextKeysForCustomerRealm(ctx, customerRealm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContextKeysForCustomerRealm", reflect.TypeOf((*ConfigurationDBModule)(nil).GetContextKeysForCustomerRealm), ctx, customerRealm)
}

// GetDefaultContextKeyConfiguration mocks base method.
func (m *ConfigurationDBModule) GetDefaultContextKeyConfiguration(ctx context.Context, customerRealm string) (configuration.RealmContextKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultContextKeyConfiguration", ctx, customerRealm)
	ret0, _ := ret[0].(configuration.RealmContextKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultContextKeyConfiguration indicates an expected call of GetDefaultContextKeyConfiguration.
func (mr *ConfigurationDBModuleMockRecorder) GetDefaultContextKeyConfiguration(ctx, customerRealm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultContextKeyConfiguration", reflect.TypeOf((*ConfigurationDBModule)(nil).GetDefaultContextKeyConfiguration), ctx, customerRealm)
}

// GetThemeConfiguration mocks base method.
func (m *ConfigurationDBModule) GetThemeConfiguration(ctx context.Context, realmName string) (configuration.ThemeConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThemeConfiguration", ctx, realmName)
	ret0, _ := ret[0].(configuration.ThemeConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThemeConfiguration indicates an expected call of GetThemeConfiguration.
func (mr *ConfigurationDBModuleMockRecorder) GetThemeConfiguration(ctx, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThemeConfiguration", reflect.TypeOf((*ConfigurationDBModule)(nil).GetThemeConfiguration), ctx, realmName)
}

// GetThemeTranslation mocks base method.
func (m *ConfigurationDBModule) GetThemeTranslation(ctx context.Context, realmName, language string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThemeTranslation", ctx, realmName, language)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThemeTranslation indicates an expected call of GetThemeTranslation.
func (mr *ConfigurationDBModuleMockRecorder) GetThemeTranslation(ctx, realmName, language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThemeTranslation", reflect.TypeOf((*ConfigurationDBModule)(nil).GetThemeTranslation), ctx, realmName, language)
}

// InsertBackOfficeConfiguration mocks base method.
func (m *ConfigurationDBModule) InsertBackOfficeConfiguration(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBackOfficeConfiguration", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBackOfficeConfiguration indicates an expected call of InsertBackOfficeConfiguration.
func (mr *ConfigurationDBModuleMockRecorder) InsertBackOfficeConfiguration(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBackOfficeConfiguration", reflect.TypeOf((*ConfigurationDBModule)(nil).InsertBackOfficeConfiguration), arg0, arg1, arg2, arg3, arg4, arg5)
}

// NewTransaction mocks base method.
func (m *ConfigurationDBModule) NewTransaction(context context.Context) (sqltypes.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransaction", context)
	ret0, _ := ret[0].(sqltypes.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTransaction indicates an expected call of NewTransaction.
func (mr *ConfigurationDBModuleMockRecorder) NewTransaction(context any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransaction", reflect.TypeOf((*ConfigurationDBModule)(nil).NewTransaction), context)
}

// StoreContextKeyConfiguration mocks base method.
func (m *ConfigurationDBModule) StoreContextKeyConfiguration(ctx context.Context, tx sqltypes.Transaction, contextKeys configuration.RealmContextKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreContextKeyConfiguration", ctx, tx, contextKeys)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreContextKeyConfiguration indicates an expected call of StoreContextKeyConfiguration.
func (mr *ConfigurationDBModuleMockRecorder) StoreContextKeyConfiguration(ctx, tx, contextKeys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreContextKeyConfiguration", reflect.TypeOf((*ConfigurationDBModule)(nil).StoreContextKeyConfiguration), ctx, tx, contextKeys)
}

// StoreOrUpdateAdminConfiguration mocks base method.
func (m *ConfigurationDBModule) StoreOrUpdateAdminConfiguration(arg0 context.Context, arg1 string, arg2 configuration.RealmAdminConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreOrUpdateAdminConfiguration", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreOrUpdateAdminConfiguration indicates an expected call of StoreOrUpdateAdminConfiguration.
func (mr *ConfigurationDBModuleMockRecorder) StoreOrUpdateAdminConfiguration(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreOrUpdateAdminConfiguration", reflect.TypeOf((*ConfigurationDBModule)(nil).StoreOrUpdateAdminConfiguration), arg0, arg1, arg2)
}

// StoreOrUpdateConfiguration mocks base method.
func (m *ConfigurationDBModule) StoreOrUpdateConfiguration(arg0 context.Context, arg1 string, arg2 configuration.RealmConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreOrUpdateConfiguration", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreOrUpdateConfiguration indicates an expected call of StoreOrUpdateConfiguration.
func (mr *ConfigurationDBModuleMockRecorder) StoreOrUpdateConfiguration(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreOrUpdateConfiguration", reflect.TypeOf((*ConfigurationDBModule)(nil).StoreOrUpdateConfiguration), arg0, arg1, arg2)
}

// UpdateThemeConfiguration mocks base method.
func (m *ConfigurationDBModule) UpdateThemeConfiguration(ctx context.Context, themeConfig configuration.ThemeConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThemeConfiguration", ctx, themeConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateThemeConfiguration indicates an expected call of UpdateThemeConfiguration.
func (mr *ConfigurationDBModuleMockRecorder) UpdateThemeConfiguration(ctx, themeConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThemeConfiguration", reflect.TypeOf((*ConfigurationDBModule)(nil).UpdateThemeConfiguration), ctx, themeConfig)
}
