// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-bridge/pkg/management (interfaces: DBConfiguration)

// Package mock is a generated GoMock package.
package mock

import (
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// DBConfiguration is a mock of DBConfiguration interface
type DBConfiguration struct {
	ctrl     *gomock.Controller
	recorder *DBConfigurationMockRecorder
}

// DBConfigurationMockRecorder is the mock recorder for DBConfiguration
type DBConfigurationMockRecorder struct {
	mock *DBConfiguration
}

// NewDBConfiguration creates a new mock instance
func NewDBConfiguration(ctrl *gomock.Controller) *DBConfiguration {
	mock := &DBConfiguration{ctrl: ctrl}
	mock.recorder = &DBConfigurationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *DBConfiguration) EXPECT() *DBConfigurationMockRecorder {
	return m.recorder
}

// Exec mocks base method
func (m *DBConfiguration) Exec(arg0 string, arg1 ...interface{}) (sql.Result, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *DBConfigurationMockRecorder) Exec(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*DBConfiguration)(nil).Exec), varargs...)
}

// QueryRow mocks base method
func (m *DBConfiguration) QueryRow(arg0 string, arg1 ...interface{}) *sql.Row {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow
func (mr *DBConfigurationMockRecorder) QueryRow(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*DBConfiguration)(nil).QueryRow), varargs...)
}
