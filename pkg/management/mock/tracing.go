// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/opentracing/opentracing-go (interfaces: Tracer,Span,SpanContext)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	opentracing_go "github.com/opentracing/opentracing-go"
	log "github.com/opentracing/opentracing-go/log"
	reflect "reflect"
)

// Tracer is a mock of Tracer interface
type Tracer struct {
	ctrl     *gomock.Controller
	recorder *TracerMockRecorder
}

// TracerMockRecorder is the mock recorder for Tracer
type TracerMockRecorder struct {
	mock *Tracer
}

// NewTracer creates a new mock instance
func NewTracer(ctrl *gomock.Controller) *Tracer {
	mock := &Tracer{ctrl: ctrl}
	mock.recorder = &TracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Tracer) EXPECT() *TracerMockRecorder {
	return m.recorder
}

// Extract mocks base method
func (m *Tracer) Extract(arg0, arg1 interface{}) (opentracing_go.SpanContext, error) {
	ret := m.ctrl.Call(m, "Extract", arg0, arg1)
	ret0, _ := ret[0].(opentracing_go.SpanContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Extract indicates an expected call of Extract
func (mr *TracerMockRecorder) Extract(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extract", reflect.TypeOf((*Tracer)(nil).Extract), arg0, arg1)
}

// Inject mocks base method
func (m *Tracer) Inject(arg0 opentracing_go.SpanContext, arg1, arg2 interface{}) error {
	ret := m.ctrl.Call(m, "Inject", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Inject indicates an expected call of Inject
func (mr *TracerMockRecorder) Inject(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inject", reflect.TypeOf((*Tracer)(nil).Inject), arg0, arg1, arg2)
}

// StartSpan mocks base method
func (m *Tracer) StartSpan(arg0 string, arg1 ...opentracing_go.StartSpanOption) opentracing_go.Span {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSpan", varargs...)
	ret0, _ := ret[0].(opentracing_go.Span)
	return ret0
}

// StartSpan indicates an expected call of StartSpan
func (mr *TracerMockRecorder) StartSpan(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSpan", reflect.TypeOf((*Tracer)(nil).StartSpan), varargs...)
}

// Span is a mock of Span interface
type Span struct {
	ctrl     *gomock.Controller
	recorder *SpanMockRecorder
}

// SpanMockRecorder is the mock recorder for Span
type SpanMockRecorder struct {
	mock *Span
}

// NewSpan creates a new mock instance
func NewSpan(ctrl *gomock.Controller) *Span {
	mock := &Span{ctrl: ctrl}
	mock.recorder = &SpanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Span) EXPECT() *SpanMockRecorder {
	return m.recorder
}

// BaggageItem mocks base method
func (m *Span) BaggageItem(arg0 string) string {
	ret := m.ctrl.Call(m, "BaggageItem", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// BaggageItem indicates an expected call of BaggageItem
func (mr *SpanMockRecorder) BaggageItem(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaggageItem", reflect.TypeOf((*Span)(nil).BaggageItem), arg0)
}

// Context mocks base method
func (m *Span) Context() opentracing_go.SpanContext {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(opentracing_go.SpanContext)
	return ret0
}

// Context indicates an expected call of Context
func (mr *SpanMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*Span)(nil).Context))
}

// Finish mocks base method
func (m *Span) Finish() {
	m.ctrl.Call(m, "Finish")
}

// Finish indicates an expected call of Finish
func (mr *SpanMockRecorder) Finish() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*Span)(nil).Finish))
}

// FinishWithOptions mocks base method
func (m *Span) FinishWithOptions(arg0 opentracing_go.FinishOptions) {
	m.ctrl.Call(m, "FinishWithOptions", arg0)
}

// FinishWithOptions indicates an expected call of FinishWithOptions
func (mr *SpanMockRecorder) FinishWithOptions(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishWithOptions", reflect.TypeOf((*Span)(nil).FinishWithOptions), arg0)
}

// Log mocks base method
func (m *Span) Log(arg0 opentracing_go.LogData) {
	m.ctrl.Call(m, "Log", arg0)
}

// Log indicates an expected call of Log
func (mr *SpanMockRecorder) Log(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*Span)(nil).Log), arg0)
}

// LogEvent mocks base method
func (m *Span) LogEvent(arg0 string) {
	m.ctrl.Call(m, "LogEvent", arg0)
}

// LogEvent indicates an expected call of LogEvent
func (mr *SpanMockRecorder) LogEvent(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogEvent", reflect.TypeOf((*Span)(nil).LogEvent), arg0)
}

// LogEventWithPayload mocks base method
func (m *Span) LogEventWithPayload(arg0 string, arg1 interface{}) {
	m.ctrl.Call(m, "LogEventWithPayload", arg0, arg1)
}

// LogEventWithPayload indicates an expected call of LogEventWithPayload
func (mr *SpanMockRecorder) LogEventWithPayload(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogEventWithPayload", reflect.TypeOf((*Span)(nil).LogEventWithPayload), arg0, arg1)
}

// LogFields mocks base method
func (m *Span) LogFields(arg0 ...log.Field) {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "LogFields", varargs...)
}

// LogFields indicates an expected call of LogFields
func (mr *SpanMockRecorder) LogFields(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogFields", reflect.TypeOf((*Span)(nil).LogFields), arg0...)
}

// LogKV mocks base method
func (m *Span) LogKV(arg0 ...interface{}) {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "LogKV", varargs...)
}

// LogKV indicates an expected call of LogKV
func (mr *SpanMockRecorder) LogKV(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogKV", reflect.TypeOf((*Span)(nil).LogKV), arg0...)
}

// SetBaggageItem mocks base method
func (m *Span) SetBaggageItem(arg0, arg1 string) opentracing_go.Span {
	ret := m.ctrl.Call(m, "SetBaggageItem", arg0, arg1)
	ret0, _ := ret[0].(opentracing_go.Span)
	return ret0
}

// SetBaggageItem indicates an expected call of SetBaggageItem
func (mr *SpanMockRecorder) SetBaggageItem(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBaggageItem", reflect.TypeOf((*Span)(nil).SetBaggageItem), arg0, arg1)
}

// SetOperationName mocks base method
func (m *Span) SetOperationName(arg0 string) opentracing_go.Span {
	ret := m.ctrl.Call(m, "SetOperationName", arg0)
	ret0, _ := ret[0].(opentracing_go.Span)
	return ret0
}

// SetOperationName indicates an expected call of SetOperationName
func (mr *SpanMockRecorder) SetOperationName(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOperationName", reflect.TypeOf((*Span)(nil).SetOperationName), arg0)
}

// SetTag mocks base method
func (m *Span) SetTag(arg0 string, arg1 interface{}) opentracing_go.Span {
	ret := m.ctrl.Call(m, "SetTag", arg0, arg1)
	ret0, _ := ret[0].(opentracing_go.Span)
	return ret0
}

// SetTag indicates an expected call of SetTag
func (mr *SpanMockRecorder) SetTag(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTag", reflect.TypeOf((*Span)(nil).SetTag), arg0, arg1)
}

// Tracer mocks base method
func (m *Span) Tracer() opentracing_go.Tracer {
	ret := m.ctrl.Call(m, "Tracer")
	ret0, _ := ret[0].(opentracing_go.Tracer)
	return ret0
}

// Tracer indicates an expected call of Tracer
func (mr *SpanMockRecorder) Tracer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tracer", reflect.TypeOf((*Span)(nil).Tracer))
}

// SpanContext is a mock of SpanContext interface
type SpanContext struct {
	ctrl     *gomock.Controller
	recorder *SpanContextMockRecorder
}

// SpanContextMockRecorder is the mock recorder for SpanContext
type SpanContextMockRecorder struct {
	mock *SpanContext
}

// NewSpanContext creates a new mock instance
func NewSpanContext(ctrl *gomock.Controller) *SpanContext {
	mock := &SpanContext{ctrl: ctrl}
	mock.recorder = &SpanContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *SpanContext) EXPECT() *SpanContextMockRecorder {
	return m.recorder
}

// ForeachBaggageItem mocks base method
func (m *SpanContext) ForeachBaggageItem(arg0 func(string, string) bool) {
	m.ctrl.Call(m, "ForeachBaggageItem", arg0)
}

// ForeachBaggageItem indicates an expected call of ForeachBaggageItem
func (mr *SpanContextMockRecorder) ForeachBaggageItem(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForeachBaggageItem", reflect.TypeOf((*SpanContext)(nil).ForeachBaggageItem), arg0)
}
