// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/common-service/v2/tracing (interfaces: OpentracingClient,Finisher)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/tracing.go -package=mock -mock_names=OpentracingClient=OpentracingClient,Finisher=Finisher github.com/cloudtrust/common-service/v2/tracing OpentracingClient,Finisher
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	http "net/http"
	reflect "reflect"

	commonservice "github.com/cloudtrust/common-service/v2"
	tracing "github.com/cloudtrust/common-service/v2/tracing"
	gomock "go.uber.org/mock/gomock"
)

// OpentracingClient is a mock of OpentracingClient interface.
type OpentracingClient struct {
	ctrl     *gomock.Controller
	recorder *OpentracingClientMockRecorder
	isgomock struct{}
}

// OpentracingClientMockRecorder is the mock recorder for OpentracingClient.
type OpentracingClientMockRecorder struct {
	mock *OpentracingClient
}

// NewOpentracingClient creates a new mock instance.
func NewOpentracingClient(ctrl *gomock.Controller) *OpentracingClient {
	mock := &OpentracingClient{ctrl: ctrl}
	mock.recorder = &OpentracingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *OpentracingClient) EXPECT() *OpentracingClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *OpentracingClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *OpentracingClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*OpentracingClient)(nil).Close))
}

// MakeEndpointTracingMW mocks base method.
func (m *OpentracingClient) MakeEndpointTracingMW(operationName string) commonservice.Middleware {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeEndpointTracingMW", operationName)
	ret0, _ := ret[0].(commonservice.Middleware)
	return ret0
}

// MakeEndpointTracingMW indicates an expected call of MakeEndpointTracingMW.
func (mr *OpentracingClientMockRecorder) MakeEndpointTracingMW(operationName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeEndpointTracingMW", reflect.TypeOf((*OpentracingClient)(nil).MakeEndpointTracingMW), operationName)
}

// MakeHTTPTracingMW mocks base method.
func (m *OpentracingClient) MakeHTTPTracingMW(componentName, operationName string) func(http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeHTTPTracingMW", componentName, operationName)
	ret0, _ := ret[0].(func(http.Handler) http.Handler)
	return ret0
}

// MakeHTTPTracingMW indicates an expected call of MakeHTTPTracingMW.
func (mr *OpentracingClientMockRecorder) MakeHTTPTracingMW(componentName, operationName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeHTTPTracingMW", reflect.TypeOf((*OpentracingClient)(nil).MakeHTTPTracingMW), componentName, operationName)
}

// TryStartSpanWithTag mocks base method.
func (m *OpentracingClient) TryStartSpanWithTag(ctx context.Context, operationName, tagName, tagValue string) (context.Context, tracing.Finisher) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryStartSpanWithTag", ctx, operationName, tagName, tagValue)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(tracing.Finisher)
	return ret0, ret1
}

// TryStartSpanWithTag indicates an expected call of TryStartSpanWithTag.
func (mr *OpentracingClientMockRecorder) TryStartSpanWithTag(ctx, operationName, tagName, tagValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryStartSpanWithTag", reflect.TypeOf((*OpentracingClient)(nil).TryStartSpanWithTag), ctx, operationName, tagName, tagValue)
}

// Finisher is a mock of Finisher interface.
type Finisher struct {
	ctrl     *gomock.Controller
	recorder *FinisherMockRecorder
	isgomock struct{}
}

// FinisherMockRecorder is the mock recorder for Finisher.
type FinisherMockRecorder struct {
	mock *Finisher
}

// NewFinisher creates a new mock instance.
func NewFinisher(ctrl *gomock.Controller) *Finisher {
	mock := &Finisher{ctrl: ctrl}
	mock.recorder = &FinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Finisher) EXPECT() *FinisherMockRecorder {
	return m.recorder
}

// Finish mocks base method.
func (m *Finisher) Finish() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finish")
}

// Finish indicates an expected call of Finish.
func (mr *FinisherMockRecorder) Finish() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*Finisher)(nil).Finish))
}
