// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-bridge/pkg/management (interfaces: Component,KeycloakClient,OnboardingModule,UserProfileCache)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/management.go -package=mock -mock_names=Component=ManagementComponent,KeycloakClient=KeycloakClient,OnboardingModule=OnboardingModule,UserProfileCache=UserProfileCache github.com/cloudtrust/keycloak-bridge/pkg/management Component,KeycloakClient,OnboardingModule,UserProfileCache
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	configuration "github.com/cloudtrust/common-service/v2/configuration"
	apicommon "github.com/cloudtrust/keycloak-bridge/api/common"
	apimanagement "github.com/cloudtrust/keycloak-bridge/api/management"
	keycloak "github.com/cloudtrust/keycloak-client/v2"
	gomock "go.uber.org/mock/gomock"
)

// ManagementComponent is a mock of Component interface.
type ManagementComponent struct {
	ctrl     *gomock.Controller
	recorder *ManagementComponentMockRecorder
	isgomock struct{}
}

// ManagementComponentMockRecorder is the mock recorder for ManagementComponent.
type ManagementComponentMockRecorder struct {
	mock *ManagementComponent
}

// NewManagementComponent creates a new mock instance.
func NewManagementComponent(ctrl *gomock.Controller) *ManagementComponent {
	mock := &ManagementComponent{ctrl: ctrl}
	mock.recorder = &ManagementComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ManagementComponent) EXPECT() *ManagementComponentMockRecorder {
	return m.recorder
}

// AddAuthorization mocks base method.
func (m *ManagementComponent) AddAuthorization(ctx context.Context, realmName, groupID string, group apimanagement.AuthorizationsRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAuthorization", ctx, realmName, groupID, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAuthorization indicates an expected call of AddAuthorization.
func (mr *ManagementComponentMockRecorder) AddAuthorization(ctx, realmName, groupID, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAuthorization", reflect.TypeOf((*ManagementComponent)(nil).AddAuthorization), ctx, realmName, groupID, group)
}

// AddClientRolesToUser mocks base method.
func (m *ManagementComponent) AddClientRolesToUser(ctx context.Context, realmName, userID, clientID string, roles []apimanagement.RoleRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClientRolesToUser", ctx, realmName, userID, clientID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClientRolesToUser indicates an expected call of AddClientRolesToUser.
func (mr *ManagementComponentMockRecorder) AddClientRolesToUser(ctx, realmName, userID, clientID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClientRolesToUser", reflect.TypeOf((*ManagementComponent)(nil).AddClientRolesToUser), ctx, realmName, userID, clientID, roles)
}

// AddGroupToUser mocks base method.
func (m *ManagementComponent) AddGroupToUser(ctx context.Context, realmName, userID, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGroupToUser", ctx, realmName, userID, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGroupToUser indicates an expected call of AddGroupToUser.
func (mr *ManagementComponentMockRecorder) AddGroupToUser(ctx, realmName, userID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroupToUser", reflect.TypeOf((*ManagementComponent)(nil).AddGroupToUser), ctx, realmName, userID, groupID)
}

// AddRoleToUser mocks base method.
func (m *ManagementComponent) AddRoleToUser(ctx context.Context, realmName, userID, roleID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoleToUser", ctx, realmName, userID, roleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRoleToUser indicates an expected call of AddRoleToUser.
func (mr *ManagementComponentMockRecorder) AddRoleToUser(ctx, realmName, userID, roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoleToUser", reflect.TypeOf((*ManagementComponent)(nil).AddRoleToUser), ctx, realmName, userID, roleID)
}

// ClearUserLoginFailures mocks base method.
func (m *ManagementComponent) ClearUserLoginFailures(ctx context.Context, realmName, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearUserLoginFailures", ctx, realmName, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearUserLoginFailures indicates an expected call of ClearUserLoginFailures.
func (mr *ManagementComponentMockRecorder) ClearUserLoginFailures(ctx, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearUserLoginFailures", reflect.TypeOf((*ManagementComponent)(nil).ClearUserLoginFailures), ctx, realmName, userID)
}

// CreateActivationCode mocks base method.
func (m *ManagementComponent) CreateActivationCode(ctx context.Context, realmName, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActivationCode", ctx, realmName, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActivationCode indicates an expected call of CreateActivationCode.
func (mr *ManagementComponentMockRecorder) CreateActivationCode(ctx, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActivationCode", reflect.TypeOf((*ManagementComponent)(nil).CreateActivationCode), ctx, realmName, userID)
}

// CreateClientRole mocks base method.
func (m *ManagementComponent) CreateClientRole(ctx context.Context, realmName, clientID string, role apimanagement.RoleRepresentation) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientRole", ctx, realmName, clientID, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClientRole indicates an expected call of CreateClientRole.
func (mr *ManagementComponentMockRecorder) CreateClientRole(ctx, realmName, clientID, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientRole", reflect.TypeOf((*ManagementComponent)(nil).CreateClientRole), ctx, realmName, clientID, role)
}

// CreateGroup mocks base method.
func (m *ManagementComponent) CreateGroup(ctx context.Context, realmName string, group apimanagement.GroupRepresentation) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", ctx, realmName, group)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *ManagementComponentMockRecorder) CreateGroup(ctx, realmName, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*ManagementComponent)(nil).CreateGroup), ctx, realmName, group)
}

// CreateRecoveryCode mocks base method.
func (m *ManagementComponent) CreateRecoveryCode(ctx context.Context, realmName, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecoveryCode", ctx, realmName, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecoveryCode indicates an expected call of CreateRecoveryCode.
func (mr *ManagementComponentMockRecorder) CreateRecoveryCode(ctx, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecoveryCode", reflect.TypeOf((*ManagementComponent)(nil).CreateRecoveryCode), ctx, realmName, userID)
}

// CreateRole mocks base method.
func (m *ManagementComponent) CreateRole(ctx context.Context, realmName string, role apimanagement.RoleRepresentation) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, realmName, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *ManagementComponentMockRecorder) CreateRole(ctx, realmName, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*ManagementComponent)(nil).CreateRole), ctx, realmName, role)
}

// CreateUser mocks base method.
func (m *ManagementComponent) CreateUser(ctx context.Context, realmName string, user apimanagement.UserRepresentation, generateUsername, generateNameID, termsOfUse bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, realmName, user, generateUsername, generateNameID, termsOfUse)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *ManagementComponentMockRecorder) CreateUser(ctx, realmName, user, generateUsername, generateNameID, termsOfUse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*ManagementComponent)(nil).CreateUser), ctx, realmName, user, generateUsername, generateNameID, termsOfUse)
}

// CreateUserInSocialRealm mocks base method.
func (m *ManagementComponent) CreateUserInSocialRealm(ctx context.Context, user apimanagement.UserRepresentation, generateNameID bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserInSocialRealm", ctx, user, generateNameID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserInSocialRealm indicates an expected call of CreateUserInSocialRealm.
func (mr *ManagementComponentMockRecorder) CreateUserInSocialRealm(ctx, user, generateNameID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserInSocialRealm", reflect.TypeOf((*ManagementComponent)(nil).CreateUserInSocialRealm), ctx, user, generateNameID)
}

// DeleteAuthorization mocks base method.
func (m *ManagementComponent) DeleteAuthorization(ctx context.Context, realmName, groupID, targetRealm, targetGroupID, actionReq string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthorization", ctx, realmName, groupID, targetRealm, targetGroupID, actionReq)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthorization indicates an expected call of DeleteAuthorization.
func (mr *ManagementComponentMockRecorder) DeleteAuthorization(ctx, realmName, groupID, targetRealm, targetGroupID, actionReq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthorization", reflect.TypeOf((*ManagementComponent)(nil).DeleteAuthorization), ctx, realmName, groupID, targetRealm, targetGroupID, actionReq)
}

// DeleteClientRole mocks base method.
func (m *ManagementComponent) DeleteClientRole(ctx context.Context, realmName, clientID, roleID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientRole", ctx, realmName, clientID, roleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientRole indicates an expected call of DeleteClientRole.
func (mr *ManagementComponentMockRecorder) DeleteClientRole(ctx, realmName, clientID, roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientRole", reflect.TypeOf((*ManagementComponent)(nil).DeleteClientRole), ctx, realmName, clientID, roleID)
}

// DeleteClientRolesFromUser mocks base method.
func (m *ManagementComponent) DeleteClientRolesFromUser(ctx context.Context, realmName, userID, clientID, roleID, roleName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientRolesFromUser", ctx, realmName, userID, clientID, roleID, roleName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientRolesFromUser indicates an expected call of DeleteClientRolesFromUser.
func (mr *ManagementComponentMockRecorder) DeleteClientRolesFromUser(ctx, realmName, userID, clientID, roleID, roleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientRolesFromUser", reflect.TypeOf((*ManagementComponent)(nil).DeleteClientRolesFromUser), ctx, realmName, userID, clientID, roleID, roleName)
}

// DeleteCredentialsForUser mocks base method.
func (m *ManagementComponent) DeleteCredentialsForUser(ctx context.Context, realmName, userID, credentialID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCredentialsForUser", ctx, realmName, userID, credentialID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCredentialsForUser indicates an expected call of DeleteCredentialsForUser.
func (mr *ManagementComponentMockRecorder) DeleteCredentialsForUser(ctx, realmName, userID, credentialID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredentialsForUser", reflect.TypeOf((*ManagementComponent)(nil).DeleteCredentialsForUser), ctx, realmName, userID, credentialID)
}

// DeleteGroup mocks base method.
func (m *ManagementComponent) DeleteGroup(ctx context.Context, realmName, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", ctx, realmName, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *ManagementComponentMockRecorder) DeleteGroup(ctx, realmName, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*ManagementComponent)(nil).DeleteGroup), ctx, realmName, groupID)
}

// DeleteGroupForUser mocks base method.
func (m *ManagementComponent) DeleteGroupForUser(ctx context.Context, realmName, userID, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupForUser", ctx, realmName, userID, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroupForUser indicates an expected call of DeleteGroupForUser.
func (mr *ManagementComponentMockRecorder) DeleteGroupForUser(ctx, realmName, userID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupForUser", reflect.TypeOf((*ManagementComponent)(nil).DeleteGroupForUser), ctx, realmName, userID, groupID)
}

// DeleteRole mocks base method.
func (m *ManagementComponent) DeleteRole(ctx context.Context, realmName, roleID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", ctx, realmName, roleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *ManagementComponentMockRecorder) DeleteRole(ctx, realmName, roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*ManagementComponent)(nil).DeleteRole), ctx, realmName, roleID)
}

// DeleteRoleForUser mocks base method.
func (m *ManagementComponent) DeleteRoleForUser(ctx context.Context, realmName, userID, roleID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleForUser", ctx, realmName, userID, roleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleForUser indicates an expected call of DeleteRoleForUser.
func (mr *ManagementComponentMockRecorder) DeleteRoleForUser(ctx, realmName, userID, roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleForUser", reflect.TypeOf((*ManagementComponent)(nil).DeleteRoleForUser), ctx, realmName, userID, roleID)
}

// DeleteUser mocks base method.
func (m *ManagementComponent) DeleteUser(ctx context.Context, realmName, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, realmName, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *ManagementComponentMockRecorder) DeleteUser(ctx, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*ManagementComponent)(nil).DeleteUser), ctx, realmName, userID)
}

// ExecuteActionsEmail mocks base method.
func (m *ManagementComponent) ExecuteActionsEmail(ctx context.Context, realmName, userID string, actions []apimanagement.RequiredAction, paramKV ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, realmName, userID, actions}
	for _, a := range paramKV {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteActionsEmail", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteActionsEmail indicates an expected call of ExecuteActionsEmail.
func (mr *ManagementComponentMockRecorder) ExecuteActionsEmail(ctx, realmName, userID, actions any, paramKV ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, realmName, userID, actions}, paramKV...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteActionsEmail", reflect.TypeOf((*ManagementComponent)(nil).ExecuteActionsEmail), varargs...)
}

// GetActions mocks base method.
func (m *ManagementComponent) GetActions(ctx context.Context) ([]apimanagement.ActionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActions", ctx)
	ret0, _ := ret[0].([]apimanagement.ActionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActions indicates an expected call of GetActions.
func (mr *ManagementComponentMockRecorder) GetActions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActions", reflect.TypeOf((*ManagementComponent)(nil).GetActions), ctx)
}

// GetAttackDetectionStatus mocks base method.
func (m *ManagementComponent) GetAttackDetectionStatus(ctx context.Context, realmName, userID string) (apimanagement.AttackDetectionStatusRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttackDetectionStatus", ctx, realmName, userID)
	ret0, _ := ret[0].(apimanagement.AttackDetectionStatusRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttackDetectionStatus indicates an expected call of GetAttackDetectionStatus.
func (mr *ManagementComponentMockRecorder) GetAttackDetectionStatus(ctx, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttackDetectionStatus", reflect.TypeOf((*ManagementComponent)(nil).GetAttackDetectionStatus), ctx, realmName, userID)
}

// GetAuthorization mocks base method.
func (m *ManagementComponent) GetAuthorization(ctx context.Context, realmName, groupID, targetRealm, targetGroupID, actionReq string) (apimanagement.AuthorizationMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorization", ctx, realmName, groupID, targetRealm, targetGroupID, actionReq)
	ret0, _ := ret[0].(apimanagement.AuthorizationMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorization indicates an expected call of GetAuthorization.
func (mr *ManagementComponentMockRecorder) GetAuthorization(ctx, realmName, groupID, targetRealm, targetGroupID, actionReq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorization", reflect.TypeOf((*ManagementComponent)(nil).GetAuthorization), ctx, realmName, groupID, targetRealm, targetGroupID, actionReq)
}

// GetAuthorizations mocks base method.
func (m *ManagementComponent) GetAuthorizations(ctx context.Context, realmName, groupID string) (apimanagement.AuthorizationsRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizations", ctx, realmName, groupID)
	ret0, _ := ret[0].(apimanagement.AuthorizationsRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizations indicates an expected call of GetAuthorizations.
func (mr *ManagementComponentMockRecorder) GetAuthorizations(ctx, realmName, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizations", reflect.TypeOf((*ManagementComponent)(nil).GetAuthorizations), ctx, realmName, groupID)
}

// GetAvailableTrustIDGroups mocks base method.
func (m *ManagementComponent) GetAvailableTrustIDGroups(ctx context.Context, realmName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableTrustIDGroups", ctx, realmName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableTrustIDGroups indicates an expected call of GetAvailableTrustIDGroups.
func (mr *ManagementComponentMockRecorder) GetAvailableTrustIDGroups(ctx, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableTrustIDGroups", reflect.TypeOf((*ManagementComponent)(nil).GetAvailableTrustIDGroups), ctx, realmName)
}

// GetClient mocks base method.
func (m *ManagementComponent) GetClient(ctx context.Context, realmName, idClient string) (apimanagement.ClientRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", ctx, realmName, idClient)
	ret0, _ := ret[0].(apimanagement.ClientRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *ManagementComponentMockRecorder) GetClient(ctx, realmName, idClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*ManagementComponent)(nil).GetClient), ctx, realmName, idClient)
}

// GetClientRoles mocks base method.
func (m *ManagementComponent) GetClientRoles(ctx context.Context, realmName, idClient string) ([]apimanagement.RoleRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientRoles", ctx, realmName, idClient)
	ret0, _ := ret[0].([]apimanagement.RoleRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientRoles indicates an expected call of GetClientRoles.
func (mr *ManagementComponentMockRecorder) GetClientRoles(ctx, realmName, idClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientRoles", reflect.TypeOf((*ManagementComponent)(nil).GetClientRoles), ctx, realmName, idClient)
}

// GetClientRolesForUser mocks base method.
func (m *ManagementComponent) GetClientRolesForUser(ctx context.Context, realmName, userID, clientID string) ([]apimanagement.RoleRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientRolesForUser", ctx, realmName, userID, clientID)
	ret0, _ := ret[0].([]apimanagement.RoleRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientRolesForUser indicates an expected call of GetClientRolesForUser.
func (mr *ManagementComponentMockRecorder) GetClientRolesForUser(ctx, realmName, userID, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientRolesForUser", reflect.TypeOf((*ManagementComponent)(nil).GetClientRolesForUser), ctx, realmName, userID, clientID)
}

// GetClients mocks base method.
func (m *ManagementComponent) GetClients(ctx context.Context, realmName string) ([]apimanagement.ClientRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClients", ctx, realmName)
	ret0, _ := ret[0].([]apimanagement.ClientRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClients indicates an expected call of GetClients.
func (mr *ManagementComponentMockRecorder) GetClients(ctx, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClients", reflect.TypeOf((*ManagementComponent)(nil).GetClients), ctx, realmName)
}

// GetCredentialsForUser mocks base method.
func (m *ManagementComponent) GetCredentialsForUser(ctx context.Context, realmName, userID string) ([]apimanagement.CredentialRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialsForUser", ctx, realmName, userID)
	ret0, _ := ret[0].([]apimanagement.CredentialRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialsForUser indicates an expected call of GetCredentialsForUser.
func (mr *ManagementComponentMockRecorder) GetCredentialsForUser(ctx, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialsForUser", reflect.TypeOf((*ManagementComponent)(nil).GetCredentialsForUser), ctx, realmName, userID)
}

// GetFederatedIdentities mocks base method.
func (m *ManagementComponent) GetFederatedIdentities(ctx context.Context, realmName, userID string) ([]apimanagement.FederatedIdentityRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFederatedIdentities", ctx, realmName, userID)
	ret0, _ := ret[0].([]apimanagement.FederatedIdentityRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFederatedIdentities indicates an expected call of GetFederatedIdentities.
func (mr *ManagementComponentMockRecorder) GetFederatedIdentities(ctx, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFederatedIdentities", reflect.TypeOf((*ManagementComponent)(nil).GetFederatedIdentities), ctx, realmName, userID)
}

// GetGroups mocks base method.
func (m *ManagementComponent) GetGroups(ctx context.Context, realmName string) ([]apimanagement.GroupRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", ctx, realmName)
	ret0, _ := ret[0].([]apimanagement.GroupRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *ManagementComponentMockRecorder) GetGroups(ctx, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*ManagementComponent)(nil).GetGroups), ctx, realmName)
}

// GetGroupsOfUser mocks base method.
func (m *ManagementComponent) GetGroupsOfUser(ctx context.Context, realmName, userID string) ([]apimanagement.GroupRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsOfUser", ctx, realmName, userID)
	ret0, _ := ret[0].([]apimanagement.GroupRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupsOfUser indicates an expected call of GetGroupsOfUser.
func (mr *ManagementComponentMockRecorder) GetGroupsOfUser(ctx, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsOfUser", reflect.TypeOf((*ManagementComponent)(nil).GetGroupsOfUser), ctx, realmName, userID)
}

// GetIdentityProviders mocks base method.
func (m *ManagementComponent) GetIdentityProviders(ctx context.Context, realmName string) ([]apimanagement.IdentityProviderRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityProviders", ctx, realmName)
	ret0, _ := ret[0].([]apimanagement.IdentityProviderRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityProviders indicates an expected call of GetIdentityProviders.
func (mr *ManagementComponentMockRecorder) GetIdentityProviders(ctx, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityProviders", reflect.TypeOf((*ManagementComponent)(nil).GetIdentityProviders), ctx, realmName)
}

// GetRealm mocks base method.
func (m *ManagementComponent) GetRealm(ctx context.Context, realmName string) (apimanagement.RealmRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealm", ctx, realmName)
	ret0, _ := ret[0].(apimanagement.RealmRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealm indicates an expected call of GetRealm.
func (mr *ManagementComponentMockRecorder) GetRealm(ctx, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealm", reflect.TypeOf((*ManagementComponent)(nil).GetRealm), ctx, realmName)
}

// GetRealmAdminConfiguration mocks base method.
func (m *ManagementComponent) GetRealmAdminConfiguration(ctx context.Context, realmName string) (apimanagement.RealmAdminConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealmAdminConfiguration", ctx, realmName)
	ret0, _ := ret[0].(apimanagement.RealmAdminConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealmAdminConfiguration indicates an expected call of GetRealmAdminConfiguration.
func (mr *ManagementComponentMockRecorder) GetRealmAdminConfiguration(ctx, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealmAdminConfiguration", reflect.TypeOf((*ManagementComponent)(nil).GetRealmAdminConfiguration), ctx, realmName)
}

// GetRealmBackOfficeConfiguration mocks base method.
func (m *ManagementComponent) GetRealmBackOfficeConfiguration(ctx context.Context, realmID, groupName string) (apimanagement.BackOfficeConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealmBackOfficeConfiguration", ctx, realmID, groupName)
	ret0, _ := ret[0].(apimanagement.BackOfficeConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealmBackOfficeConfiguration indicates an expected call of GetRealmBackOfficeConfiguration.
func (mr *ManagementComponentMockRecorder) GetRealmBackOfficeConfiguration(ctx, realmID, groupName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealmBackOfficeConfiguration", reflect.TypeOf((*ManagementComponent)(nil).GetRealmBackOfficeConfiguration), ctx, realmID, groupName)
}

// GetRealmCustomConfiguration mocks base method.
func (m *ManagementComponent) GetRealmCustomConfiguration(ctx context.Context, realmName string) (apimanagement.RealmCustomConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealmCustomConfiguration", ctx, realmName)
	ret0, _ := ret[0].(apimanagement.RealmCustomConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealmCustomConfiguration indicates an expected call of GetRealmCustomConfiguration.
func (mr *ManagementComponentMockRecorder) GetRealmCustomConfiguration(ctx, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealmCustomConfiguration", reflect.TypeOf((*ManagementComponent)(nil).GetRealmCustomConfiguration), ctx, realmName)
}

// GetRealmUserProfile mocks base method.
func (m *ManagementComponent) GetRealmUserProfile(ctx context.Context, realmID string) (apicommon.ProfileRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealmUserProfile", ctx, realmID)
	ret0, _ := ret[0].(apicommon.ProfileRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealmUserProfile indicates an expected call of GetRealmUserProfile.
func (mr *ManagementComponentMockRecorder) GetRealmUserProfile(ctx, realmID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealmUserProfile", reflect.TypeOf((*ManagementComponent)(nil).GetRealmUserProfile), ctx, realmID)
}

// GetRealms mocks base method.
func (m *ManagementComponent) GetRealms(ctx context.Context) ([]apimanagement.RealmRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealms", ctx)
	ret0, _ := ret[0].([]apimanagement.RealmRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealms indicates an expected call of GetRealms.
func (mr *ManagementComponentMockRecorder) GetRealms(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealms", reflect.TypeOf((*ManagementComponent)(nil).GetRealms), ctx)
}

// GetRequiredActions mocks base method.
func (m *ManagementComponent) GetRequiredActions(ctx context.Context, realmName string) ([]apimanagement.RequiredActionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequiredActions", ctx, realmName)
	ret0, _ := ret[0].([]apimanagement.RequiredActionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequiredActions indicates an expected call of GetRequiredActions.
func (mr *ManagementComponentMockRecorder) GetRequiredActions(ctx, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequiredActions", reflect.TypeOf((*ManagementComponent)(nil).GetRequiredActions), ctx, realmName)
}

// GetRole mocks base method.
func (m *ManagementComponent) GetRole(ctx context.Context, realmName, roleID string) (apimanagement.RoleRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", ctx, realmName, roleID)
	ret0, _ := ret[0].(apimanagement.RoleRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *ManagementComponentMockRecorder) GetRole(ctx, realmName, roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*ManagementComponent)(nil).GetRole), ctx, realmName, roleID)
}

// GetRoles mocks base method.
func (m *ManagementComponent) GetRoles(ctx context.Context, realmName string) ([]apimanagement.RoleRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoles", ctx, realmName)
	ret0, _ := ret[0].([]apimanagement.RoleRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoles indicates an expected call of GetRoles.
func (mr *ManagementComponentMockRecorder) GetRoles(ctx, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*ManagementComponent)(nil).GetRoles), ctx, realmName)
}

// GetRolesOfUser mocks base method.
func (m *ManagementComponent) GetRolesOfUser(ctx context.Context, realmName, userID string) ([]apimanagement.RoleRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolesOfUser", ctx, realmName, userID)
	ret0, _ := ret[0].([]apimanagement.RoleRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolesOfUser indicates an expected call of GetRolesOfUser.
func (mr *ManagementComponentMockRecorder) GetRolesOfUser(ctx, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolesOfUser", reflect.TypeOf((*ManagementComponent)(nil).GetRolesOfUser), ctx, realmName, userID)
}

// GetThemeConfiguration mocks base method.
func (m *ManagementComponent) GetThemeConfiguration(ctx context.Context, realmName string) (apimanagement.ThemeConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThemeConfiguration", ctx, realmName)
	ret0, _ := ret[0].(apimanagement.ThemeConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThemeConfiguration indicates an expected call of GetThemeConfiguration.
func (mr *ManagementComponentMockRecorder) GetThemeConfiguration(ctx, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThemeConfiguration", reflect.TypeOf((*ManagementComponent)(nil).GetThemeConfiguration), ctx, realmName)
}

// GetThemeTranslation mocks base method.
func (m *ManagementComponent) GetThemeTranslation(ctx context.Context, realmName, language string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThemeTranslation", ctx, realmName, language)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThemeTranslation indicates an expected call of GetThemeTranslation.
func (mr *ManagementComponentMockRecorder) GetThemeTranslation(ctx, realmName, language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThemeTranslation", reflect.TypeOf((*ManagementComponent)(nil).GetThemeTranslation), ctx, realmName, language)
}

// GetTrustIDGroupsOfUser mocks base method.
func (m *ManagementComponent) GetTrustIDGroupsOfUser(ctx context.Context, realmName, userID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrustIDGroupsOfUser", ctx, realmName, userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrustIDGroupsOfUser indicates an expected call of GetTrustIDGroupsOfUser.
func (mr *ManagementComponentMockRecorder) GetTrustIDGroupsOfUser(ctx, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrustIDGroupsOfUser", reflect.TypeOf((*ManagementComponent)(nil).GetTrustIDGroupsOfUser), ctx, realmName, userID)
}

// GetUser mocks base method.
func (m *ManagementComponent) GetUser(ctx context.Context, realmName, userID string) (apimanagement.UserRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, realmName, userID)
	ret0, _ := ret[0].(apimanagement.UserRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *ManagementComponentMockRecorder) GetUser(ctx, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*ManagementComponent)(nil).GetUser), ctx, realmName, userID)
}

// GetUserAccountStatus mocks base method.
func (m *ManagementComponent) GetUserAccountStatus(ctx context.Context, realmName, userID string) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccountStatus", ctx, realmName, userID)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccountStatus indicates an expected call of GetUserAccountStatus.
func (mr *ManagementComponentMockRecorder) GetUserAccountStatus(ctx, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccountStatus", reflect.TypeOf((*ManagementComponent)(nil).GetUserAccountStatus), ctx, realmName, userID)
}

// GetUserAccountStatusByEmail mocks base method.
func (m *ManagementComponent) GetUserAccountStatusByEmail(ctx context.Context, realmName, email string) (apimanagement.UserStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccountStatusByEmail", ctx, realmName, email)
	ret0, _ := ret[0].(apimanagement.UserStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccountStatusByEmail indicates an expected call of GetUserAccountStatusByEmail.
func (mr *ManagementComponentMockRecorder) GetUserAccountStatusByEmail(ctx, realmName, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccountStatusByEmail", reflect.TypeOf((*ManagementComponent)(nil).GetUserAccountStatusByEmail), ctx, realmName, email)
}

// GetUserChecks mocks base method.
func (m *ManagementComponent) GetUserChecks(ctx context.Context, realmName, userID string) ([]apimanagement.UserCheck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserChecks", ctx, realmName, userID)
	ret0, _ := ret[0].([]apimanagement.UserCheck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserChecks indicates an expected call of GetUserChecks.
func (mr *ManagementComponentMockRecorder) GetUserChecks(ctx, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserChecks", reflect.TypeOf((*ManagementComponent)(nil).GetUserChecks), ctx, realmName, userID)
}

// GetUserRealmBackOfficeConfiguration mocks base method.
func (m *ManagementComponent) GetUserRealmBackOfficeConfiguration(ctx context.Context, realmID string) (apimanagement.BackOfficeConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRealmBackOfficeConfiguration", ctx, realmID)
	ret0, _ := ret[0].(apimanagement.BackOfficeConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRealmBackOfficeConfiguration indicates an expected call of GetUserRealmBackOfficeConfiguration.
func (mr *ManagementComponentMockRecorder) GetUserRealmBackOfficeConfiguration(ctx, realmID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRealmBackOfficeConfiguration", reflect.TypeOf((*ManagementComponent)(nil).GetUserRealmBackOfficeConfiguration), ctx, realmID)
}

// GetUsers mocks base method.
func (m *ManagementComponent) GetUsers(ctx context.Context, realmName string, groupIDs []string, paramKV ...string) (apimanagement.UsersPageRepresentation, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, realmName, groupIDs}
	for _, a := range paramKV {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsers", varargs...)
	ret0, _ := ret[0].(apimanagement.UsersPageRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *ManagementComponentMockRecorder) GetUsers(ctx, realmName, groupIDs any, paramKV ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, realmName, groupIDs}, paramKV...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*ManagementComponent)(nil).GetUsers), varargs...)
}

// LinkShadowUser mocks base method.
func (m *ManagementComponent) LinkShadowUser(ctx context.Context, realmName, userID, provider string, fedID apimanagement.FederatedIdentityRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkShadowUser", ctx, realmName, userID, provider, fedID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkShadowUser indicates an expected call of LinkShadowUser.
func (mr *ManagementComponentMockRecorder) LinkShadowUser(ctx, realmName, userID, provider, fedID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkShadowUser", reflect.TypeOf((*ManagementComponent)(nil).LinkShadowUser), ctx, realmName, userID, provider, fedID)
}

// LockUser mocks base method.
func (m *ManagementComponent) LockUser(ctx context.Context, realmName, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockUser", ctx, realmName, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockUser indicates an expected call of LockUser.
func (mr *ManagementComponentMockRecorder) LockUser(ctx, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockUser", reflect.TypeOf((*ManagementComponent)(nil).LockUser), ctx, realmName, userID)
}

// ResetCredentialFailuresForUser mocks base method.
func (m *ManagementComponent) ResetCredentialFailuresForUser(ctx context.Context, realmName, userID, credentialID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetCredentialFailuresForUser", ctx, realmName, userID, credentialID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetCredentialFailuresForUser indicates an expected call of ResetCredentialFailuresForUser.
func (mr *ManagementComponentMockRecorder) ResetCredentialFailuresForUser(ctx, realmName, userID, credentialID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCredentialFailuresForUser", reflect.TypeOf((*ManagementComponent)(nil).ResetCredentialFailuresForUser), ctx, realmName, userID, credentialID)
}

// ResetPassword mocks base method.
func (m *ManagementComponent) ResetPassword(ctx context.Context, realmName, userID string, password apimanagement.PasswordRepresentation) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", ctx, realmName, userID, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *ManagementComponentMockRecorder) ResetPassword(ctx, realmName, userID, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*ManagementComponent)(nil).ResetPassword), ctx, realmName, userID, password)
}

// ResetSmsCounter mocks base method.
func (m *ManagementComponent) ResetSmsCounter(ctx context.Context, realmName, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetSmsCounter", ctx, realmName, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetSmsCounter indicates an expected call of ResetSmsCounter.
func (mr *ManagementComponentMockRecorder) ResetSmsCounter(ctx, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetSmsCounter", reflect.TypeOf((*ManagementComponent)(nil).ResetSmsCounter), ctx, realmName, userID)
}

// RevokeAccreditations mocks base method.
func (m *ManagementComponent) RevokeAccreditations(ctx context.Context, realmName, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAccreditations", ctx, realmName, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeAccreditations indicates an expected call of RevokeAccreditations.
func (mr *ManagementComponentMockRecorder) RevokeAccreditations(ctx, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAccreditations", reflect.TypeOf((*ManagementComponent)(nil).RevokeAccreditations), ctx, realmName, userID)
}

// SendMigrationEmail mocks base method.
func (m *ManagementComponent) SendMigrationEmail(ctx context.Context, realmName, userID, customerRealm string, reminder bool, lifespan *int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMigrationEmail", ctx, realmName, userID, customerRealm, reminder, lifespan)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMigrationEmail indicates an expected call of SendMigrationEmail.
func (mr *ManagementComponentMockRecorder) SendMigrationEmail(ctx, realmName, userID, customerRealm, reminder, lifespan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMigrationEmail", reflect.TypeOf((*ManagementComponent)(nil).SendMigrationEmail), ctx, realmName, userID, customerRealm, reminder, lifespan)
}

// SendOnboardingEmail mocks base method.
func (m *ManagementComponent) SendOnboardingEmail(ctx context.Context, realmName, userID, customerRealm string, reminder bool, paramKV ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, realmName, userID, customerRealm, reminder}
	for _, a := range paramKV {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendOnboardingEmail", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOnboardingEmail indicates an expected call of SendOnboardingEmail.
func (mr *ManagementComponentMockRecorder) SendOnboardingEmail(ctx, realmName, userID, customerRealm, reminder any, paramKV ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, realmName, userID, customerRealm, reminder}, paramKV...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOnboardingEmail", reflect.TypeOf((*ManagementComponent)(nil).SendOnboardingEmail), varargs...)
}

// SendOnboardingEmailInSocialRealm mocks base method.
func (m *ManagementComponent) SendOnboardingEmailInSocialRealm(ctx context.Context, userID, customerRealm string, reminder bool, paramKV ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, userID, customerRealm, reminder}
	for _, a := range paramKV {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendOnboardingEmailInSocialRealm", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOnboardingEmailInSocialRealm indicates an expected call of SendOnboardingEmailInSocialRealm.
func (mr *ManagementComponentMockRecorder) SendOnboardingEmailInSocialRealm(ctx, userID, customerRealm, reminder any, paramKV ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, userID, customerRealm, reminder}, paramKV...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOnboardingEmailInSocialRealm", reflect.TypeOf((*ManagementComponent)(nil).SendOnboardingEmailInSocialRealm), varargs...)
}

// SendReminderEmail mocks base method.
func (m *ManagementComponent) SendReminderEmail(ctx context.Context, realmName, userID string, paramKV ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, realmName, userID}
	for _, a := range paramKV {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendReminderEmail", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendReminderEmail indicates an expected call of SendReminderEmail.
func (mr *ManagementComponentMockRecorder) SendReminderEmail(ctx, realmName, userID any, paramKV ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, realmName, userID}, paramKV...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendReminderEmail", reflect.TypeOf((*ManagementComponent)(nil).SendReminderEmail), varargs...)
}

// SendSmsCode mocks base method.
func (m *ManagementComponent) SendSmsCode(ctx context.Context, realmName, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSmsCode", ctx, realmName, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendSmsCode indicates an expected call of SendSmsCode.
func (mr *ManagementComponentMockRecorder) SendSmsCode(ctx, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSmsCode", reflect.TypeOf((*ManagementComponent)(nil).SendSmsCode), ctx, realmName, userID)
}

// SetTrustIDGroupsToUser mocks base method.
func (m *ManagementComponent) SetTrustIDGroupsToUser(ctx context.Context, realmName, userID string, groupNames []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTrustIDGroupsToUser", ctx, realmName, userID, groupNames)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTrustIDGroupsToUser indicates an expected call of SetTrustIDGroupsToUser.
func (mr *ManagementComponentMockRecorder) SetTrustIDGroupsToUser(ctx, realmName, userID, groupNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrustIDGroupsToUser", reflect.TypeOf((*ManagementComponent)(nil).SetTrustIDGroupsToUser), ctx, realmName, userID, groupNames)
}

// UnlinkShadowUser mocks base method.
func (m *ManagementComponent) UnlinkShadowUser(ctx context.Context, realmName, userID, provider string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlinkShadowUser", ctx, realmName, userID, provider)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlinkShadowUser indicates an expected call of UnlinkShadowUser.
func (mr *ManagementComponentMockRecorder) UnlinkShadowUser(ctx, realmName, userID, provider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlinkShadowUser", reflect.TypeOf((*ManagementComponent)(nil).UnlinkShadowUser), ctx, realmName, userID, provider)
}

// UnlockUser mocks base method.
func (m *ManagementComponent) UnlockUser(ctx context.Context, realmName, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockUser", ctx, realmName, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlockUser indicates an expected call of UnlockUser.
func (mr *ManagementComponentMockRecorder) UnlockUser(ctx, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockUser", reflect.TypeOf((*ManagementComponent)(nil).UnlockUser), ctx, realmName, userID)
}

// UpdateAuthorizations mocks base method.
func (m *ManagementComponent) UpdateAuthorizations(ctx context.Context, realmName, groupID string, group apimanagement.AuthorizationsRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthorizations", ctx, realmName, groupID, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthorizations indicates an expected call of UpdateAuthorizations.
func (mr *ManagementComponentMockRecorder) UpdateAuthorizations(ctx, realmName, groupID, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthorizations", reflect.TypeOf((*ManagementComponent)(nil).UpdateAuthorizations), ctx, realmName, groupID, group)
}

// UpdateRealmAdminConfiguration mocks base method.
func (m *ManagementComponent) UpdateRealmAdminConfiguration(ctx context.Context, realmID string, adminConfig apimanagement.RealmAdminConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRealmAdminConfiguration", ctx, realmID, adminConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRealmAdminConfiguration indicates an expected call of UpdateRealmAdminConfiguration.
func (mr *ManagementComponentMockRecorder) UpdateRealmAdminConfiguration(ctx, realmID, adminConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRealmAdminConfiguration", reflect.TypeOf((*ManagementComponent)(nil).UpdateRealmAdminConfiguration), ctx, realmID, adminConfig)
}

// UpdateRealmBackOfficeConfiguration mocks base method.
func (m *ManagementComponent) UpdateRealmBackOfficeConfiguration(ctx context.Context, realmID, groupName string, config apimanagement.BackOfficeConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRealmBackOfficeConfiguration", ctx, realmID, groupName, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRealmBackOfficeConfiguration indicates an expected call of UpdateRealmBackOfficeConfiguration.
func (mr *ManagementComponentMockRecorder) UpdateRealmBackOfficeConfiguration(ctx, realmID, groupName, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRealmBackOfficeConfiguration", reflect.TypeOf((*ManagementComponent)(nil).UpdateRealmBackOfficeConfiguration), ctx, realmID, groupName, config)
}

// UpdateRealmCustomConfiguration mocks base method.
func (m *ManagementComponent) UpdateRealmCustomConfiguration(ctx context.Context, realmID string, customConfig apimanagement.RealmCustomConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRealmCustomConfiguration", ctx, realmID, customConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRealmCustomConfiguration indicates an expected call of UpdateRealmCustomConfiguration.
func (mr *ManagementComponentMockRecorder) UpdateRealmCustomConfiguration(ctx, realmID, customConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRealmCustomConfiguration", reflect.TypeOf((*ManagementComponent)(nil).UpdateRealmCustomConfiguration), ctx, realmID, customConfig)
}

// UpdateRole mocks base method.
func (m *ManagementComponent) UpdateRole(ctx context.Context, realmName, roleID string, role apimanagement.RoleRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", ctx, realmName, roleID, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *ManagementComponentMockRecorder) UpdateRole(ctx, realmName, roleID, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*ManagementComponent)(nil).UpdateRole), ctx, realmName, roleID, role)
}

// UpdateThemeConfiguration mocks base method.
func (m *ManagementComponent) UpdateThemeConfiguration(ctx context.Context, realmName string, themeConf apimanagement.UpdatableThemeConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThemeConfiguration", ctx, realmName, themeConf)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateThemeConfiguration indicates an expected call of UpdateThemeConfiguration.
func (mr *ManagementComponentMockRecorder) UpdateThemeConfiguration(ctx, realmName, themeConf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThemeConfiguration", reflect.TypeOf((*ManagementComponent)(nil).UpdateThemeConfiguration), ctx, realmName, themeConf)
}

// UpdateUser mocks base method.
func (m *ManagementComponent) UpdateUser(ctx context.Context, realmName, userID string, user apimanagement.UpdatableUserRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, realmName, userID, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *ManagementComponentMockRecorder) UpdateUser(ctx, realmName, userID, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*ManagementComponent)(nil).UpdateUser), ctx, realmName, userID, user)
}

// KeycloakClient is a mock of KeycloakClient interface.
type KeycloakClient struct {
	ctrl     *gomock.Controller
	recorder *KeycloakClientMockRecorder
	isgomock struct{}
}

// KeycloakClientMockRecorder is the mock recorder for KeycloakClient.
type KeycloakClientMockRecorder struct {
	mock *KeycloakClient
}

// NewKeycloakClient creates a new mock instance.
func NewKeycloakClient(ctrl *gomock.Controller) *KeycloakClient {
	mock := &KeycloakClient{ctrl: ctrl}
	mock.recorder = &KeycloakClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *KeycloakClient) EXPECT() *KeycloakClientMockRecorder {
	return m.recorder
}

// AddClientRolesToUserRoleMapping mocks base method.
func (m *KeycloakClient) AddClientRolesToUserRoleMapping(accessToken, realmName, userID, clientID string, roles []keycloak.RoleRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClientRolesToUserRoleMapping", accessToken, realmName, userID, clientID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClientRolesToUserRoleMapping indicates an expected call of AddClientRolesToUserRoleMapping.
func (mr *KeycloakClientMockRecorder) AddClientRolesToUserRoleMapping(accessToken, realmName, userID, clientID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClientRolesToUserRoleMapping", reflect.TypeOf((*KeycloakClient)(nil).AddClientRolesToUserRoleMapping), accessToken, realmName, userID, clientID, roles)
}

// AddGroupToUser mocks base method.
func (m *KeycloakClient) AddGroupToUser(accessToken, realmName, userID, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGroupToUser", accessToken, realmName, userID, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGroupToUser indicates an expected call of AddGroupToUser.
func (mr *KeycloakClientMockRecorder) AddGroupToUser(accessToken, realmName, userID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroupToUser", reflect.TypeOf((*KeycloakClient)(nil).AddGroupToUser), accessToken, realmName, userID, groupID)
}

// AddRealmLevelRoleMappings mocks base method.
func (m *KeycloakClient) AddRealmLevelRoleMappings(accessToken, realmName, userID string, roles []keycloak.RoleRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRealmLevelRoleMappings", accessToken, realmName, userID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRealmLevelRoleMappings indicates an expected call of AddRealmLevelRoleMappings.
func (mr *KeycloakClientMockRecorder) AddRealmLevelRoleMappings(accessToken, realmName, userID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRealmLevelRoleMappings", reflect.TypeOf((*KeycloakClient)(nil).AddRealmLevelRoleMappings), accessToken, realmName, userID, roles)
}

// AssignClientRole mocks base method.
func (m *KeycloakClient) AssignClientRole(accessToken, realmName, groupID, clientID string, role []keycloak.RoleRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignClientRole", accessToken, realmName, groupID, clientID, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignClientRole indicates an expected call of AssignClientRole.
func (mr *KeycloakClientMockRecorder) AssignClientRole(accessToken, realmName, groupID, clientID, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignClientRole", reflect.TypeOf((*KeycloakClient)(nil).AssignClientRole), accessToken, realmName, groupID, clientID, role)
}

// ClearUserLoginFailures mocks base method.
func (m *KeycloakClient) ClearUserLoginFailures(accessToken, realmName, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearUserLoginFailures", accessToken, realmName, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearUserLoginFailures indicates an expected call of ClearUserLoginFailures.
func (mr *KeycloakClientMockRecorder) ClearUserLoginFailures(accessToken, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearUserLoginFailures", reflect.TypeOf((*KeycloakClient)(nil).ClearUserLoginFailures), accessToken, realmName, userID)
}

// CreateActivationCode mocks base method.
func (m *KeycloakClient) CreateActivationCode(accessToken, realmName, userID string) (keycloak.ActivationCodeRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActivationCode", accessToken, realmName, userID)
	ret0, _ := ret[0].(keycloak.ActivationCodeRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActivationCode indicates an expected call of CreateActivationCode.
func (mr *KeycloakClientMockRecorder) CreateActivationCode(accessToken, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActivationCode", reflect.TypeOf((*KeycloakClient)(nil).CreateActivationCode), accessToken, realmName, userID)
}

// CreateClientRole mocks base method.
func (m *KeycloakClient) CreateClientRole(accessToken, realmName, clientID string, role keycloak.RoleRepresentation) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientRole", accessToken, realmName, clientID, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClientRole indicates an expected call of CreateClientRole.
func (mr *KeycloakClientMockRecorder) CreateClientRole(accessToken, realmName, clientID, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientRole", reflect.TypeOf((*KeycloakClient)(nil).CreateClientRole), accessToken, realmName, clientID, role)
}

// CreateGroup mocks base method.
func (m *KeycloakClient) CreateGroup(accessToken, realmName string, group keycloak.GroupRepresentation) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", accessToken, realmName, group)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *KeycloakClientMockRecorder) CreateGroup(accessToken, realmName, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*KeycloakClient)(nil).CreateGroup), accessToken, realmName, group)
}

// CreateRecoveryCode mocks base method.
func (m *KeycloakClient) CreateRecoveryCode(accessToken, realmName, userID string) (keycloak.RecoveryCodeRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecoveryCode", accessToken, realmName, userID)
	ret0, _ := ret[0].(keycloak.RecoveryCodeRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecoveryCode indicates an expected call of CreateRecoveryCode.
func (mr *KeycloakClientMockRecorder) CreateRecoveryCode(accessToken, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecoveryCode", reflect.TypeOf((*KeycloakClient)(nil).CreateRecoveryCode), accessToken, realmName, userID)
}

// CreateRole mocks base method.
func (m *KeycloakClient) CreateRole(accessToken, realmName string, role keycloak.RoleRepresentation) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", accessToken, realmName, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *KeycloakClientMockRecorder) CreateRole(accessToken, realmName, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*KeycloakClient)(nil).CreateRole), accessToken, realmName, role)
}

// CreateUser mocks base method.
func (m *KeycloakClient) CreateUser(accessToken, realmName, targetRealmName string, user keycloak.UserRepresentation, paramKV ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{accessToken, realmName, targetRealmName, user}
	for _, a := range paramKV {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *KeycloakClientMockRecorder) CreateUser(accessToken, realmName, targetRealmName, user any, paramKV ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{accessToken, realmName, targetRealmName, user}, paramKV...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*KeycloakClient)(nil).CreateUser), varargs...)
}

// DeleteClientRolesFromUserRoleMapping mocks base method.
func (m *KeycloakClient) DeleteClientRolesFromUserRoleMapping(accessToken, realmName, userID, clientID string, roles []keycloak.RoleRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientRolesFromUserRoleMapping", accessToken, realmName, userID, clientID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientRolesFromUserRoleMapping indicates an expected call of DeleteClientRolesFromUserRoleMapping.
func (mr *KeycloakClientMockRecorder) DeleteClientRolesFromUserRoleMapping(accessToken, realmName, userID, clientID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientRolesFromUserRoleMapping", reflect.TypeOf((*KeycloakClient)(nil).DeleteClientRolesFromUserRoleMapping), accessToken, realmName, userID, clientID, roles)
}

// DeleteCredential mocks base method.
func (m *KeycloakClient) DeleteCredential(accessToken, realmName, userID, credentialID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCredential", accessToken, realmName, userID, credentialID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCredential indicates an expected call of DeleteCredential.
func (mr *KeycloakClientMockRecorder) DeleteCredential(accessToken, realmName, userID, credentialID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredential", reflect.TypeOf((*KeycloakClient)(nil).DeleteCredential), accessToken, realmName, userID, credentialID)
}

// DeleteGroup mocks base method.
func (m *KeycloakClient) DeleteGroup(accessToken, realmName, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", accessToken, realmName, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *KeycloakClientMockRecorder) DeleteGroup(accessToken, realmName, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*KeycloakClient)(nil).DeleteGroup), accessToken, realmName, groupID)
}

// DeleteGroupFromUser mocks base method.
func (m *KeycloakClient) DeleteGroupFromUser(accessToken, realmName, userID, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupFromUser", accessToken, realmName, userID, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroupFromUser indicates an expected call of DeleteGroupFromUser.
func (mr *KeycloakClientMockRecorder) DeleteGroupFromUser(accessToken, realmName, userID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupFromUser", reflect.TypeOf((*KeycloakClient)(nil).DeleteGroupFromUser), accessToken, realmName, userID, groupID)
}

// DeleteRealmLevelRoleMappings mocks base method.
func (m *KeycloakClient) DeleteRealmLevelRoleMappings(accessToken, realmName, userID string, roles []keycloak.RoleRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRealmLevelRoleMappings", accessToken, realmName, userID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRealmLevelRoleMappings indicates an expected call of DeleteRealmLevelRoleMappings.
func (mr *KeycloakClientMockRecorder) DeleteRealmLevelRoleMappings(accessToken, realmName, userID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRealmLevelRoleMappings", reflect.TypeOf((*KeycloakClient)(nil).DeleteRealmLevelRoleMappings), accessToken, realmName, userID, roles)
}

// DeleteRole mocks base method.
func (m *KeycloakClient) DeleteRole(accessToken, realmName, roleID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", accessToken, realmName, roleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *KeycloakClientMockRecorder) DeleteRole(accessToken, realmName, roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*KeycloakClient)(nil).DeleteRole), accessToken, realmName, roleID)
}

// DeleteUser mocks base method.
func (m *KeycloakClient) DeleteUser(accessToken, realmName, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", accessToken, realmName, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *KeycloakClientMockRecorder) DeleteUser(accessToken, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*KeycloakClient)(nil).DeleteUser), accessToken, realmName, userID)
}

// ExecuteActionsEmail mocks base method.
func (m *KeycloakClient) ExecuteActionsEmail(accessToken, reqRealmName, targetRealmName, userID string, actions []string, paramKV ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{accessToken, reqRealmName, targetRealmName, userID, actions}
	for _, a := range paramKV {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteActionsEmail", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteActionsEmail indicates an expected call of ExecuteActionsEmail.
func (mr *KeycloakClientMockRecorder) ExecuteActionsEmail(accessToken, reqRealmName, targetRealmName, userID, actions any, paramKV ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{accessToken, reqRealmName, targetRealmName, userID, actions}, paramKV...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteActionsEmail", reflect.TypeOf((*KeycloakClient)(nil).ExecuteActionsEmail), varargs...)
}

// GetAttackDetectionStatus mocks base method.
func (m *KeycloakClient) GetAttackDetectionStatus(accessToken, realmName, userID string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttackDetectionStatus", accessToken, realmName, userID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttackDetectionStatus indicates an expected call of GetAttackDetectionStatus.
func (mr *KeycloakClientMockRecorder) GetAttackDetectionStatus(accessToken, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttackDetectionStatus", reflect.TypeOf((*KeycloakClient)(nil).GetAttackDetectionStatus), accessToken, realmName, userID)
}

// GetAvailableGroupClientRoles mocks base method.
func (m *KeycloakClient) GetAvailableGroupClientRoles(accessToken, realmName, groupID, clientID string) ([]keycloak.RoleRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableGroupClientRoles", accessToken, realmName, groupID, clientID)
	ret0, _ := ret[0].([]keycloak.RoleRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableGroupClientRoles indicates an expected call of GetAvailableGroupClientRoles.
func (mr *KeycloakClientMockRecorder) GetAvailableGroupClientRoles(accessToken, realmName, groupID, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableGroupClientRoles", reflect.TypeOf((*KeycloakClient)(nil).GetAvailableGroupClientRoles), accessToken, realmName, groupID, clientID)
}

// GetClient mocks base method.
func (m *KeycloakClient) GetClient(accessToken, realmName, idClient string) (keycloak.ClientRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", accessToken, realmName, idClient)
	ret0, _ := ret[0].(keycloak.ClientRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *KeycloakClientMockRecorder) GetClient(accessToken, realmName, idClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*KeycloakClient)(nil).GetClient), accessToken, realmName, idClient)
}

// GetClientRoleMappings mocks base method.
func (m *KeycloakClient) GetClientRoleMappings(accessToken, realmName, userID, clientID string) ([]keycloak.RoleRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientRoleMappings", accessToken, realmName, userID, clientID)
	ret0, _ := ret[0].([]keycloak.RoleRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientRoleMappings indicates an expected call of GetClientRoleMappings.
func (mr *KeycloakClientMockRecorder) GetClientRoleMappings(accessToken, realmName, userID, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientRoleMappings", reflect.TypeOf((*KeycloakClient)(nil).GetClientRoleMappings), accessToken, realmName, userID, clientID)
}

// GetClientRoles mocks base method.
func (m *KeycloakClient) GetClientRoles(accessToken, realmName, idClient string) ([]keycloak.RoleRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientRoles", accessToken, realmName, idClient)
	ret0, _ := ret[0].([]keycloak.RoleRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientRoles indicates an expected call of GetClientRoles.
func (mr *KeycloakClientMockRecorder) GetClientRoles(accessToken, realmName, idClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientRoles", reflect.TypeOf((*KeycloakClient)(nil).GetClientRoles), accessToken, realmName, idClient)
}

// GetClients mocks base method.
func (m *KeycloakClient) GetClients(accessToken, realmName string, paramKV ...string) ([]keycloak.ClientRepresentation, error) {
	m.ctrl.T.Helper()
	varargs := []any{accessToken, realmName}
	for _, a := range paramKV {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClients", varargs...)
	ret0, _ := ret[0].([]keycloak.ClientRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClients indicates an expected call of GetClients.
func (mr *KeycloakClientMockRecorder) GetClients(accessToken, realmName any, paramKV ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{accessToken, realmName}, paramKV...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClients", reflect.TypeOf((*KeycloakClient)(nil).GetClients), varargs...)
}

// GetCredentials mocks base method.
func (m *KeycloakClient) GetCredentials(accessToken, realmName, userID string) ([]keycloak.CredentialRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentials", accessToken, realmName, userID)
	ret0, _ := ret[0].([]keycloak.CredentialRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *KeycloakClientMockRecorder) GetCredentials(accessToken, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*KeycloakClient)(nil).GetCredentials), accessToken, realmName, userID)
}

// GetFederatedIdentities mocks base method.
func (m *KeycloakClient) GetFederatedIdentities(accessToken, realmName, userID string) ([]keycloak.FederatedIdentityRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFederatedIdentities", accessToken, realmName, userID)
	ret0, _ := ret[0].([]keycloak.FederatedIdentityRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFederatedIdentities indicates an expected call of GetFederatedIdentities.
func (mr *KeycloakClientMockRecorder) GetFederatedIdentities(accessToken, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFederatedIdentities", reflect.TypeOf((*KeycloakClient)(nil).GetFederatedIdentities), accessToken, realmName, userID)
}

// GetGroup mocks base method.
func (m *KeycloakClient) GetGroup(accessToken, realmName, groupID string) (keycloak.GroupRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", accessToken, realmName, groupID)
	ret0, _ := ret[0].(keycloak.GroupRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup.
func (mr *KeycloakClientMockRecorder) GetGroup(accessToken, realmName, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*KeycloakClient)(nil).GetGroup), accessToken, realmName, groupID)
}

// GetGroupClientRoles mocks base method.
func (m *KeycloakClient) GetGroupClientRoles(accessToken, realmName, groupID, clientID string) ([]keycloak.RoleRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupClientRoles", accessToken, realmName, groupID, clientID)
	ret0, _ := ret[0].([]keycloak.RoleRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupClientRoles indicates an expected call of GetGroupClientRoles.
func (mr *KeycloakClientMockRecorder) GetGroupClientRoles(accessToken, realmName, groupID, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupClientRoles", reflect.TypeOf((*KeycloakClient)(nil).GetGroupClientRoles), accessToken, realmName, groupID, clientID)
}

// GetGroups mocks base method.
func (m *KeycloakClient) GetGroups(accessToken, realmName string) ([]keycloak.GroupRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", accessToken, realmName)
	ret0, _ := ret[0].([]keycloak.GroupRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *KeycloakClientMockRecorder) GetGroups(accessToken, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*KeycloakClient)(nil).GetGroups), accessToken, realmName)
}

// GetGroupsOfUser mocks base method.
func (m *KeycloakClient) GetGroupsOfUser(accessToken, realmName, userID string) ([]keycloak.GroupRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsOfUser", accessToken, realmName, userID)
	ret0, _ := ret[0].([]keycloak.GroupRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupsOfUser indicates an expected call of GetGroupsOfUser.
func (mr *KeycloakClientMockRecorder) GetGroupsOfUser(accessToken, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsOfUser", reflect.TypeOf((*KeycloakClient)(nil).GetGroupsOfUser), accessToken, realmName, userID)
}

// GetIdps mocks base method.
func (m *KeycloakClient) GetIdps(accessToken, realmName string) ([]keycloak.IdentityProviderRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdps", accessToken, realmName)
	ret0, _ := ret[0].([]keycloak.IdentityProviderRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdps indicates an expected call of GetIdps.
func (mr *KeycloakClientMockRecorder) GetIdps(accessToken, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdps", reflect.TypeOf((*KeycloakClient)(nil).GetIdps), accessToken, realmName)
}

// GetRealm mocks base method.
func (m *KeycloakClient) GetRealm(accessToken, realmName string) (keycloak.RealmRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealm", accessToken, realmName)
	ret0, _ := ret[0].(keycloak.RealmRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealm indicates an expected call of GetRealm.
func (mr *KeycloakClientMockRecorder) GetRealm(accessToken, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealm", reflect.TypeOf((*KeycloakClient)(nil).GetRealm), accessToken, realmName)
}

// GetRealmLevelRoleMappings mocks base method.
func (m *KeycloakClient) GetRealmLevelRoleMappings(accessToken, realmName, userID string) ([]keycloak.RoleRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealmLevelRoleMappings", accessToken, realmName, userID)
	ret0, _ := ret[0].([]keycloak.RoleRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealmLevelRoleMappings indicates an expected call of GetRealmLevelRoleMappings.
func (mr *KeycloakClientMockRecorder) GetRealmLevelRoleMappings(accessToken, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealmLevelRoleMappings", reflect.TypeOf((*KeycloakClient)(nil).GetRealmLevelRoleMappings), accessToken, realmName, userID)
}

// GetRealms mocks base method.
func (m *KeycloakClient) GetRealms(accessToken string) ([]keycloak.RealmRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealms", accessToken)
	ret0, _ := ret[0].([]keycloak.RealmRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealms indicates an expected call of GetRealms.
func (mr *KeycloakClientMockRecorder) GetRealms(accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealms", reflect.TypeOf((*KeycloakClient)(nil).GetRealms), accessToken)
}

// GetRequiredActions mocks base method.
func (m *KeycloakClient) GetRequiredActions(accessToken, realmName string) ([]keycloak.RequiredActionProviderRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequiredActions", accessToken, realmName)
	ret0, _ := ret[0].([]keycloak.RequiredActionProviderRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequiredActions indicates an expected call of GetRequiredActions.
func (mr *KeycloakClientMockRecorder) GetRequiredActions(accessToken, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequiredActions", reflect.TypeOf((*KeycloakClient)(nil).GetRequiredActions), accessToken, realmName)
}

// GetRole mocks base method.
func (m *KeycloakClient) GetRole(accessToken, realmName, roleID string) (keycloak.RoleRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", accessToken, realmName, roleID)
	ret0, _ := ret[0].(keycloak.RoleRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *KeycloakClientMockRecorder) GetRole(accessToken, realmName, roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*KeycloakClient)(nil).GetRole), accessToken, realmName, roleID)
}

// GetRoles mocks base method.
func (m *KeycloakClient) GetRoles(accessToken, realmName string) ([]keycloak.RoleRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoles", accessToken, realmName)
	ret0, _ := ret[0].([]keycloak.RoleRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoles indicates an expected call of GetRoles.
func (mr *KeycloakClientMockRecorder) GetRoles(accessToken, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*KeycloakClient)(nil).GetRoles), accessToken, realmName)
}

// GetRolesWithAttributes mocks base method.
func (m *KeycloakClient) GetRolesWithAttributes(accessToken, realmName string) ([]keycloak.RoleRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolesWithAttributes", accessToken, realmName)
	ret0, _ := ret[0].([]keycloak.RoleRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolesWithAttributes indicates an expected call of GetRolesWithAttributes.
func (mr *KeycloakClientMockRecorder) GetRolesWithAttributes(accessToken, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolesWithAttributes", reflect.TypeOf((*KeycloakClient)(nil).GetRolesWithAttributes), accessToken, realmName)
}

// GetUser mocks base method.
func (m *KeycloakClient) GetUser(accessToken, realmName, userID string) (keycloak.UserRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", accessToken, realmName, userID)
	ret0, _ := ret[0].(keycloak.UserRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *KeycloakClientMockRecorder) GetUser(accessToken, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*KeycloakClient)(nil).GetUser), accessToken, realmName, userID)
}

// GetUsers mocks base method.
func (m *KeycloakClient) GetUsers(accessToken, reqRealmName, targetRealmName string, paramKV ...string) (keycloak.UsersPageRepresentation, error) {
	m.ctrl.T.Helper()
	varargs := []any{accessToken, reqRealmName, targetRealmName}
	for _, a := range paramKV {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsers", varargs...)
	ret0, _ := ret[0].(keycloak.UsersPageRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *KeycloakClientMockRecorder) GetUsers(accessToken, reqRealmName, targetRealmName any, paramKV ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{accessToken, reqRealmName, targetRealmName}, paramKV...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*KeycloakClient)(nil).GetUsers), varargs...)
}

// LinkShadowUser mocks base method.
func (m *KeycloakClient) LinkShadowUser(accessToken, realmName, userID, provider string, fedID keycloak.FederatedIdentityRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkShadowUser", accessToken, realmName, userID, provider, fedID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkShadowUser indicates an expected call of LinkShadowUser.
func (mr *KeycloakClientMockRecorder) LinkShadowUser(accessToken, realmName, userID, provider, fedID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkShadowUser", reflect.TypeOf((*KeycloakClient)(nil).LinkShadowUser), accessToken, realmName, userID, provider, fedID)
}

// RemoveClientRole mocks base method.
func (m *KeycloakClient) RemoveClientRole(accessToken, realmName, groupID, clientID string, role []keycloak.RoleRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveClientRole", accessToken, realmName, groupID, clientID, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveClientRole indicates an expected call of RemoveClientRole.
func (mr *KeycloakClientMockRecorder) RemoveClientRole(accessToken, realmName, groupID, clientID, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveClientRole", reflect.TypeOf((*KeycloakClient)(nil).RemoveClientRole), accessToken, realmName, groupID, clientID, role)
}

// ResetPapercardFailures mocks base method.
func (m *KeycloakClient) ResetPapercardFailures(accessToken, realmName, userID, credentialID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPapercardFailures", accessToken, realmName, userID, credentialID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPapercardFailures indicates an expected call of ResetPapercardFailures.
func (mr *KeycloakClientMockRecorder) ResetPapercardFailures(accessToken, realmName, userID, credentialID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPapercardFailures", reflect.TypeOf((*KeycloakClient)(nil).ResetPapercardFailures), accessToken, realmName, userID, credentialID)
}

// ResetPassword mocks base method.
func (m *KeycloakClient) ResetPassword(accessToken, realmName, userID string, cred keycloak.CredentialRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", accessToken, realmName, userID, cred)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *KeycloakClientMockRecorder) ResetPassword(accessToken, realmName, userID, cred any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*KeycloakClient)(nil).ResetPassword), accessToken, realmName, userID, cred)
}

// SendReminderEmail mocks base method.
func (m *KeycloakClient) SendReminderEmail(accessToken, realmName, userID string, paramKV ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{accessToken, realmName, userID}
	for _, a := range paramKV {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendReminderEmail", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendReminderEmail indicates an expected call of SendReminderEmail.
func (mr *KeycloakClientMockRecorder) SendReminderEmail(accessToken, realmName, userID any, paramKV ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{accessToken, realmName, userID}, paramKV...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendReminderEmail", reflect.TypeOf((*KeycloakClient)(nil).SendReminderEmail), varargs...)
}

// SendSmsCode mocks base method.
func (m *KeycloakClient) SendSmsCode(accessToken, realmName, userID string) (keycloak.SmsCodeRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSmsCode", accessToken, realmName, userID)
	ret0, _ := ret[0].(keycloak.SmsCodeRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendSmsCode indicates an expected call of SendSmsCode.
func (mr *KeycloakClientMockRecorder) SendSmsCode(accessToken, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSmsCode", reflect.TypeOf((*KeycloakClient)(nil).SendSmsCode), accessToken, realmName, userID)
}

// UnlinkShadowUser mocks base method.
func (m *KeycloakClient) UnlinkShadowUser(accessToken, realmName, userID, provider string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlinkShadowUser", accessToken, realmName, userID, provider)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlinkShadowUser indicates an expected call of UnlinkShadowUser.
func (mr *KeycloakClientMockRecorder) UnlinkShadowUser(accessToken, realmName, userID, provider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlinkShadowUser", reflect.TypeOf((*KeycloakClient)(nil).UnlinkShadowUser), accessToken, realmName, userID, provider)
}

// UpdateLabelCredential mocks base method.
func (m *KeycloakClient) UpdateLabelCredential(accessToken, realmName, userID, credentialID, label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLabelCredential", accessToken, realmName, userID, credentialID, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLabelCredential indicates an expected call of UpdateLabelCredential.
func (mr *KeycloakClientMockRecorder) UpdateLabelCredential(accessToken, realmName, userID, credentialID, label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLabelCredential", reflect.TypeOf((*KeycloakClient)(nil).UpdateLabelCredential), accessToken, realmName, userID, credentialID, label)
}

// UpdateRole mocks base method.
func (m *KeycloakClient) UpdateRole(accessToken, realmName, roleID string, role keycloak.RoleRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", accessToken, realmName, roleID, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *KeycloakClientMockRecorder) UpdateRole(accessToken, realmName, roleID, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*KeycloakClient)(nil).UpdateRole), accessToken, realmName, roleID, role)
}

// UpdateUser mocks base method.
func (m *KeycloakClient) UpdateUser(accessToken, realmName, userID string, user keycloak.UserRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", accessToken, realmName, userID, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *KeycloakClientMockRecorder) UpdateUser(accessToken, realmName, userID, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*KeycloakClient)(nil).UpdateUser), accessToken, realmName, userID, user)
}

// OnboardingModule is a mock of OnboardingModule interface.
type OnboardingModule struct {
	ctrl     *gomock.Controller
	recorder *OnboardingModuleMockRecorder
	isgomock struct{}
}

// OnboardingModuleMockRecorder is the mock recorder for OnboardingModule.
type OnboardingModuleMockRecorder struct {
	mock *OnboardingModule
}

// NewOnboardingModule creates a new mock instance.
func NewOnboardingModule(ctrl *gomock.Controller) *OnboardingModule {
	mock := &OnboardingModule{ctrl: ctrl}
	mock.recorder = &OnboardingModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *OnboardingModule) EXPECT() *OnboardingModuleMockRecorder {
	return m.recorder
}

// ComputeOnboardingRedirectURI mocks base method.
func (m *OnboardingModule) ComputeOnboardingRedirectURI(ctx context.Context, targetRealmName, customerRealmName string, realmConf configuration.RealmConfiguration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeOnboardingRedirectURI", ctx, targetRealmName, customerRealmName, realmConf)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeOnboardingRedirectURI indicates an expected call of ComputeOnboardingRedirectURI.
func (mr *OnboardingModuleMockRecorder) ComputeOnboardingRedirectURI(ctx, targetRealmName, customerRealmName, realmConf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeOnboardingRedirectURI", reflect.TypeOf((*OnboardingModule)(nil).ComputeOnboardingRedirectURI), ctx, targetRealmName, customerRealmName, realmConf)
}

// CreateUser mocks base method.
func (m *OnboardingModule) CreateUser(ctx context.Context, accessToken, realmName, targetRealmName string, kcUser *keycloak.UserRepresentation, generateNameID bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, accessToken, realmName, targetRealmName, kcUser, generateNameID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *OnboardingModuleMockRecorder) CreateUser(ctx, accessToken, realmName, targetRealmName, kcUser, generateNameID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*OnboardingModule)(nil).CreateUser), ctx, accessToken, realmName, targetRealmName, kcUser, generateNameID)
}

// OnboardingAlreadyCompleted mocks base method.
func (m *OnboardingModule) OnboardingAlreadyCompleted(arg0 keycloak.UserRepresentation) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnboardingAlreadyCompleted", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnboardingAlreadyCompleted indicates an expected call of OnboardingAlreadyCompleted.
func (mr *OnboardingModuleMockRecorder) OnboardingAlreadyCompleted(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnboardingAlreadyCompleted", reflect.TypeOf((*OnboardingModule)(nil).OnboardingAlreadyCompleted), arg0)
}

// ProcessAlreadyExistingUserCases mocks base method.
func (m *OnboardingModule) ProcessAlreadyExistingUserCases(ctx context.Context, accessToken, targetRealmName, userEmail, requestingSource string, handler func(string, int64, *string) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessAlreadyExistingUserCases", ctx, accessToken, targetRealmName, userEmail, requestingSource, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessAlreadyExistingUserCases indicates an expected call of ProcessAlreadyExistingUserCases.
func (mr *OnboardingModuleMockRecorder) ProcessAlreadyExistingUserCases(ctx, accessToken, targetRealmName, userEmail, requestingSource, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessAlreadyExistingUserCases", reflect.TypeOf((*OnboardingModule)(nil).ProcessAlreadyExistingUserCases), ctx, accessToken, targetRealmName, userEmail, requestingSource, handler)
}

// SendOnboardingEmail mocks base method.
func (m *OnboardingModule) SendOnboardingEmail(ctx context.Context, accessToken, realmName, userID, username, onboardingClientID, onboardingRedirectURI, themeRealmName string, reminder bool, paramKV ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, accessToken, realmName, userID, username, onboardingClientID, onboardingRedirectURI, themeRealmName, reminder}
	for _, a := range paramKV {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendOnboardingEmail", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOnboardingEmail indicates an expected call of SendOnboardingEmail.
func (mr *OnboardingModuleMockRecorder) SendOnboardingEmail(ctx, accessToken, realmName, userID, username, onboardingClientID, onboardingRedirectURI, themeRealmName, reminder any, paramKV ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, accessToken, realmName, userID, username, onboardingClientID, onboardingRedirectURI, themeRealmName, reminder}, paramKV...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOnboardingEmail", reflect.TypeOf((*OnboardingModule)(nil).SendOnboardingEmail), varargs...)
}

// UserProfileCache is a mock of UserProfileCache interface.
type UserProfileCache struct {
	ctrl     *gomock.Controller
	recorder *UserProfileCacheMockRecorder
	isgomock struct{}
}

// UserProfileCacheMockRecorder is the mock recorder for UserProfileCache.
type UserProfileCacheMockRecorder struct {
	mock *UserProfileCache
}

// NewUserProfileCache creates a new mock instance.
func NewUserProfileCache(ctrl *gomock.Controller) *UserProfileCache {
	mock := &UserProfileCache{ctrl: ctrl}
	mock.recorder = &UserProfileCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *UserProfileCache) EXPECT() *UserProfileCacheMockRecorder {
	return m.recorder
}

// GetRealmUserProfile mocks base method.
func (m *UserProfileCache) GetRealmUserProfile(ctx context.Context, realmName string) (keycloak.UserProfileRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealmUserProfile", ctx, realmName)
	ret0, _ := ret[0].(keycloak.UserProfileRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealmUserProfile indicates an expected call of GetRealmUserProfile.
func (mr *UserProfileCacheMockRecorder) GetRealmUserProfile(ctx, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealmUserProfile", reflect.TypeOf((*UserProfileCache)(nil).GetRealmUserProfile), ctx, realmName)
}
