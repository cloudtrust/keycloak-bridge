// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/common-service/v2/database/sqltypes (interfaces: Transaction)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/database.go -package=mock -mock_names=Transaction=Transaction github.com/cloudtrust/common-service/v2/database/sqltypes Transaction
//

// Package mock is a generated GoMock package.
package mock

import (
	sql "database/sql"
	reflect "reflect"

	sqltypes "github.com/cloudtrust/common-service/v2/database/sqltypes"
	gomock "go.uber.org/mock/gomock"
)

// Transaction is a mock of Transaction interface.
type Transaction struct {
	ctrl     *gomock.Controller
	recorder *TransactionMockRecorder
	isgomock struct{}
}

// TransactionMockRecorder is the mock recorder for Transaction.
type TransactionMockRecorder struct {
	mock *Transaction
}

// NewTransaction creates a new mock instance.
func NewTransaction(ctrl *gomock.Controller) *Transaction {
	mock := &Transaction{ctrl: ctrl}
	mock.recorder = &TransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Transaction) EXPECT() *TransactionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *Transaction) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *TransactionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*Transaction)(nil).Close))
}

// Commit mocks base method.
func (m *Transaction) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *TransactionMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*Transaction)(nil).Commit))
}

// Exec mocks base method.
func (m *Transaction) Exec(query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *TransactionMockRecorder) Exec(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*Transaction)(nil).Exec), varargs...)
}

// Query mocks base method.
func (m *Transaction) Query(query string, args ...any) (sqltypes.SQLRows, error) {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(sqltypes.SQLRows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *TransactionMockRecorder) Query(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*Transaction)(nil).Query), varargs...)
}

// QueryRow mocks base method.
func (m *Transaction) QueryRow(query string, args ...any) sqltypes.SQLRow {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(sqltypes.SQLRow)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *TransactionMockRecorder) QueryRow(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*Transaction)(nil).QueryRow), varargs...)
}

// Rollback mocks base method.
func (m *Transaction) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *TransactionMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*Transaction)(nil).Rollback))
}
