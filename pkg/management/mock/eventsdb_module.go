// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-bridge/pkg/event (interfaces: EventsDBModule)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// EventsDBModule is a mock of EventsDBModule interface
type EventsDBModule struct {
	ctrl     *gomock.Controller
	recorder *EventsDBModuleMockRecorder
}

// EventsDBModuleMockRecorder is the mock recorder for EventsDBModule
type EventsDBModuleMockRecorder struct {
	mock *EventsDBModule
}

// NewEventsDBModule creates a new mock instance
func NewEventsDBModule(ctrl *gomock.Controller) *EventsDBModule {
	mock := &EventsDBModule{ctrl: ctrl}
	mock.recorder = &EventsDBModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *EventsDBModule) EXPECT() *EventsDBModuleMockRecorder {
	return m.recorder
}

// Store mocks base method
func (m *EventsDBModule) Store(arg0 context.Context, arg1 map[string]string) error {
	ret := m.ctrl.Call(m, "Store", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store
func (mr *EventsDBModuleMockRecorder) Store(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*EventsDBModule)(nil).Store), arg0, arg1)
}
