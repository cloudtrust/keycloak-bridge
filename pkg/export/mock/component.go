// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-bridge/pkg/export (interfaces: Component)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Component is a mock of Component interface
type Component struct {
	ctrl     *gomock.Controller
	recorder *ComponentMockRecorder
}

// ComponentMockRecorder is the mock recorder for Component
type ComponentMockRecorder struct {
	mock *Component
}

// NewComponent creates a new mock instance
func NewComponent(ctrl *gomock.Controller) *Component {
	mock := &Component{ctrl: ctrl}
	mock.recorder = &ComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Component) EXPECT() *ComponentMockRecorder {
	return m.recorder
}

// Export mocks base method
func (m *Component) Export(arg0 context.Context) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "Export", arg0)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Export indicates an expected call of Export
func (mr *ComponentMockRecorder) Export(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Export", reflect.TypeOf((*Component)(nil).Export), arg0)
}

// StoreAndExport mocks base method
func (m *Component) StoreAndExport(arg0 context.Context) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "StoreAndExport", arg0)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreAndExport indicates an expected call of StoreAndExport
func (mr *ComponentMockRecorder) StoreAndExport(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAndExport", reflect.TypeOf((*Component)(nil).StoreAndExport), arg0)
}
