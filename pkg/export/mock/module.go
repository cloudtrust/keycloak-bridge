// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-bridge/pkg/export (interfaces: RealmExporter,Storage)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	keycloak_client "github.com/cloudtrust/keycloak-client"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// RealmExporter is a mock of RealmExporter interface
type RealmExporter struct {
	ctrl     *gomock.Controller
	recorder *RealmExporterMockRecorder
}

// RealmExporterMockRecorder is the mock recorder for RealmExporter
type RealmExporterMockRecorder struct {
	mock *RealmExporter
}

// NewRealmExporter creates a new mock instance
func NewRealmExporter(ctrl *gomock.Controller) *RealmExporter {
	mock := &RealmExporter{ctrl: ctrl}
	mock.recorder = &RealmExporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *RealmExporter) EXPECT() *RealmExporterMockRecorder {
	return m.recorder
}

// ExportRealm mocks base method
func (m *RealmExporter) ExportRealm(arg0 context.Context, arg1 string) (keycloak_client.RealmRepresentation, error) {
	ret := m.ctrl.Call(m, "ExportRealm", arg0, arg1)
	ret0, _ := ret[0].(keycloak_client.RealmRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportRealm indicates an expected call of ExportRealm
func (mr *RealmExporterMockRecorder) ExportRealm(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportRealm", reflect.TypeOf((*RealmExporter)(nil).ExportRealm), arg0, arg1)
}

// GetRealms mocks base method
func (m *RealmExporter) GetRealms(arg0 context.Context) ([]string, error) {
	ret := m.ctrl.Call(m, "GetRealms", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealms indicates an expected call of GetRealms
func (mr *RealmExporterMockRecorder) GetRealms(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealms", reflect.TypeOf((*RealmExporter)(nil).GetRealms), arg0)
}

// Storage is a mock of Storage interface
type Storage struct {
	ctrl     *gomock.Controller
	recorder *StorageMockRecorder
}

// StorageMockRecorder is the mock recorder for Storage
type StorageMockRecorder struct {
	mock *Storage
}

// NewStorage creates a new mock instance
func NewStorage(ctrl *gomock.Controller) *Storage {
	mock := &Storage{ctrl: ctrl}
	mock.recorder = &StorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Storage) EXPECT() *StorageMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *Storage) Read(arg0, arg1 string) ([]byte, error) {
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *StorageMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*Storage)(nil).Read), arg0, arg1)
}

// Save mocks base method
func (m *Storage) Save(arg0, arg1 string, arg2 []byte) error {
	ret := m.ctrl.Call(m, "Save", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *StorageMockRecorder) Save(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*Storage)(nil).Save), arg0, arg1, arg2)
}
