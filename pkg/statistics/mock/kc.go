// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-bridge/pkg/statistics (interfaces: KeycloakClient)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/kc.go -package=mock -mock_names=KeycloakClient=KcClient github.com/cloudtrust/keycloak-bridge/pkg/statistics KeycloakClient
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	keycloak "github.com/cloudtrust/keycloak-client/v2"
	gomock "go.uber.org/mock/gomock"
)

// KcClient is a mock of KeycloakClient interface.
type KcClient struct {
	ctrl     *gomock.Controller
	recorder *KcClientMockRecorder
	isgomock struct{}
}

// KcClientMockRecorder is the mock recorder for KcClient.
type KcClientMockRecorder struct {
	mock *KcClient
}

// NewKcClient creates a new mock instance.
func NewKcClient(ctrl *gomock.Controller) *KcClient {
	mock := &KcClient{ctrl: ctrl}
	mock.recorder = &KcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *KcClient) EXPECT() *KcClientMockRecorder {
	return m.recorder
}

// GetStatisticsAuthenticators mocks base method.
func (m *KcClient) GetStatisticsAuthenticators(accessToken, realmName string) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatisticsAuthenticators", accessToken, realmName)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatisticsAuthenticators indicates an expected call of GetStatisticsAuthenticators.
func (mr *KcClientMockRecorder) GetStatisticsAuthenticators(accessToken, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatisticsAuthenticators", reflect.TypeOf((*KcClient)(nil).GetStatisticsAuthenticators), accessToken, realmName)
}

// GetStatisticsUsers mocks base method.
func (m *KcClient) GetStatisticsUsers(accessToken, realmName string) (keycloak.StatisticsUsersRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatisticsUsers", accessToken, realmName)
	ret0, _ := ret[0].(keycloak.StatisticsUsersRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatisticsUsers indicates an expected call of GetStatisticsUsers.
func (mr *KcClientMockRecorder) GetStatisticsUsers(accessToken, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatisticsUsers", reflect.TypeOf((*KcClient)(nil).GetStatisticsUsers), accessToken, realmName)
}

// GetUsers mocks base method.
func (m *KcClient) GetUsers(accessToken, reqRealmName, targetRealmName string, paramKV ...string) (keycloak.UsersPageRepresentation, error) {
	m.ctrl.T.Helper()
	varargs := []any{accessToken, reqRealmName, targetRealmName}
	for _, a := range paramKV {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsers", varargs...)
	ret0, _ := ret[0].(keycloak.UsersPageRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *KcClientMockRecorder) GetUsers(accessToken, reqRealmName, targetRealmName any, paramKV ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{accessToken, reqRealmName, targetRealmName}, paramKV...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*KcClient)(nil).GetUsers), varargs...)
}
