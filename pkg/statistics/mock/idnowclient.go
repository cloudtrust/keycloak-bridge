// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-bridge/internal/keycloakb/idnowclient (interfaces: IdnowServiceClient)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/idnowclient.go -package=mock -mock_names=IdnowServiceClient=IdnowServiceClient github.com/cloudtrust/keycloak-bridge/internal/keycloakb/idnowclient IdnowServiceClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	idnowclient "github.com/cloudtrust/keycloak-bridge/internal/keycloakb/idnowclient"
	gomock "go.uber.org/mock/gomock"
)

// IdnowServiceClient is a mock of IdnowServiceClient interface.
type IdnowServiceClient struct {
	ctrl     *gomock.Controller
	recorder *IdnowServiceClientMockRecorder
	isgomock struct{}
}

// IdnowServiceClientMockRecorder is the mock recorder for IdnowServiceClient.
type IdnowServiceClientMockRecorder struct {
	mock *IdnowServiceClient
}

// NewIdnowServiceClient creates a new mock instance.
func NewIdnowServiceClient(ctrl *gomock.Controller) *IdnowServiceClient {
	mock := &IdnowServiceClient{ctrl: ctrl}
	mock.recorder = &IdnowServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *IdnowServiceClient) EXPECT() *IdnowServiceClientMockRecorder {
	return m.recorder
}

// GetIdentificationsByType mocks base method.
func (m *IdnowServiceClient) GetIdentificationsByType(ctx context.Context, realm string) (idnowclient.IdentificationStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentificationsByType", ctx, realm)
	ret0, _ := ret[0].(idnowclient.IdentificationStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentificationsByType indicates an expected call of GetIdentificationsByType.
func (mr *IdnowServiceClientMockRecorder) GetIdentificationsByType(ctx, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentificationsByType", reflect.TypeOf((*IdnowServiceClient)(nil).GetIdentificationsByType), ctx, realm)
}
