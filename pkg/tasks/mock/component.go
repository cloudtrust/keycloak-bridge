// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-bridge/pkg/tasks (interfaces: Component,KeycloakClient)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/component.go -package=mock -mock_names=Component=Component,KeycloakClient=KeycloakClient github.com/cloudtrust/keycloak-bridge/pkg/tasks Component,KeycloakClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	keycloak "github.com/cloudtrust/keycloak-client/v2"
	gomock "go.uber.org/mock/gomock"
)

// Component is a mock of Component interface.
type Component struct {
	ctrl     *gomock.Controller
	recorder *ComponentMockRecorder
	isgomock struct{}
}

// ComponentMockRecorder is the mock recorder for Component.
type ComponentMockRecorder struct {
	mock *Component
}

// NewComponent creates a new mock instance.
func NewComponent(ctrl *gomock.Controller) *Component {
	mock := &Component{ctrl: ctrl}
	mock.recorder = &ComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Component) EXPECT() *ComponentMockRecorder {
	return m.recorder
}

// CleanUpAccordingToExpiredTermsOfUseAcceptance mocks base method.
func (m *Component) CleanUpAccordingToExpiredTermsOfUseAcceptance(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanUpAccordingToExpiredTermsOfUseAcceptance", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanUpAccordingToExpiredTermsOfUseAcceptance indicates an expected call of CleanUpAccordingToExpiredTermsOfUseAcceptance.
func (mr *ComponentMockRecorder) CleanUpAccordingToExpiredTermsOfUseAcceptance(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUpAccordingToExpiredTermsOfUseAcceptance", reflect.TypeOf((*Component)(nil).CleanUpAccordingToExpiredTermsOfUseAcceptance), ctx)
}

// KeycloakClient is a mock of KeycloakClient interface.
type KeycloakClient struct {
	ctrl     *gomock.Controller
	recorder *KeycloakClientMockRecorder
	isgomock struct{}
}

// KeycloakClientMockRecorder is the mock recorder for KeycloakClient.
type KeycloakClientMockRecorder struct {
	mock *KeycloakClient
}

// NewKeycloakClient creates a new mock instance.
func NewKeycloakClient(ctrl *gomock.Controller) *KeycloakClient {
	mock := &KeycloakClient{ctrl: ctrl}
	mock.recorder = &KeycloakClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *KeycloakClient) EXPECT() *KeycloakClientMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method.
func (m *KeycloakClient) DeleteUser(accessToken, realmName, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", accessToken, realmName, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *KeycloakClientMockRecorder) DeleteUser(accessToken, realmName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*KeycloakClient)(nil).DeleteUser), accessToken, realmName, userID)
}

// GetExpiredTermsOfUseAcceptance mocks base method.
func (m *KeycloakClient) GetExpiredTermsOfUseAcceptance(accessToken string) ([]keycloak.DeletableUserRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpiredTermsOfUseAcceptance", accessToken)
	ret0, _ := ret[0].([]keycloak.DeletableUserRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpiredTermsOfUseAcceptance indicates an expected call of GetExpiredTermsOfUseAcceptance.
func (mr *KeycloakClientMockRecorder) GetExpiredTermsOfUseAcceptance(accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpiredTermsOfUseAcceptance", reflect.TypeOf((*KeycloakClient)(nil).GetExpiredTermsOfUseAcceptance), accessToken)
}
