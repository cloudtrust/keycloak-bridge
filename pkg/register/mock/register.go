// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-bridge/pkg/register (interfaces: Component,KeycloakClient,ConfigurationDBModule,ContextKeyManager,OnboardingModule,UserProfileCache)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/register.go -package=mock -mock_names=Component=Component,KeycloakClient=KeycloakClient,ConfigurationDBModule=ConfigurationDBModule,ContextKeyManager=ContextKeyManager,OnboardingModule=OnboardingModule,UserProfileCache=UserProfileCache github.com/cloudtrust/keycloak-bridge/pkg/register Component,KeycloakClient,ConfigurationDBModule,ContextKeyManager,OnboardingModule,UserProfileCache
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	configuration "github.com/cloudtrust/common-service/v2/configuration"
	apicommon "github.com/cloudtrust/keycloak-bridge/api/common"
	apiregister "github.com/cloudtrust/keycloak-bridge/api/register"
	keycloakb "github.com/cloudtrust/keycloak-bridge/internal/keycloakb"
	keycloak "github.com/cloudtrust/keycloak-client/v2"
	gomock "go.uber.org/mock/gomock"
)

// Component is a mock of Component interface.
type Component struct {
	ctrl     *gomock.Controller
	recorder *ComponentMockRecorder
	isgomock struct{}
}

// ComponentMockRecorder is the mock recorder for Component.
type ComponentMockRecorder struct {
	mock *Component
}

// NewComponent creates a new mock instance.
func NewComponent(ctrl *gomock.Controller) *Component {
	mock := &Component{ctrl: ctrl}
	mock.recorder = &ComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Component) EXPECT() *ComponentMockRecorder {
	return m.recorder
}

// GetConfiguration mocks base method.
func (m *Component) GetConfiguration(ctx context.Context, realmName string) (apiregister.ConfigurationRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguration", ctx, realmName)
	ret0, _ := ret[0].(apiregister.ConfigurationRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguration indicates an expected call of GetConfiguration.
func (mr *ComponentMockRecorder) GetConfiguration(ctx, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguration", reflect.TypeOf((*Component)(nil).GetConfiguration), ctx, realmName)
}

// GetUserProfile mocks base method.
func (m *Component) GetUserProfile(ctx context.Context, realmName string) (apicommon.ProfileRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", ctx, realmName)
	ret0, _ := ret[0].(apicommon.ProfileRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *ComponentMockRecorder) GetUserProfile(ctx, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*Component)(nil).GetUserProfile), ctx, realmName)
}

// RegisterUser mocks base method.
func (m *Component) RegisterUser(ctx context.Context, targetRealmName, customerRealmName string, user apiregister.UserRepresentation, contextKey *string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, targetRealmName, customerRealmName, user, contextKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *ComponentMockRecorder) RegisterUser(ctx, targetRealmName, customerRealmName, user, contextKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*Component)(nil).RegisterUser), ctx, targetRealmName, customerRealmName, user, contextKey)
}

// KeycloakClient is a mock of KeycloakClient interface.
type KeycloakClient struct {
	ctrl     *gomock.Controller
	recorder *KeycloakClientMockRecorder
	isgomock struct{}
}

// KeycloakClientMockRecorder is the mock recorder for KeycloakClient.
type KeycloakClientMockRecorder struct {
	mock *KeycloakClient
}

// NewKeycloakClient creates a new mock instance.
func NewKeycloakClient(ctrl *gomock.Controller) *KeycloakClient {
	mock := &KeycloakClient{ctrl: ctrl}
	mock.recorder = &KeycloakClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *KeycloakClient) EXPECT() *KeycloakClientMockRecorder {
	return m.recorder
}

// GetGroups mocks base method.
func (m *KeycloakClient) GetGroups(accessToken, realmName string) ([]keycloak.GroupRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", accessToken, realmName)
	ret0, _ := ret[0].([]keycloak.GroupRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *KeycloakClientMockRecorder) GetGroups(accessToken, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*KeycloakClient)(nil).GetGroups), accessToken, realmName)
}

// GetRealm mocks base method.
func (m *KeycloakClient) GetRealm(accessToken, realmName string) (keycloak.RealmRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealm", accessToken, realmName)
	ret0, _ := ret[0].(keycloak.RealmRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealm indicates an expected call of GetRealm.
func (mr *KeycloakClientMockRecorder) GetRealm(accessToken, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealm", reflect.TypeOf((*KeycloakClient)(nil).GetRealm), accessToken, realmName)
}

// SendEmail mocks base method.
func (m *KeycloakClient) SendEmail(accessToken, reqRealmName, realmName string, emailRep keycloak.EmailRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", accessToken, reqRealmName, realmName, emailRep)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *KeycloakClientMockRecorder) SendEmail(accessToken, reqRealmName, realmName, emailRep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*KeycloakClient)(nil).SendEmail), accessToken, reqRealmName, realmName, emailRep)
}

// ConfigurationDBModule is a mock of ConfigurationDBModule interface.
type ConfigurationDBModule struct {
	ctrl     *gomock.Controller
	recorder *ConfigurationDBModuleMockRecorder
	isgomock struct{}
}

// ConfigurationDBModuleMockRecorder is the mock recorder for ConfigurationDBModule.
type ConfigurationDBModuleMockRecorder struct {
	mock *ConfigurationDBModule
}

// NewConfigurationDBModule creates a new mock instance.
func NewConfigurationDBModule(ctrl *gomock.Controller) *ConfigurationDBModule {
	mock := &ConfigurationDBModule{ctrl: ctrl}
	mock.recorder = &ConfigurationDBModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ConfigurationDBModule) EXPECT() *ConfigurationDBModuleMockRecorder {
	return m.recorder
}

// GetConfiguration mocks base method.
func (m *ConfigurationDBModule) GetConfiguration(arg0 context.Context, arg1 string) (configuration.RealmConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguration", arg0, arg1)
	ret0, _ := ret[0].(configuration.RealmConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguration indicates an expected call of GetConfiguration.
func (mr *ConfigurationDBModuleMockRecorder) GetConfiguration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguration", reflect.TypeOf((*ConfigurationDBModule)(nil).GetConfiguration), arg0, arg1)
}

// GetConfigurations mocks base method.
func (m *ConfigurationDBModule) GetConfigurations(arg0 context.Context, arg1 string) (configuration.RealmConfiguration, configuration.RealmAdminConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigurations", arg0, arg1)
	ret0, _ := ret[0].(configuration.RealmConfiguration)
	ret1, _ := ret[1].(configuration.RealmAdminConfiguration)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetConfigurations indicates an expected call of GetConfigurations.
func (mr *ConfigurationDBModuleMockRecorder) GetConfigurations(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurations", reflect.TypeOf((*ConfigurationDBModule)(nil).GetConfigurations), arg0, arg1)
}

// ContextKeyManager is a mock of ContextKeyManager interface.
type ContextKeyManager struct {
	ctrl     *gomock.Controller
	recorder *ContextKeyManagerMockRecorder
	isgomock struct{}
}

// ContextKeyManagerMockRecorder is the mock recorder for ContextKeyManager.
type ContextKeyManagerMockRecorder struct {
	mock *ContextKeyManager
}

// NewContextKeyManager creates a new mock instance.
func NewContextKeyManager(ctrl *gomock.Controller) *ContextKeyManager {
	mock := &ContextKeyManager{ctrl: ctrl}
	mock.recorder = &ContextKeyManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ContextKeyManager) EXPECT() *ContextKeyManagerMockRecorder {
	return m.recorder
}

// GetContextByRegistrationRealm mocks base method.
func (m *ContextKeyManager) GetContextByRegistrationRealm(realm string) (keycloakb.ContextKeyParameters, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContextByRegistrationRealm", realm)
	ret0, _ := ret[0].(keycloakb.ContextKeyParameters)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetContextByRegistrationRealm indicates an expected call of GetContextByRegistrationRealm.
func (mr *ContextKeyManagerMockRecorder) GetContextByRegistrationRealm(realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContextByRegistrationRealm", reflect.TypeOf((*ContextKeyManager)(nil).GetContextByRegistrationRealm), realm)
}

// GetOverride mocks base method.
func (m *ContextKeyManager) GetOverride(realm, contextKey string) (keycloakb.ContextKeyParameters, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOverride", realm, contextKey)
	ret0, _ := ret[0].(keycloakb.ContextKeyParameters)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetOverride indicates an expected call of GetOverride.
func (mr *ContextKeyManagerMockRecorder) GetOverride(realm, contextKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOverride", reflect.TypeOf((*ContextKeyManager)(nil).GetOverride), realm, contextKey)
}

// OnboardingModule is a mock of OnboardingModule interface.
type OnboardingModule struct {
	ctrl     *gomock.Controller
	recorder *OnboardingModuleMockRecorder
	isgomock struct{}
}

// OnboardingModuleMockRecorder is the mock recorder for OnboardingModule.
type OnboardingModuleMockRecorder struct {
	mock *OnboardingModule
}

// NewOnboardingModule creates a new mock instance.
func NewOnboardingModule(ctrl *gomock.Controller) *OnboardingModule {
	mock := &OnboardingModule{ctrl: ctrl}
	mock.recorder = &OnboardingModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *OnboardingModule) EXPECT() *OnboardingModuleMockRecorder {
	return m.recorder
}

// ComputeOnboardingRedirectURI mocks base method.
func (m *OnboardingModule) ComputeOnboardingRedirectURI(ctx context.Context, targetRealmName, customerRealmName string, realmConf configuration.RealmConfiguration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeOnboardingRedirectURI", ctx, targetRealmName, customerRealmName, realmConf)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeOnboardingRedirectURI indicates an expected call of ComputeOnboardingRedirectURI.
func (mr *OnboardingModuleMockRecorder) ComputeOnboardingRedirectURI(ctx, targetRealmName, customerRealmName, realmConf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeOnboardingRedirectURI", reflect.TypeOf((*OnboardingModule)(nil).ComputeOnboardingRedirectURI), ctx, targetRealmName, customerRealmName, realmConf)
}

// ComputeRedirectURI mocks base method.
func (m *OnboardingModule) ComputeRedirectURI(ctx context.Context, accessToken, realmName, userID, username, onboardingClientID, onboardingRedirectURI string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeRedirectURI", ctx, accessToken, realmName, userID, username, onboardingClientID, onboardingRedirectURI)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeRedirectURI indicates an expected call of ComputeRedirectURI.
func (mr *OnboardingModuleMockRecorder) ComputeRedirectURI(ctx, accessToken, realmName, userID, username, onboardingClientID, onboardingRedirectURI any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeRedirectURI", reflect.TypeOf((*OnboardingModule)(nil).ComputeRedirectURI), ctx, accessToken, realmName, userID, username, onboardingClientID, onboardingRedirectURI)
}

// CreateUser mocks base method.
func (m *OnboardingModule) CreateUser(ctx context.Context, accessToken, realmName, targetRealmName string, kcUser *keycloak.UserRepresentation, generateNameID bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, accessToken, realmName, targetRealmName, kcUser, generateNameID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *OnboardingModuleMockRecorder) CreateUser(ctx, accessToken, realmName, targetRealmName, kcUser, generateNameID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*OnboardingModule)(nil).CreateUser), ctx, accessToken, realmName, targetRealmName, kcUser, generateNameID)
}

// ProcessAlreadyExistingUserCases mocks base method.
func (m *OnboardingModule) ProcessAlreadyExistingUserCases(ctx context.Context, accessToken, targetRealmName, userEmail, requestingSource string, handler func(string, int64, *string) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessAlreadyExistingUserCases", ctx, accessToken, targetRealmName, userEmail, requestingSource, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessAlreadyExistingUserCases indicates an expected call of ProcessAlreadyExistingUserCases.
func (mr *OnboardingModuleMockRecorder) ProcessAlreadyExistingUserCases(ctx, accessToken, targetRealmName, userEmail, requestingSource, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessAlreadyExistingUserCases", reflect.TypeOf((*OnboardingModule)(nil).ProcessAlreadyExistingUserCases), ctx, accessToken, targetRealmName, userEmail, requestingSource, handler)
}

// SendOnboardingEmail mocks base method.
func (m *OnboardingModule) SendOnboardingEmail(ctx context.Context, accessToken, realmName, userID, username, onboardingClientID, onboardingRedirectURI, themeRealmName string, reminder bool, paramKV ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, accessToken, realmName, userID, username, onboardingClientID, onboardingRedirectURI, themeRealmName, reminder}
	for _, a := range paramKV {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendOnboardingEmail", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOnboardingEmail indicates an expected call of SendOnboardingEmail.
func (mr *OnboardingModuleMockRecorder) SendOnboardingEmail(ctx, accessToken, realmName, userID, username, onboardingClientID, onboardingRedirectURI, themeRealmName, reminder any, paramKV ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, accessToken, realmName, userID, username, onboardingClientID, onboardingRedirectURI, themeRealmName, reminder}, paramKV...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOnboardingEmail", reflect.TypeOf((*OnboardingModule)(nil).SendOnboardingEmail), varargs...)
}

// UserProfileCache is a mock of UserProfileCache interface.
type UserProfileCache struct {
	ctrl     *gomock.Controller
	recorder *UserProfileCacheMockRecorder
	isgomock struct{}
}

// UserProfileCacheMockRecorder is the mock recorder for UserProfileCache.
type UserProfileCacheMockRecorder struct {
	mock *UserProfileCache
}

// NewUserProfileCache creates a new mock instance.
func NewUserProfileCache(ctrl *gomock.Controller) *UserProfileCache {
	mock := &UserProfileCache{ctrl: ctrl}
	mock.recorder = &UserProfileCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *UserProfileCache) EXPECT() *UserProfileCacheMockRecorder {
	return m.recorder
}

// GetRealmUserProfile mocks base method.
func (m *UserProfileCache) GetRealmUserProfile(ctx context.Context, realmName string) (keycloak.UserProfileRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealmUserProfile", ctx, realmName)
	ret0, _ := ret[0].(keycloak.UserProfileRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealmUserProfile indicates an expected call of GetRealmUserProfile.
func (mr *UserProfileCacheMockRecorder) GetRealmUserProfile(ctx, realmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealmUserProfile", reflect.TypeOf((*UserProfileCache)(nil).GetRealmUserProfile), ctx, realmName)
}
