// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-bridge/pkg/communications (interfaces: KeycloakCommunicationsClient,Component)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/keycloak_communications_client.go -package=mock -mock_names=KeycloakCommunicationsClient=KeycloakCommunicationsClient,Component=Component github.com/cloudtrust/keycloak-bridge/pkg/communications KeycloakCommunicationsClient,Component
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	apicommunications "github.com/cloudtrust/keycloak-bridge/api/communications"
	keycloak "github.com/cloudtrust/keycloak-client/v2"
	gomock "go.uber.org/mock/gomock"
)

// KeycloakCommunicationsClient is a mock of KeycloakCommunicationsClient interface.
type KeycloakCommunicationsClient struct {
	ctrl     *gomock.Controller
	recorder *KeycloakCommunicationsClientMockRecorder
	isgomock struct{}
}

// KeycloakCommunicationsClientMockRecorder is the mock recorder for KeycloakCommunicationsClient.
type KeycloakCommunicationsClientMockRecorder struct {
	mock *KeycloakCommunicationsClient
}

// NewKeycloakCommunicationsClient creates a new mock instance.
func NewKeycloakCommunicationsClient(ctrl *gomock.Controller) *KeycloakCommunicationsClient {
	mock := &KeycloakCommunicationsClient{ctrl: ctrl}
	mock.recorder = &KeycloakCommunicationsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *KeycloakCommunicationsClient) EXPECT() *KeycloakCommunicationsClientMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *KeycloakCommunicationsClient) SendEmail(accessToken, reqRealmName, realmName string, emailRep keycloak.EmailRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", accessToken, reqRealmName, realmName, emailRep)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *KeycloakCommunicationsClientMockRecorder) SendEmail(accessToken, reqRealmName, realmName, emailRep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*KeycloakCommunicationsClient)(nil).SendEmail), accessToken, reqRealmName, realmName, emailRep)
}

// SendEmailToUser mocks base method.
func (m *KeycloakCommunicationsClient) SendEmailToUser(accessToken, reqRealmName, realmName, userID string, emailRep keycloak.EmailRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmailToUser", accessToken, reqRealmName, realmName, userID, emailRep)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmailToUser indicates an expected call of SendEmailToUser.
func (mr *KeycloakCommunicationsClientMockRecorder) SendEmailToUser(accessToken, reqRealmName, realmName, userID, emailRep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailToUser", reflect.TypeOf((*KeycloakCommunicationsClient)(nil).SendEmailToUser), accessToken, reqRealmName, realmName, userID, emailRep)
}

// SendSMS mocks base method.
func (m *KeycloakCommunicationsClient) SendSMS(accessToken, realmName string, smsRep keycloak.SMSRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSMS", accessToken, realmName, smsRep)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSMS indicates an expected call of SendSMS.
func (mr *KeycloakCommunicationsClientMockRecorder) SendSMS(accessToken, realmName, smsRep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSMS", reflect.TypeOf((*KeycloakCommunicationsClient)(nil).SendSMS), accessToken, realmName, smsRep)
}

// Component is a mock of Component interface.
type Component struct {
	ctrl     *gomock.Controller
	recorder *ComponentMockRecorder
	isgomock struct{}
}

// ComponentMockRecorder is the mock recorder for Component.
type ComponentMockRecorder struct {
	mock *Component
}

// NewComponent creates a new mock instance.
func NewComponent(ctrl *gomock.Controller) *Component {
	mock := &Component{ctrl: ctrl}
	mock.recorder = &ComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Component) EXPECT() *ComponentMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *Component) SendEmail(ctx context.Context, realmName string, emailRep apicommunications.EmailRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", ctx, realmName, emailRep)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *ComponentMockRecorder) SendEmail(ctx, realmName, emailRep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*Component)(nil).SendEmail), ctx, realmName, emailRep)
}

// SendEmailToUser mocks base method.
func (m *Component) SendEmailToUser(ctx context.Context, realmName, userID string, emailRep apicommunications.EmailRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmailToUser", ctx, realmName, userID, emailRep)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmailToUser indicates an expected call of SendEmailToUser.
func (mr *ComponentMockRecorder) SendEmailToUser(ctx, realmName, userID, emailRep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailToUser", reflect.TypeOf((*Component)(nil).SendEmailToUser), ctx, realmName, userID, emailRep)
}

// SendSMS mocks base method.
func (m *Component) SendSMS(ctx context.Context, realmName string, smsRep apicommunications.SMSRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSMS", ctx, realmName, smsRep)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSMS indicates an expected call of SendSMS.
func (mr *ComponentMockRecorder) SendSMS(ctx, realmName, smsRep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSMS", reflect.TypeOf((*Component)(nil).SendSMS), ctx, realmName, smsRep)
}
