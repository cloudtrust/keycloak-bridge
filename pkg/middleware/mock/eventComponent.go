// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-bridge/pkg/event (interfaces: MuxComponent,Component,AdminComponent)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	fb "github.com/cloudtrust/keycloak-bridge/api/event/fb"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MuxComponent is a mock of MuxComponent interface
type MuxComponent struct {
	ctrl     *gomock.Controller
	recorder *MuxComponentMockRecorder
}

// MuxComponentMockRecorder is the mock recorder for MuxComponent
type MuxComponentMockRecorder struct {
	mock *MuxComponent
}

// NewMuxComponent creates a new mock instance
func NewMuxComponent(ctrl *gomock.Controller) *MuxComponent {
	mock := &MuxComponent{ctrl: ctrl}
	mock.recorder = &MuxComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MuxComponent) EXPECT() *MuxComponentMockRecorder {
	return m.recorder
}

// Event mocks base method
func (m *MuxComponent) Event(arg0 context.Context, arg1 string, arg2 []byte) error {
	ret := m.ctrl.Call(m, "Event", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Event indicates an expected call of Event
func (mr *MuxComponentMockRecorder) Event(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Event", reflect.TypeOf((*MuxComponent)(nil).Event), arg0, arg1, arg2)
}

// EventComponent is a mock of Component interface
type EventComponent struct {
	ctrl     *gomock.Controller
	recorder *EventComponentMockRecorder
}

// EventComponentMockRecorder is the mock recorder for EventComponent
type EventComponentMockRecorder struct {
	mock *EventComponent
}

// NewEventComponent creates a new mock instance
func NewEventComponent(ctrl *gomock.Controller) *EventComponent {
	mock := &EventComponent{ctrl: ctrl}
	mock.recorder = &EventComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *EventComponent) EXPECT() *EventComponentMockRecorder {
	return m.recorder
}

// Event mocks base method
func (m *EventComponent) Event(arg0 context.Context, arg1 *fb.Event) error {
	ret := m.ctrl.Call(m, "Event", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Event indicates an expected call of Event
func (mr *EventComponentMockRecorder) Event(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Event", reflect.TypeOf((*EventComponent)(nil).Event), arg0, arg1)
}

// AdminEventComponent is a mock of AdminComponent interface
type AdminEventComponent struct {
	ctrl     *gomock.Controller
	recorder *AdminEventComponentMockRecorder
}

// AdminEventComponentMockRecorder is the mock recorder for AdminEventComponent
type AdminEventComponentMockRecorder struct {
	mock *AdminEventComponent
}

// NewAdminEventComponent creates a new mock instance
func NewAdminEventComponent(ctrl *gomock.Controller) *AdminEventComponent {
	mock := &AdminEventComponent{ctrl: ctrl}
	mock.recorder = &AdminEventComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *AdminEventComponent) EXPECT() *AdminEventComponentMockRecorder {
	return m.recorder
}

// AdminEvent mocks base method
func (m *AdminEventComponent) AdminEvent(arg0 context.Context, arg1 *fb.AdminEvent) error {
	ret := m.ctrl.Call(m, "AdminEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminEvent indicates an expected call of AdminEvent
func (mr *AdminEventComponentMockRecorder) AdminEvent(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminEvent", reflect.TypeOf((*AdminEventComponent)(nil).AdminEvent), arg0, arg1)
}
