// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-kit/kit/log (interfaces: Logger)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Logger is a mock of Logger interface
type Logger struct {
	ctrl     *gomock.Controller
	recorder *LoggerMockRecorder
}

// LoggerMockRecorder is the mock recorder for Logger
type LoggerMockRecorder struct {
	mock *Logger
}

// NewLogger creates a new mock instance
func NewLogger(ctrl *gomock.Controller) *Logger {
	mock := &Logger{ctrl: ctrl}
	mock.recorder = &LoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Logger) EXPECT() *LoggerMockRecorder {
	return m.recorder
}

// Log mocks base method
func (m *Logger) Log(arg0 ...interface{}) error {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Log", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Log indicates an expected call of Log
func (mr *LoggerMockRecorder) Log(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*Logger)(nil).Log), arg0...)
}
