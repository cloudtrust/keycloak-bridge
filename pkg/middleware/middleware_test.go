package middleware

import (
	"context"
	"fmt"
	"math/rand"
	"strconv"
	"testing"
	"time"

	"github.com/cloudtrust/keycloak-bridge/pkg/event"
	"github.com/go-kit/kit/metrics"
	opentracing "github.com/opentracing/opentracing-go"
	opentracing_log "github.com/opentracing/opentracing-go/log"
	"github.com/stretchr/testify/assert"
)

func TestEndpointCorrelationIDMW(t *testing.T) {
	var mockFlaki = &mockFlaki{fail: false}
	// We use Logging middleware to read the correlation ID generated
	// by the CorrelationIDMiddleware.
	var mockLogger = &mockLogger{}

	// Context with correlation ID.
	rand.Seed(time.Now().UnixNano())
	var id = strconv.FormatUint(rand.Uint64(), 10)
	var ctx = context.WithValue(context.Background(), "correlation_id", id)

	var endpoints = event.NewEndpoints(MakeEndpointCorrelationIDMW(mockFlaki))

	// NextID.
	endpoints = endpoints.MakeNextIDEndpoint(&mockFlakiComponent{id: id, fail: false}, MakeEndpointLoggingMW(mockLogger))
	mockLogger.Called = false
	mockLogger.CorrelationID = ""
	endpoints.NextID(ctx)
	assert.True(t, mockLogger.Called)
	assert.Equal(t, id, mockLogger.CorrelationID)

	// NextValidID.
	endpoints = endpoints.MakeNextValidIDEndpoint(&mockFlakiComponent{id: id, fail: false}, MakeEndpointLoggingMW(mockLogger))
	mockLogger.Called = false
	mockLogger.CorrelationID = ""
	endpoints.NextValidID(ctx)
	assert.True(t, mockLogger.Called)
	assert.Equal(t, id, mockLogger.CorrelationID)

	// NextID without correlation ID.
	mockLogger.Called = false
	mockLogger.CorrelationID = ""
	// Set the id generated by Flaki.
	var expectedID = strconv.FormatUint(rand.Uint64(), 10)
	mockFlaki.id = expectedID
	endpoints.NextID(context.Background())
	assert.True(t, mockLogger.Called)
	assert.Equal(t, expectedID, mockLogger.CorrelationID)

	// NextValidID without correlation ID.
	mockLogger.Called = false
	mockLogger.CorrelationID = ""
	// Set the id generated by Flaki.
	expectedID = strconv.FormatUint(rand.Uint64(), 10)
	mockFlaki.id = expectedID
	endpoints.NextValidID(context.Background())
	assert.True(t, mockLogger.Called)
	assert.Equal(t, expectedID, mockLogger.CorrelationID)
}

func TestEndpointLoggingMW(t *testing.T) {
	var mockLogger = &mockLogger{}

	// Context with correlation ID.
	rand.Seed(time.Now().UnixNano())
	var id = strconv.FormatUint(rand.Uint64(), 10)
	var ctx = context.WithValue(context.Background(), "correlation_id", id)

	var endpoints = event.NewEndpoints(MakeEndpointLoggingMW(mockLogger))

	// NextID.
	endpoints = endpoints.MakeNextIDEndpoint(&mockFlakiComponent{id: id, fail: false})
	mockLogger.Called = false
	mockLogger.CorrelationID = ""
	endpoints.NextID(ctx)
	assert.True(t, mockLogger.Called)
	assert.Equal(t, id, mockLogger.CorrelationID)

	// NextValidID.
	endpoints = endpoints.MakeNextValidIDEndpoint(&mockFlakiComponent{id: id, fail: false})
	mockLogger.Called = false
	mockLogger.CorrelationID = ""
	endpoints.NextValidID(ctx)
	assert.True(t, mockLogger.Called)
	assert.Equal(t, id, mockLogger.CorrelationID)

	// NextID without correlation ID.
	var f = func() {
		endpoints.NextID(context.Background())
	}
	assert.Panics(t, f)

	// NextValidID without correlation ID.
	f = func() {
		endpoints.NextValidID(context.Background())
	}
	assert.Panics(t, f)
}
func TestEndpointInstrumentingMW(t *testing.T) {
	var mockHistogram = &mockHistogram{}

	// Context with correlation ID.
	rand.Seed(time.Now().UnixNano())
	var id = strconv.FormatUint(rand.Uint64(), 10)
	var ctx = context.WithValue(context.Background(), "correlation_id", id)

	var endpoints = event.NewEndpoints(MakeEndpointInstrumentingMW(mockHistogram))

	// NextID.
	endpoints = endpoints.MakeNextIDEndpoint(&mockFlakiComponent{id: id, fail: false})
	mockHistogram.Called = false
	mockHistogram.CorrelationID = ""
	endpoints.NextID(ctx)
	assert.True(t, mockHistogram.Called)
	assert.Equal(t, id, mockHistogram.CorrelationID)

	// NextValidID.
	endpoints = endpoints.MakeNextValidIDEndpoint(&mockFlakiComponent{id: id, fail: false})
	mockHistogram.Called = false
	mockHistogram.CorrelationID = ""
	endpoints.NextValidID(ctx)
	assert.True(t, mockHistogram.Called)
	assert.Equal(t, id, mockHistogram.CorrelationID)

	// NextID without correlation ID.
	var f = func() {
		endpoints.NextID(context.Background())
	}
	assert.Panics(t, f)

	// NextValidID without correlation ID.
	f = func() {
		endpoints.NextValidID(context.Background())
	}
	assert.Panics(t, f)
}
func TestEndpointTracingMW(t *testing.T) {
	var mockSpan = &mockSpan{}
	var mockTracer = &mockTracer{Span: mockSpan}

	// Context with correlation ID and span.
	rand.Seed(time.Now().UnixNano())
	var id = strconv.FormatUint(rand.Uint64(), 10)
	var ctx = context.WithValue(context.Background(), "correlation_id", id)
	ctx = opentracing.ContextWithSpan(ctx, mockTracer.StartSpan("keycloak"))

	var endpoints = event.NewEndpoints(MakeEndpointTracingMW(mockTracer, "keycloak"))

	// NextID.
	endpoints = endpoints.MakeNextIDEndpoint(&mockFlakiComponent{id: id, fail: false})
	mockTracer.Called = false
	endpoints.NextID(ctx)
	assert.True(t, mockTracer.Called)
	assert.Equal(t, id, mockTracer.Span.CorrelationID)

	// NextValidID.
	endpoints = endpoints.MakeNextValidIDEndpoint(&mockFlakiComponent{id: id, fail: false})
	mockTracer.Called = false
	mockTracer.Span.CorrelationID = ""
	endpoints.NextValidID(ctx)
	assert.True(t, mockTracer.Called)
	assert.Equal(t, id, mockTracer.Span.CorrelationID)

	// NextID without correlation ID.
	var f = func() {
		endpoints.NextID(opentracing.ContextWithSpan(context.Background(), mockTracer.StartSpan("flaki")))
	}
	assert.Panics(t, f)

	// NextValidID without correlation ID.
	f = func() {
		endpoints.NextValidID(opentracing.ContextWithSpan(context.Background(), mockTracer.StartSpan("flaki")))
	}
	assert.Panics(t, f)
}

// Mock Flaki.
type mockFlaki struct {
	id string
}

func (f *mockFlaki) GetCorrelationID() string {
	return f.id
}

// Mock MuxComponent.
type mockMuxComponent struct {
	fail bool
}

func (c *mockMuxComponent) Event(ctx context.Context, eventType string, obj []byte) (interface{}, error) {
	if c.fail {
		return "", fmt.Errorf("fail")
	}
	return "", nil
}

// Mock Logger.
type mockLogger struct {
	Called        bool
	CorrelationID string
}

func (l *mockLogger) Log(keyvals ...interface{}) error {
	l.Called = true

	for i, kv := range keyvals {
		if kv == "correlation_id" {
			l.CorrelationID = keyvals[i+1].(string)
		}
	}
	return nil
}

// Mock histogram.
type mockHistogram struct {
	Called        bool
	CorrelationID string
}

func (h *mockHistogram) With(labelValues ...string) metrics.Histogram {
	for i, kv := range labelValues {
		if kv == "correlation_id" {
			h.CorrelationID = labelValues[i+1]
		}
	}
	return h
}
func (h *mockHistogram) Observe(value float64) {
	h.Called = true
}

// Mock Tracer.
type mockTracer struct {
	Called bool
	Span   *mockSpan
}

func (t *mockTracer) StartSpan(operationName string, opts ...opentracing.StartSpanOption) opentracing.Span {
	t.Called = true
	return t.Span
}
func (t *mockTracer) Inject(sm opentracing.SpanContext, format interface{}, carrier interface{}) error {
	return nil
}
func (t *mockTracer) Extract(format interface{}, carrier interface{}) (opentracing.SpanContext, error) {
	return nil, nil
}

// Mock Span.
type mockSpan struct {
	CorrelationID string
}

func (s *mockSpan) SetTag(key string, value interface{}) opentracing.Span {
	if key == "correlation_id" {
		s.CorrelationID = value.(string)
	}
	return s
}
func (s *mockSpan) Finish()                                                     {}
func (s *mockSpan) FinishWithOptions(opts opentracing.FinishOptions)            {}
func (s *mockSpan) Context() opentracing.SpanContext                            { return nil }
func (s *mockSpan) SetOperationName(operationName string) opentracing.Span      { return s }
func (s *mockSpan) LogFields(fields ...opentracing_log.Field)                   {}
func (s *mockSpan) LogKV(alternatingKeyValues ...interface{})                   {}
func (s *mockSpan) SetBaggageItem(restrictedKey, value string) opentracing.Span { return s }
func (s *mockSpan) BaggageItem(restrictedKey string) string                     { return "" }
func (s *mockSpan) Tracer() opentracing.Tracer                                  { return nil }
func (s *mockSpan) LogEvent(event string)                                       {}
func (s *mockSpan) LogEventWithPayload(event string, payload interface{})       {}
func (s *mockSpan) Log(data opentracing.LogData)                                {}
