//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: users

package fb

import "github.com/google/flatbuffers/go"

import (
  context "golang.org/x/net/context"
  grpc "google.golang.org/grpc"
)

// Client API for UserService service
type UserServiceClient interface{
  GetUsers(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (UserService_GetUsersClient, error)  
}

type userServiceClient struct {
  cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
  return &userServiceClient{cc}
}

func (c *userServiceClient) GetUsers(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (UserService_GetUsersClient, error) {
  stream, err := grpc.NewClientStream(ctx, &_UserService_serviceDesc.Streams[0], c.cc, "/fb.UserService/GetUsers", opts...)
  if err != nil { return nil, err }
  x := &userServiceGetUsersClient{stream}
  if err := x.ClientStream.SendMsg(in); err != nil { return nil, err }
  if err := x.ClientStream.CloseSend(); err != nil { return nil, err }
  return x,nil
}

type UserService_GetUsersClient interface {
  Recv() (*UserReply, error)
  grpc.ClientStream
}

type userServiceGetUsersClient struct{
  grpc.ClientStream
}

func (x *userServiceGetUsersClient) Recv() (*UserReply, error) {
  m := new(UserReply)
  if err := x.ClientStream.RecvMsg(m); err != nil { return nil, err }
  return m, nil
}

// Server API for UserService service
type UserServiceServer interface {
  GetUsers(*UserRequest, UserService_GetUsersServer) error  
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
  s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_GetUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
  m := new(UserRequest)
  if err := stream.RecvMsg(m); err != nil { return err }
  return srv.(UserServiceServer).GetUsers(m, &userServiceGetUsersServer{stream})
}

type UserService_GetUsersServer interface { 
  Send(* flatbuffers.Builder) error
  grpc.ServerStream
}

type userServiceGetUsersServer struct {
  grpc.ServerStream
}

func (x *userServiceGetUsersServer) Send(m *flatbuffers.Builder) error {
  return x.ServerStream.SendMsg(m)
}


var _UserService_serviceDesc = grpc.ServiceDesc{
  ServiceName: "fb.UserService",
  HandlerType: (*UserServiceServer)(nil),
  Methods: []grpc.MethodDesc{
  },
  Streams: []grpc.StreamDesc{
    {
      StreamName: "GetUsers",
      Handler: _UserService_GetUsers_Handler, 
      ServerStreams: true,
    },
  },
}

