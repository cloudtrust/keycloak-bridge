// automatically generated by the FlatBuffers compiler, do not modify

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AdminEvent struct {
	_tab flatbuffers.Table
}

func GetRootAsAdminEvent(buf []byte, offset flatbuffers.UOffsetT) *AdminEvent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AdminEvent{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *AdminEvent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AdminEvent) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AdminEvent) Uid() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AdminEvent) MutateUid(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *AdminEvent) Time() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AdminEvent) MutateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *AdminEvent) RealmId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AdminEvent) AuthDetails(obj *AuthDetails) *AuthDetails {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AuthDetails)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *AdminEvent) ResourceType() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AdminEvent) MutateResourceType(n int8) bool {
	return rcv._tab.MutateInt8Slot(12, n)
}

func (rcv *AdminEvent) OperationType() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AdminEvent) MutateOperationType(n int8) bool {
	return rcv._tab.MutateInt8Slot(14, n)
}

func (rcv *AdminEvent) ResourcePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AdminEvent) Representation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AdminEvent) Error() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func AdminEventStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func AdminEventAddUid(builder *flatbuffers.Builder, uid int64) {
	builder.PrependInt64Slot(0, uid, 0)
}
func AdminEventAddTime(builder *flatbuffers.Builder, time int64) {
	builder.PrependInt64Slot(1, time, 0)
}
func AdminEventAddRealmId(builder *flatbuffers.Builder, realmId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(realmId), 0)
}
func AdminEventAddAuthDetails(builder *flatbuffers.Builder, authDetails flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(authDetails), 0)
}
func AdminEventAddResourceType(builder *flatbuffers.Builder, resourceType int8) {
	builder.PrependInt8Slot(4, resourceType, 0)
}
func AdminEventAddOperationType(builder *flatbuffers.Builder, operationType int8) {
	builder.PrependInt8Slot(5, operationType, 0)
}
func AdminEventAddResourcePath(builder *flatbuffers.Builder, resourcePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(resourcePath), 0)
}
func AdminEventAddRepresentation(builder *flatbuffers.Builder, representation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(representation), 0)
}
func AdminEventAddError(builder *flatbuffers.Builder, error flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(error), 0)
}
func AdminEventEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
