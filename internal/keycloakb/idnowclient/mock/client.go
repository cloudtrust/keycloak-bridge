// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-bridge/internal/keycloakb/idnowclient (interfaces: HTTPClient)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/client.go -package=mock -mock_names=HTTPClient=HTTPClient github.com/cloudtrust/keycloak-bridge/internal/keycloakb/idnowclient HTTPClient
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	plugin "gopkg.in/h2non/gentleman.v2/plugin"
)

// HTTPClient is a mock of HTTPClient interface.
type HTTPClient struct {
	ctrl     *gomock.Controller
	recorder *HTTPClientMockRecorder
	isgomock struct{}
}

// HTTPClientMockRecorder is the mock recorder for HTTPClient.
type HTTPClientMockRecorder struct {
	mock *HTTPClient
}

// NewHTTPClient creates a new mock instance.
func NewHTTPClient(ctrl *gomock.Controller) *HTTPClient {
	mock := &HTTPClient{ctrl: ctrl}
	mock.recorder = &HTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *HTTPClient) EXPECT() *HTTPClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *HTTPClient) Get(data any, plugins ...plugin.Plugin) error {
	m.ctrl.T.Helper()
	varargs := []any{data}
	for _, a := range plugins {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *HTTPClientMockRecorder) Get(data any, plugins ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{data}, plugins...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*HTTPClient)(nil).Get), varargs...)
}
