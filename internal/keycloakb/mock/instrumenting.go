// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/common-service/v2/metrics (interfaces: Histogram)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/instrumenting.go -package=mock -mock_names=Histogram=Histogram github.com/cloudtrust/common-service/v2/metrics Histogram
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	metrics "github.com/cloudtrust/common-service/v2/metrics"
	gomock "go.uber.org/mock/gomock"
)

// Histogram is a mock of Histogram interface.
type Histogram struct {
	ctrl     *gomock.Controller
	recorder *HistogramMockRecorder
	isgomock struct{}
}

// HistogramMockRecorder is the mock recorder for Histogram.
type HistogramMockRecorder struct {
	mock *Histogram
}

// NewHistogram creates a new mock instance.
func NewHistogram(ctrl *gomock.Controller) *Histogram {
	mock := &Histogram{ctrl: ctrl}
	mock.recorder = &HistogramMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Histogram) EXPECT() *HistogramMockRecorder {
	return m.recorder
}

// Observe mocks base method.
func (m *Histogram) Observe(value float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Observe", value)
}

// Observe indicates an expected call of Observe.
func (mr *HistogramMockRecorder) Observe(value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Observe", reflect.TypeOf((*Histogram)(nil).Observe), value)
}

// With mocks base method.
func (m *Histogram) With(labelValues ...string) metrics.Histogram {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range labelValues {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "With", varargs...)
	ret0, _ := ret[0].(metrics.Histogram)
	return ret0
}

// With indicates an expected call of With.
func (mr *HistogramMockRecorder) With(labelValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*Histogram)(nil).With), labelValues...)
}
