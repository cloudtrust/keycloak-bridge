// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/common-service/v2/security (interfaces: EncrypterDecrypter)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/security.go -package=mock -mock_names=EncrypterDecrypter=EncrypterDecrypter github.com/cloudtrust/common-service/v2/security EncrypterDecrypter
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// EncrypterDecrypter is a mock of EncrypterDecrypter interface.
type EncrypterDecrypter struct {
	ctrl     *gomock.Controller
	recorder *EncrypterDecrypterMockRecorder
	isgomock struct{}
}

// EncrypterDecrypterMockRecorder is the mock recorder for EncrypterDecrypter.
type EncrypterDecrypterMockRecorder struct {
	mock *EncrypterDecrypter
}

// NewEncrypterDecrypter creates a new mock instance.
func NewEncrypterDecrypter(ctrl *gomock.Controller) *EncrypterDecrypter {
	mock := &EncrypterDecrypter{ctrl: ctrl}
	mock.recorder = &EncrypterDecrypterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *EncrypterDecrypter) EXPECT() *EncrypterDecrypterMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *EncrypterDecrypter) Decrypt(value []byte, kid string, additional []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", value, kid, additional)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *EncrypterDecrypterMockRecorder) Decrypt(value, kid, additional any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*EncrypterDecrypter)(nil).Decrypt), value, kid, additional)
}

// Encrypt mocks base method.
func (m *EncrypterDecrypter) Encrypt(value, additional []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", value, additional)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *EncrypterDecrypterMockRecorder) Encrypt(value, additional any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*EncrypterDecrypter)(nil).Encrypt), value, additional)
}

// GetCurrentKeyID mocks base method.
func (m *EncrypterDecrypter) GetCurrentKeyID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentKeyID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCurrentKeyID indicates an expected call of GetCurrentKeyID.
func (mr *EncrypterDecrypterMockRecorder) GetCurrentKeyID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentKeyID", reflect.TypeOf((*EncrypterDecrypter)(nil).GetCurrentKeyID))
}
