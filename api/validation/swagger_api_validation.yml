openapi: 3.0.1
info:
  title: Swagger Cloudtrust Validation Check (KYC)
  description: 'Internal API Validation Check for Cloudtrust.'
  version: 1.0.0
servers:
- url: http://localhost:8888
tags:
- name: UserData
  description: User data information
- name: Check
  description: Validation checks
paths:
  /validation/realms/{realm}/users/{userID}:
    get:
      tags:
      - UserData
      summary: Get user data information
      parameters:
      - name: realm
        in: path
        description: Realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: userID to retrieve
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
      - UserData
      summary: Updates user data information
      parameters:
      - name: realm
        in: path
        description: Realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: userID of user to update
        required: true
        schema:
          type: string
      - name: txnID
        in: query
        description: transaction ID (linked in events)
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: successful operation
  /validation/realms/{realm}/users/{userID}/checks:
    post:
      tags:
        - Check
      summary: Create validation check
      parameters:
      - name: realm
        in: path
        description: Realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: userID of user checked
        required: true
        schema:
          type: string
      - name: txnID
        in: query
        description: transaction ID (linked in events)
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Check'
      responses:
        201:
          description: successful operation
  /validation/realms/{realm}/users/{userID}/checks/pending:
    post:
      tags:
        - Check
      summary: Create a pending validation check
      parameters:
      - name: realm
        in: path
        description: Realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: userID of user checked
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PendingChecks'
      responses:
        201:
          description: successful operation
  /validation/realms/{realm}/users/{userID}/checks/pending/{pendingCheck}:
    delete:
      tags:
        - Check
      summary: Delete a pending validation check
      parameters:
      - name: realm
        in: path
        description: Realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: userID of user checked
        required: true
        schema:
          type: string
      - name: pendingCheck
        in: path
        description: nature of the pending check to be removed
        required: true
        schema:
          type: string
          enum: [IDNOW_CHECK]
      responses:
        201:
          description: successful operation
components:
  schemas:
    User:
      type: object
      required: [gender, firstName, lastName, emailAddress, phoneNumber]
      properties:
        id:
          type: string
        gender:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        birthDate:
          type: string
          description: format is DD.MM.YYYY
        birthLocation:
          type: string
        nationality:
          type: string
          description: ISO 3166 Alpha-2 country code
        idDocumentType:
          type: string
          enum: [ID_CARD, PASSPORT, RESIDENCE_PERMIT]
        idDocumentNumber:
          type: string
        idDocumentExpiration:
          type: string
        idDocumentCountry:
          type: string
          description: ISO 3166 Alpha-2 country code
    Check:
      type: object
      properties:
        userId:
          type: string
        operator:
          type: string
        datetime:
          type: string
          format: date-time
        status:
          type: string
        proofData:
          type: string
          format: byte
        proofType:
          type: string
        type:
          type: string
        nature:
          type: string
    PendingChecks:
      type: object
      properties:
        nature:
          type: string
          enum: [IDNOW_CHECK]
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
security:
  - basicAuth: []