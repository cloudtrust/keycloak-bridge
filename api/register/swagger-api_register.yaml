openapi: 3.0.1
info:
  title: Swagger Cloudtrust Register
  description: 'Self-register API for Cloudtrust.'
  version: 1.0.0
servers:
- url: http://localhost:8855
tags:
- name: Register
  description: Self registering of a user
paths:
  /register/user:
    post:
      tags:
      - Register
      summary: Creates a user in the configured realm (register-realm)
      security:
        - BasicAuth: [recaptcha]
      parameters:
      - name: realm
        in: path
        description: realm name (not id!) of a realm configured with a redirect URL for the end of the process
        required: true
        schema:
          type: string
      - name: context-key
        in: query
        description: context-key
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        204:
          description: Successful operation
        400:
          description: Invalid information provided
        403:
          description: Invalid RECAPTCHA token
  /register/user/profile:
    get:
      tags:
      - Configuration
      summary: Gets the definition of user attributes
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation. Returns the realm users profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
  /register/realms/{realm}/user:
    post:
      tags:
      - Register
      summary: Creates a user in the realm specified in URL path
      security:
        - BasicAuth: [recaptcha]
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: context-key
        in: query
        description: context-key
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        204:
          description: Successful operation
        400:
          description: Invalid information provided
        403:
          description: Invalid RECAPTCHA token
  /register/realms/{realm}/user/profile:
    get:
      tags:
      - Configuration
      summary: Gets the definition of user attributes from the realm specified in URL path
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation. Returns the realm users profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
  /register/config:
    get:
      tags:
      - Configuration
      summary: Gets configuration
      parameters:
      - name: realm
        in: query
        description: realm name (not id!)
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation. Returns the configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'
components:
  schemas:
    User:
      type: object
      required: [gender, firstName, lastName, email, phoneNumber]
      properties:
        gender:
          type: string
          enum: [M,F,U]
          description: Male, Female or Undefined
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        birthDate:
          type: string
          description: format is DD.MM.YYYY
        birthLocation:
          type: string
        nationality:
          type: string
          description: ISO 3166 Alpha-2 country code
        idDocumentType:
          type: string
          enum: [ID_CARD, PASSPORT, RESIDENCE_PERMIT]
        idDocumentNumber:
          type: string
        idDocumentExpiration:
          type: string
        idDocumentCountry:
          type: string
          description: ISO 3166 Alpha-2 country code
        locale:
          type: string
        businessId:
          type: string
          description: Business identifier (can be GLN)
        onBoardingStatus:
          type: string
          enum: ["", self-registration-form-completed, user-created-by-api, email-verified, password-set, phone-verified, 2fa-set, completed]
          description: user onboarding flow status
    Configuration:
      type: object
      properties:
        cancelUrl:
          type: string
        mode:
          type: string
          description: is the register API used for corporate or social mode
        theme:
          type: string
        supportedLocales:
          type: array
          items:
            type: string
        selfRegisterEnabled:
          type: boolean
          description: true if self register is enabled for the specified realm
        contextKey:
          type: string
          description: context key of the specified realm
    Profile:
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/ProfileAttribute'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/ProfileGroup'
          description: groups are used to gather user attributes by themes
    ProfileAttribute:
      type: object
      properties:
        name:
          type: string
        displayName:
          type: string
        group:
          type: string
          description: name of a group defined in ProfileGroup
        required:
          type: boolean
        validations:
          $ref: '#/components/schemas/ProfileAttributeValidations'
    ProfileAttributeValidations:
      description: >
        Here is a list of known validators :
        email: no parameters
        length: min/max (can be integer or string), trim-disabled (boolean as string)
        integer: min/max (integer as string)
        double: min/max (integer as string)
        options: options (array of allowed values)
        pattern: pattern (regex), error-message (string)
        local-date: no parameters
        uri: no parameters
        username-prohibited-characters: error-message (string)
        person-name-prohibited-characters: error-message (string)
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ProfileAttributeValidator'
    ProfileAttributeValidator:
      type: object
      additionalProperties:
        type: object
    ProfileGroup:
      type: object
      properties:
        name:
          type: string
        displayHeader:
          type: string
        displayDescription:
          type: string
        annotations:
          type: object
          additionalProperties:
            type: string
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic