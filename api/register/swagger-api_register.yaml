openapi: 3.0.1
info:
  title: Swagger Cloudtrust Register
  description: 'Self-register API for Cloudtrust.'
  version: 1.0.0
servers:
- url: http://localhost:8855
tags:
- name: Register
  description: Self registering of a user
paths:
  /register/user:
    post:
      tags:
      - Register
      summary: Creates a user in the configured realm (register-realm)
      security:
        - BasicAuth: [recaptcha]
      parameters:
      - name: realm
        in: query
        description: realm name (not id!) of a realm configured with a redirect URL for the end of the process
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Successful operation. Returns the generated username
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid information provided
        403:
          description: Invalid RECAPTCHA token
  /register/realms/{realm}/user:
    post:
      tags:
      - Register
      summary: Creates a user in the realm specified in URL path
      security:
        - BasicAuth: [recaptcha]
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Successful operation. Returns the generated username
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid information provided
        403:
          description: Invalid RECAPTCHA token
  /register/config:
    get:
      tags:
      - Configuration
      summary: Get configuration
      parameters:
      - name: realm
        in: query
        description: realm name (not id!)
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation. Returns the configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'
components:
  schemas:
    User:
      type: object
      required: [gender, firstName, lastName, email, phoneNumber]
      properties:
        gender:
          type: string
          enum: [M,F,U]
          description: Male, Female or Undefined
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        birthDate:
          type: string
          description: format is DD.MM.YYYY
        birthLocation:
          type: string
        nationality:
          type: string
          description: ISO 3166 Alpha-2 country code
        idDocumentType:
          type: string
          enum: [ID_CARD, PASSPORT, RESIDENCE_PERMIT]
        idDocumentNumber:
          type: string
        idDocumentExpiration:
          type: string
        idDocumentCountry:
          type: string
          description: ISO 3166 Alpha-2 country code
        locale:
          type: string
    Configuration:
      type: object
      properties:
        cancelUrl:
          type: string
        mode:
          type: string
          description: is the register API used for corporate or social mode
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic