openapi: 3.0.1
info:
  title: Swagger Cloudtrust Authorization
  description: 'Authorization API for Cloudtrust.'
  version: 1.0.0
servers:
- url: http://localhost:8877
tags:
- name: Authorization
  description: Authorization management
paths:
  /realms/{realm}/groups:
    get:
      tags:
      - Authorization
      summary: Get the groups available for the realm
      ---> get if from KC
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
    post:
      tags:
      - Authorization
      summary: Create new group into the realm
      --> create into KC
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
  /realms/{realm}/groups/{group}:
    get:
      tags:
      - Authorization
      summary: Get the group with its permissions
      ---> get if from KC and enhance with JSON struct
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: group
        in: path
        description: group id
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Group'
    post:
      tags:
      - Authorization
      summary: Edit the group permissions
      ---> get if from KC and enhance with JSON struct
         -->update JSON structure. First validate it
   ---> if there is some privileges, adapt the privileges accordinglgy into KC (manage-users, view-clients, ....)
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: group
        in: path
        description: group id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Group'
    delete:
      tags:
      - Authorization
      summary: Delete the group
      ---> delete it from KC and corresponding authZ JSON structure
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: group
        in: path
        description: group id
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
  /realms/{realm}/permissions:
    get:
      tags:
      - Authorization
      summary: Get all available permissions
      ---> coming from enum of source code
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          schema:
                type: array
                items: string
  /realms/{realm}/target-groups:
    get:
      tags:
      - Authorization
      summary: Get all available target groups
      --> returns all the groups available
  -------> i.e. all groups of the current realm
  --------> if master realm, there is multiple realm accessible, thus we returns groups also for those realms 
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          schema:
                type: array
                items: string
                
                                              
components:
  schemas:
    Statistics:
      type: object
      properties:
        lastConnection:
          type: number
        totalConnections:
          type: object
          properties:
            lastTwelveHours:
              type: number
            lastDay:
              type: number
            lastWeek:
              type: number
            lastMonth:
              type: number
            lastYear:
              type: number
    StatisticsUsers:
      type: object
      properties:
        total:
          type: number
        disabled:
          type: number
        inactive:
          type: number      
    StatisticsAuthenticators:
      type: object
      additionalProperties:
        type: number       
    StatisticsAuthentications:
      type: array
      items:
        type: array
        items:
          type: integer  
        minItems: 2
        maxItems: 2        
    StatisticsConnection:
      type: object
      properties:
        date:
          type: string 
        result:
          type: string
        user:
          type: string
        IP: 
          type: string    
  securitySchemes:
    openId:
      type: openIdConnect
      openIdConnectUrl: http://toto.com/.well-known/openid-configuration
security:
  - openId:
    - todo