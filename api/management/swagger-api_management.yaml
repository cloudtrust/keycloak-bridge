openapi: 3.0.1
info:
  title: Swagger Cloudtrust Management
  description: 'Management API for Cloudtrust'
  version: 1.0.0
servers:
- url: http://localhost:8888/management
tags:
- name: Realms
  description: Realms management
- name: Clients
  description: Clients management
- name: Users
  description: Users management
- name: Roles
  description: Roles management
paths:
  /actions:
    get:
      tags:
      - Actions
      summary: Get the list of all possible actions
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Actions'
  /realms/{realm}:
    get:
      tags:
      - Realms
      summary: Get the top-level representation of the realm It will not include nested information like User and Client representations.
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Realm'
  /realms/{realm}/clients:
    get:
      tags:
      - Clients
      summary: Get clients belonging to the realm.
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      responses:
        200:
          description: Returns a list of clients belonging to the realm.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
  /realms/{realm}/required-actions:
    get:
      tags:
      - Required Actions
      summary: Get required actions available for the realm.
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      responses:
        200:
          description: Returns a list of required actions enabled in the realm.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RequiredAction'
  /realms/{realm}/clients/{clientID}:
    get:
      tags:
      - Clients
      summary: Get representation of the client
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: clientID
        in: path
        description: id of client (not client-id)
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
  /realms/{realm}/trustIdGroups:
    get:
      tags:
      - Users
      summary: Get available trustID groups
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  ["product_administrator","registration_officer"]
  /realms/{realm}/users:
    post:
      tags:
      - Users
      summary: >
        Create a new user.
        Username must be unique.
        Role and Groups can be assigned thanks to their ID.
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: generateUsername
        in: query
        description: tells if a username should be generated
        required: false
        schema:
          type: boolean
      - name: generateNameID
        in: query
        description: tells if a NameID should be generated
        required: false
        schema:
          type: boolean
      - name: termsOfUse
        in: query
        description: tells if terms of use are required (default false)
        required: false
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: successful operation
          headers:
            Location:
              schema:
                type: string
              description: URL of the new resource.
    get:
      tags:
      - Users
      summary: >
        Get users.
        Returns a list of users, filtered according to query parameters.
        BirthLocation, and ID documents fields are not returned by this call.
      parameters:
      - name: realm
        in: path
        description: Name of the realm
        required: true
        schema:
          type: string
      - name: groupIds
        in: query
        description: list of groupId the users may belong to (list comma seperated)
        required: true
        schema:
          type: string
      - name: email
        in: query
        schema:
          type: string
        allowEmptyValue: true
      - name: firstName
        in: query
        schema:
          type: string
        allowEmptyValue: true
      - name: lastName
        in: query
        schema:
          type: string
        allowEmptyValue: true
      - name: username
        in: query
        schema:
          type: string
        allowEmptyValue: true
      - name: search
        in: query
        schema:
          type: string
        allowEmptyValue: true
      - name: first
        in: query
        schema:
          type: number
        allowEmptyValue: true
      - name: max
        in: query
        schema:
          type: number
        allowEmptyValue: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
  /realms/{realm}/users/{userID}:
    get:
      tags:
      - Users
      summary: Get representation of the user
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
      - Users
      summary: >
        Update an existing user.
        By default, missing or null fields make existing values be unmodified except if specified on the description of the User object.
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: successful operation
    delete:
      tags:
      - Users
      summary: Delete the user
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
  /realms/{realm}/users/{userID}/lock:
    put:
      tags:
      - Users
      summary: Lock an existing user.
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
  /realms/{realm}/users/{userID}/unlock:
    put:
      tags:
      - Users
      summary: Unlock an existing user.
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
  /realms/{realm}/users/{userID}/status:
    get:
      tags:
      - Users
      summary: Get the account status for the user (User enabled and has a second factor)
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeprecatedUserStatus'
  /realms/{realm}/users/status:
    get:
      tags:
      - Users
      summary: Returns current status of user
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: email
        in: query
        schema:
          type: string
        required: true
        allowEmptyValue: false
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatus'
        404:
          description: user not found
  /realms/{realm}/users/{userID}/roles:
    get:
      tags:
      - Users
      summary: Get roles of user
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
  /realms/{realm}/users/{userID}/roles/{roleID}:
    post:
      tags:
      - Users
      summary: Add role to user
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      - name: roleID
        in: path
        description: Role id
        required: true
        schema:
          type: string
      responses:
        204:
          description: successful operation
        400:
          description: role not found
    delete:
      tags:
      - Users
      summary: Remove role for user
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      - name: roleID
        in: path
        description: Role id
        required: true
        schema:
          type: string
      responses:
        204:
          description: successful operation
        404:
          description: role not found or not owned by user
  /realms/{realm}/users/{userID}/groups:
    get:
      tags:
      - Users
      summary: Get groups of user
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
  /realms/{realm}/users/{userID}/groups/{groupID}:
    post:
      tags:
      - Users
      summary: Add group to user
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      - name: groupID
        in: path
        description: Group id
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
    delete:
      tags:
      - Users
      summary: Remove group for user
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      - name: groupID
        in: path
        description: Group id
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
  /realms/{realm}/users/{userID}/trustIdGroups:
    get:
      tags:
      - Users
      summary: Get the trustID groups for the user
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  ["product_administrator","registration_officer"]
    put:
      tags:
      - Users
      summary: Set the trustID groups for the user
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      requestBody:
        description: trustID groups
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              example:
                ["product_administrator","registration_officer"]
      responses:
        200:
          description: successful operation
  /realms/{realm}/users/{userID}/checks:
    get:
      tags:
      - Users
      summary: Get checks of the user
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserCheck'
  /realms/{realm}/users/{userID}/role-mappings/clients/{clientID}:
    get:
      tags:
      - Users
      summary: Get client-level roles for the user and the client
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      - name: clientID
        in: path
        description: Client id
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
    post:
      tags:
      - Users
      summary: Add client-level roles to the user.
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      - name: clientID
        in: path
        description: Client id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Role'
      responses:
        200:
          description: successful operation
  /realms/{realm}/users/{userID}/role-mappings/clients/{clientID}/roles/{roleID}:
    delete:
      tags:
      - Users
      summary: Delete client-level roles from the user
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      - name: clientID
        in: path
        description: Client id
        required: true
        schema:
          type: string
      - name: roleID
        in: path
        description: role ID
        required: true
        schema:
          type: string
      - name: roleName
        in: query
        description: name of the role
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
      
  /realms/{realm}/users/{userID}/reset-password:
    put:
      tags:
      - Users
      summary: >
        Set up a new password for the user. The value of the password is optional. 
        If no password is provided (i.e. the body is an empty JSON), a password is generated and returned in the response.
        The generated password is a string that either follows the password policy imposed by the realm or has length 8 and contains letters (upper case, lower case) and numbers.
        The password does not contain the following ambiguous characters - l, i,1, 0, o, O, 5, s, S.
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Password'
      responses:
        200:
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
  /realms/{realm}/users/{userID}/execute-actions-email:
    put:
      tags:
      - Users
      summary: >
        Send a update account email to the user An email contains a link the user can click to perform a set of required actions.
        The redirectUri and clientId parameters are optional.
        If no redirect is given, then there will be no link back to click after actions have completed.
        Redirect uri must be a valid uri for the particular clientId.
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      - name: client_id
        in: query
        schema:
          type: string
        allowEmptyValue: true
      - name: lifespan
        in: query
        description: Number of seconds after which the generated token expires
        schema:
          type: string
        allowEmptyValue: true
      - name: redirect_uri
        in: query
        schema:
          type: string
        allowEmptyValue: true
      - name: custom1
        in: query
        schema:
          type: string
      - name: custom2
        in: query
        schema:
          type: string
      - name: custom3
        in: query
        schema:
          type: string
      - name: custom4
        in: query
        schema:
          type: string
      - name: custom5
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        200:
          description: successful operation
  /realms/{realm}/users/{userID}/revoke-accreditations:
    put:
      tags:
      - Users
      summary: >
        Revoke accreditations.
        NOTE: method is placed in /accreditations/realms/{realm}/users/{userID}/revoke-accreditations (not in /management)
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      responses:
        204:
          description: accreditations have been revoked
        404:
          description: nothing to revoke
  /realms/{realm}/users/{userID}/send-sms-code:
    post:
      tags:
      - Users
      summary: >
        Send an sms code to a user and returns the value to the requester. This can be used by support to ensure the person claiming for something really owns the mobile as a proof of its identity.
      parameters:
      - name: realm
        in: path
        description: Realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      responses:
        200:
          description: "Code correctly sent by SMS"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
        400:
          description: "Invalid input"
        403:
          description: "No permission to call this operation"
  /realms/{realm}/users/{userID}/send-onboarding-email:
    post:
      tags:
      - Users
      summary: >
        Send an onboarding email to the user. He will receives an email to start the onboarding process. At the end of the process, he will be authenticated.
      parameters:
      - name: realm
        in: path
        description: Realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      - name: lifespan
        in: query
        description: validity duration of the link sent in the mail in seconds. If value exceeds the configured max life span, you can get a HTTP status 400.
        required: false
        schema:
          type: integer
      - name: reminder
        in: query
        required: false
        schema:
          type: boolean
      - name: customerRealm
        in: query
        description: Customer realm name
        required: false
        schema:
          type: string
      - name: custom1
        in: query
        schema:
          type: string
      - name: custom2
        in: query
        schema:
          type: string
      - name: custom3
        in: query
        schema:
          type: string
      - name: custom4
        in: query
        schema:
          type: string
      - name: custom5
        in: query
        schema:
          type: string
      responses:
        200:
          description: Onboarding email sent
        400:
          description: Invalid input
        401:
          description: Not authenticated
        403:
          description: No permission to call this operation
        409:
          description: Endpoint not configured
  /realms/{realm}/users/{userID}/send-reminder-email:
    post:
      tags:
      - Users
      summary: Send a reminder email for a particular userID.
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      - name: client_id
        in: query
        schema:
          type: string
        allowEmptyValue: true
      - name: redirect_uri
        in: query
        schema:
          type: string
        allowEmptyValue: true
      - name: lifespan
        in: query
        schema:
          type: string          
        allowEmptyValue: true
      responses:
        200:
          description: Mail successfully sent
        400:
          description: Invalid input
        401:
          description: Not authenticated
        403:
          description: No permission to call this operation  
  /realms/{realm}/users/{userID}/reset-sms-counter:
    put:
      tags:
      - Users
      summary: Reset the smsSent and smsAttempts attributes of the user to value 0.
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation          
  /realms/{realm}/users/{userID}/credentials:
    get:
      tags:
      - Credentials
      summary: Get all credentials for the user
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Credential'
  /realms/{realm}/users/{userID}/credentials/{credentialID}:
    delete:
      tags:
      - Credentials
      summary: Delete the credentials for the user
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      - name: credentialID
        in: path
        description: Credential id
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
  /realms/{realm}/users/{userID}/credentials/{credentialID}/reset-failures:
    put:
      tags:
      - Credentials
      summary: >
        Reset a locked credential for the user (ex: paper card with too many wrong errors)
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      - name: credentialID
        in: path
        description: Credential id
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
        404:
          description: realm, user or credential not found
  /realms/{realm}/users/{userID}/attack-detection-status:
    get:
      tags:
      - login-failures
      summary: Get the credential brute force status for the user
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttackDetectionStatus'
  /realms/{realm}/users/{userID}/clear-login-failures:
    delete:
      tags:
      - login-failures
      summary: Delete the login failures for the user
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
  /realms/{realm}/users/{userID}/recovery-code:
    post:
      tags:
      - Credentials
      summary: Set a recovery code for the user
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      responses:
        201:
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
        409:
          description: recovery code already set
  /realms/{realm}/users/{userID}/activation-code:
    post:
      tags:
      - Credentials
      summary: Create or replace an activation code for the user
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      responses:
        201:
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
  /realms/{realm}/roles:
    get:
      tags:
      - Roles
      summary: Get all roles for the realm
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
    post:
      tags:
      - Roles
      summary: Create a new role into the realm
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        201:
          description: successful operation
          headers:
            Location:
              schema:
                type: string
              description: URL of the new resource.
  /realms/{realm}/roles/{roleID}:
    get:
      tags:
      - Roles
      summary: Get a specific role
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: roleID
        in: path
        description: id of role
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    put:
      tags:
      - Roles
      summary: Update a role
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: roleID
        in: path
        description: role id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        204:
          description: successful operation
    delete:
      tags:
      - Roles
      summary: Delete the role
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: roleID
        in: path
        description: role id
        required: true
        schema:
          type: string
      responses:
        204:
          description: successful operation
  /realms/{realm}/roles-by-id/{roleID}:
    get:
      tags:
      - Roles
      summary: DEPRECATED. Use GET /realms/{realm}/roles/{roleID}
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: roleID
        in: path
        description: id of role
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
  /realms/{realm}/clients/{clientID}/roles:
    get:
      tags:
      - Roles
      summary: Get all clients roles
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: clientID
        in: path
        description: id of client (not client-id)
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
    post:
      tags:
      - Roles
      summary: Create a new role for the realm or client
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: clientID
        in: path
        description: id of client (not client-id)
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        201:
          description: successful operation
          headers:
            Location:
              schema:
                type: string
              description: URL of the new resource.
  /realms/{realm}/clients/{clientID}/roles/{roleID}:
    delete:
      tags:
      - Roles
      summary: Delete a client role
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: clientID
        in: path
        description: id of client (not client-id)
        required: true
        schema:
          type: string
      - name: roleID
        in: path
        description: id of the role
        required: true
        schema:
          type: string
      responses:
        204:
          description: successful operation
        404:
          description: Not found
  /realms/{realm}/groups:
    get:
      tags:
      - Groups
      summary: Get the groups available for the realm
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
    post:
      tags:
      - Groups
      summary: Create a new group into the realm
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        201:
          description: successful operation
          headers:
            Location:
              schema:
                type: string
              description: URL of the new resource.
  /realms/{realm}/groups/{groupID}:
    delete:
      tags:
      - Groups
      summary: Delete the group
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: groupID
        in: path
        description: group id
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
  /realms/{realm}/groups/{groupID}/authorizations:
    get:
      tags:
      - Groups
      summary: Get the authorizations of the group
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: groupID
        in: path
        description: group id
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Authorizations'
    put:
      tags:
      - Groups
      summary: Update the authorizations of the group
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: groupID
        in: path
        description: group id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authorizations'    
      responses:
        200:
          description: successful operation
  /realms/{realm}/groups/{groupID}/actions/{action}/authorizations:
    get:
      tags:
      - Groups
      summary: Get an authorization of the group on a specific action. The authorization might be for a specific group (targetGroup) and/or specific realm (targetRealm).
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: groupID
        in: path
        description: group id
        required: true
        schema:
          type: string
      - name: action
        in: path
        description: action
        required: true
        schema:
          type: string
      - name: targetRealm
        in: query
        description: realm name (not id!)
        required: false
        schema:
          type: string
      - name: targetGroupID
        in: query
        description: target group id
        required: false
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/AuthorizationResponse'
        400:
          description: invalid information provided
        404:
          description: not found
    delete:
      tags:
      - Groups
      summary: Remove the authorization of the group on a specific action. The authorization might be for specific group (targetGroup) and/or specific realm (targetRealm).
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: groupID
        in: path
        description: group id
        required: true
        schema:
          type: string
      - name: action
        in: path
        description: action
        required: true
        schema:
          type: string
      - name: targetRealm
        in: query
        description: realm name (not id!)
        required: false
        schema:
          type: string
      - name: targetGroupID
        in: query
        description: target group id
        required: false
        schema:
          type: string
      
      responses:
        200:
          description: successful operation
        400:
          description: invalid information provided
    put:
      tags:
      - Groups
      summary: Add an authorization to the group with a partial matrix
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: groupID
        in: path
        description: group id
        required: true
        schema:
          type: string
      - name: action
        in: path
        description: action
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartialAuthorizations'    
      responses:
        200:
          description: successful operation
        400:
          description: invalid information provided
  /realms/{realm}/profile:
    get:
      tags:
      - Configuration
      summary: Get the realm users profile
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
  /realms/{realm}/configuration:
    get:
      tags:
      - Configuration
      summary: Get the current configuration
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'
    put:
      tags:
      - Configuration
      summary: Update the configuration for the given realm
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Configuration'
      responses:
        200:
          description: successful operation
        400:
          description: invalid information provided  (invalid client identifier or redirect URI not allowed for this client)
  /realms/{realm}/admin-configuration:
    get:
      tags:
      - Configuration
      summary: Get the admin configuration of the specified realm
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminConfiguration'
    put:
      tags:
      - Configuration
      summary: Update the admin configuration for the given realm
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminConfiguration'
      responses:
        200:
          description: successful operation
        400:
          description: invalid information provided
  /realms/{realm}/backoffice-configuration:
    get:
      tags:
      - Configuration
      summary: Get the current backoffice configuration. Result is an aggregation of configurations from all the user's groups.
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackOfficeConfiguration'
  /realms/{realm}/backoffice-configuration/groups:
    get:
      tags:
      - Configuration
      summary: Get the backoffice configuration for the given realmID/groupName
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: groupName
        in: query
        description: group name
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackOfficeConfiguration'
    put:
      tags:
      - Configuration
      summary: Update the backoffice configuration for the given realmID/groupName
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: groupName
        in: query
        description: group name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BackOfficeConfiguration'
      responses:
        200:
          description: successful operation
        400:
          description: invalid information provided
  /realms/{realm}/users/{userID}/federated-identity:
    get:
      tags:
      - Brokering
      summary: Gets a user's federated identities.
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FederatedIdentity'
  /realms/{realm}/users/{userID}/federated-identity/{provider}:
    post:
      tags:
      - Brokering
      summary: Add a login provider to a user.
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      - name: provider
        in: path
        description: Login provider id
        required: true
        schema:
          type: string        
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FederatedIdentity'
      responses:
        200:
          description: successful operation  
    delete:
      tags:
      - Brokering
      summary: Remove a login provider from a user.
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      - name: provider
        in: path
        description: Login provider id
        required: true
        schema:
          type: string        
      responses:
        200:
          description: successful operation
  /realms/{realm}/identity-providers:
    get:
      tags:
      - Brokering
      summary: Get the list of all IDPs in the realm
      parameters:
      - name: realm
        in: path
        description: realm name (not id!)
        required: true
        schema:
          type: string
      responses:
        200:
          description: Login provider id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IdentityProvider'
  /social/users:
    post:
      tags:
      - Users
      summary: >
        Create a new user in the social realm
        Username must be unique.
        Role and Groups can be assigned thanks to their ID.
      parameters:
      - name: generateNameID
        in: query
        description: tells if a NameID should be generated
        required: false
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: successful operation
          headers:
            Location:
              schema:
                type: string
              description: URL of the new resource.
  /social/users/{userID}/send-onboarding-email:
    post:
      tags:
      - Users
      summary: >
        Send an onboarding email to the user. He will receives an email to start the onboarding process. At the end of the process, he will be authenticated.
      parameters:
      - name: userID
        in: path
        description: User id
        required: true
        schema:
          type: string
      - name: lifespan
        in: query
        description: validity duration of the link sent in the mail in seconds. If value exceeds the configured max life span, you can get a HTTP status 400.
        required: false
        schema:
          type: integer
      - name: reminder
        in: query
        required: false
        schema:
          type: boolean
      - name: customerRealm
        in: query
        description: Customer realm name
        required: false
        schema:
          type: string
      - name: custom1
        in: query
        schema:
          type: string
      - name: custom2
        in: query
        schema:
          type: string
      - name: custom3
        in: query
        schema:
          type: string
      - name: custom4
        in: query
        schema:
          type: string
      - name: custom5
        in: query
        schema:
          type: string
      responses:
        200:
          description: Onboarding email sent
        400:
          description: Invalid input
        401:
          description: Not authenticated
        403:
          description: No permission to call this operation
        409:
          description: Endpoint not configured
components:
  schemas:
    Actions:
      type: object
      properties:
        name:
          type: string
        scope:
          type: string
    Realm:
      type: object
      properties:
        id:
          type: string
        keycloakVersion:
          type: string
        realm:
          type: string
        displayName:
          type: string
        enabled:
          type: boolean
          default: true
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        gender:
          type: string
          enum: [M,F,U]
          description: Male, Female or Undefined
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          description: When updating, explicitly set email to null to remove this value. To keep it untouched, don't provide the field.
        emailVerified:
          type: boolean
          default: false
        emailToValidate:
          type: string
          description: Read only. Email requested to be the email of the user but not yet validated
        phoneNumber:
          type: string
          description: When updating, explicitly set phone number to null to remove this value. To keep it untouched, don't provide the field.
        phoneNumberVerified:
          type: boolean
          default: false
        phoneNumberToValidate:
          type: string
          description: Read only. Phone number requested to be the phone number of the user but not yet validated
        birthDate:
          type: string
          description: format is DD.MM.YYYY
        birthLocation:
          type: string
        nationality:
          type: string
          description: ISO 3166 Alpha-2 country code
        idDocumentType:
          type: string
          enum: [ID_CARD, PASSPORT, RESIDENCE_PERMIT]
        idDocumentNumber:
          type: string
        idDocumentExpiration:
          type: string
        idDocumentCountry:
          type: string
          description: ISO 3166 Alpha-2 country code
        groups:
          type: array
          items:
            type: string
        trustIdGroups:
          type: array
          items:
            type: string
        roles:
          type: array
          items:
            type: string
        locale:
          type: string
          default: "en"
        businessId:
          type: string
          description: Business identifier (can be GLN)
        smsSent:
          type: integer
        smsAttempts:
          type: integer
        enabled:
          type: boolean
          default: true
        label:
          type: string
        pendingChecks:
          type: array
          description: Used only by getUser
          items:
            type: string
        accreditations:
          type: array
          description: Used only by getUser
          items:
            type: object
            properties:
              type:
                type: string
                description: accreditation type
              expiryDate:
                type: string
                description: expiry date. format is DD.MM.YYYY
              expired:
                type: boolean
                description: true if the expiry date has passed
              revoked:
                type: boolean
                description: true if the accreditation has been revoked for any reason (example. personal information updated after accreditation)
        nameId:
          type: string
          description: Used only by getUser
        onboardingCompleted:
          type: boolean
          description: Used only by getUser. Tells if onboarding is completed
        createdTimestamp:
          type: integer
          format: int64
        onBoardingStatus:
          type: string
          enum: ["", self-registration-form-completed, user-created-by-api, email-verified, password-set, phone-verified, 2fa-set, completed]
          description: user onboarding flow status
    UserCheck:
      type: object
      properties:
        operator:
          type: string
        checkDate:
          type: string
          description: check date. format is DD.MM.YYYY
        status:
          type: string
        type:
          type: string
        nature:
          type: string
        proofType:
          type: string
        comment:
          type: string
    UserStatus:
      type: object
      properties:
        email:
          type: string
        enabled:
          type: boolean
        emailVerified:
          type: boolean
        phoneNumberVerified:
          type: boolean
        onboardingCompleted:
          type: boolean
        numberOfCredentials:
          type: integer
    DeprecatedUserStatus:
      type: object
      properties:
        enabled:
          type: boolean
          description: user is enabled when he is enabled in Keycloak AND has at least 2 credentials (1 password + second factor)
    Client:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        baseUrl:
          type: string
        clientId:
          type: string
        protocol:
          type: string
        enabled:
          type: boolean
          default: true
    RequiredAction:
      type: object
      properties:
        alias:
          type: string
        name:
          type: string
        defaultAction:
          type: boolean
          default: false
    Role:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        clientRole:
          type: string
        composite:
          type: string
        containerId:
          type: string
        attributes:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
    Group:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    PartialAuthorizations:
      type: object
      properties:
        matrix:
          type: object
          properties:
            authorization:
              type: object
              properties:
                realmName:
                  type: object
                  properties:
                    groupName:
                      type: object
                      properties:
                        qualifier:
                          type: object
    Authorizations:
      type: object
      properties:
        matrix:
          type: object
    AuthorizationResponse:
      type: object
      properties:
        Authorized: 
          type: boolean
    Password:
      type: object
      properties:
        value:
          type: string
    Credential:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        algorithm:
          type: string
        createdDate:
          type: integer
          format: int64
        config:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
    AttackDetectionStatus:
      type: object
      properties:
        numFailures:
          type: integer
        disabled:
          type: boolean
        lastIPFailure:
          type: string
        lastFailure:
          type: integer
    Configuration:
      type: object
      properties:
        default_client_id:
          type: string
        default_redirect_uri:
          type: string
        api_self_authenticator_deletion_enabled:
          type: boolean
        api_self_password_change_enabled:
          type: boolean
        api_self_account_editing_enabled:
          type: boolean
        api_self_account_deletion_enabled:
          type: boolean
        api_self_idplinks_management_enabled:
          type: boolean
        show_authenticators_tab:
          type: boolean
        show_password_tab:
          type: boolean
        show_profile_tab:
          type: boolean
        show_account_deletion_button:
          type: boolean
        show_idplinks_tab:
          type: boolean
        self_service_default_tab:
          type: string
        redirect_cancelled_registration_url:
          type: string
        redirect_successful_registration_url:
          type: string
        onboarding_redirect_uri:
          type: string
        onboarding_client_id:
          type: string
        self_register_group_names:
          type: array
          items:
            type: string
        barcode_type:
          type: string
          enum: [CODE128]
        allowed_back_url:
          type: string
    AdminConfiguration:
      type: object
      properties:
        mode:
          type: string
        available_checks:
          type: object
          additionalProperties:
            type: boolean
        self_register_enabled:
          type: boolean
        consent_required_social:
          type: boolean
        consent_required_corporate:
          type: boolean
        bo_theme:
          type: string
        sse_theme:
          type: string
        register_theme:
          type: string
        signer_theme:
          type: string
        need_verified_contact:
          type: boolean
          description: if true, email and phone number have to be verified to allow validation of the account in KYC
        show_gln_editing:
          type: boolean
    BackOfficeConfiguration:
      type: object
      additionalProperties:
        type: object
        items:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
    FederatedIdentity:
      type: object
      properties:
        userID:
          type: string
        username:
          type: string
        identityProvider:
          type: string
          description: read-only. Should be omitted in create/update methods
    IdentityProvider:
      type: object
      properties:
          AddReadTokenRoleOnCreate: 
            type: boolean
          Alias: 
            type: string
          AuthenticateByDefault: 
            type: boolean
          Config:
            type: object
          DisplayName:
            type: string
          Enabled:
            type: boolean
          FirstBrokerLoginFlowAlias:
            type: string
          InternalID:
            type: string
          LinkOnly:
            type: boolean
          PostBrokerLoginFlowAlias:
            type: string
          ProviderID:
            type: string
          StoreToken:
            type: boolean
          TrustEmail:
            type: boolean
    Profile:
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/ProfileAttribute'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/ProfileGroup'
          description: groups are used to gather user attributes by themes
    ProfileAttribute:
      type: object
      properties:
        name:
          type: string
        displayName:
          type: string
        group:
          type: string
          description: name of a group defined in ProfileGroup
        required:
          type: boolean
        validations:
          $ref: '#/components/schemas/ProfileAttributeValidations'
    ProfileAttributeValidations:
      description: >
        Here is a list of known validators :
        email: no parameters
        length: min/max (can be integer or string), trim-disabled (boolean as string)
        integer: min/max (integer as string)
        double: min/max (integer as string)
        options: options (array of allowed values)
        pattern: pattern (regex), error-message (string)
        local-date: no parameters
        uri: no parameters
        username-prohibited-characters: error-message (string)
        person-name-prohibited-characters: error-message (string)
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ProfileAttributeValidator'
    ProfileAttributeValidator:
      type: object
      additionalProperties:
        type: object
    ProfileGroup:
      type: object
      properties:
        name:
          type: string
        displayHeader:
          type: string
        displayDescription:
          type: string
        annotations:
          type: object
          additionalProperties:
            type: string
  securitySchemes:
    openId:
      type: openIdConnect
      openIdConnectUrl: http://toto.com/.well-known/openid-configuration
security:
  - openId:
    - todo